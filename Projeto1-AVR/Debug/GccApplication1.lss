
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000410  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eef  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4b  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000899  00000000  00000000  00001f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00002830  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d5  00000000  00000000  00002a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000501  00000000  00000000  00002f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000341a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <main>
  8e:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <PINS_init>:
	/*	definir pinos de entrada e saída das portas:
		0 -> pino de entrada do microcontrolador
		1 -> pino de saída do microcontrolador	*/
	
	//pinos para o LCD
	DDRB = 0xFF; // 1111 111
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	
	//pinos para o keyboard
	DDRC = 0x0F; //xx00 1111 -> PC0, PC1, PC2 e PC3 as input e PC4 e PC5 como output
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	87 b9       	out	0x07, r24	; 7
	// PC4 -> Led fora do ar
	// PC5 -> Led pagamento pendente
	DDRD = 0x00; //x000 xxxx -> PD4, PD5 e PD6 as output
  9e:	1a b8       	out	0x0a, r1	; 10
  a0:	08 95       	ret

000000a2 <delay_debouncing>:
void delay_debouncing()
{
	// T_Timer = 1/16MHz = 62.5ns
	// Prescaler: 256-> 16MHz/256 = 62500Hz / T_Timer = 1/62500 = 16us
	//num_contagens = (1E-3)/16E-6 = 62
	TCCR0A = 0;    // Configura modo
  a2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x04; // Configura preescaler
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 194; //256 - 62 = 194
  a8:	82 ec       	ldi	r24, 0xC2	; 194
  aa:	86 bd       	out	0x26, r24	; 38
	
	while ((TIFR0 & (1 << 0)) == 0); //aguarda flag
  ac:	a8 9b       	sbis	0x15, 0	; 21
  ae:	fe cf       	rjmp	.-4      	; 0xac <delay_debouncing+0xa>
	TIFR0 |= (1 << 0); //limpa flag
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	08 95       	ret

000000b8 <debouncing>:
	
	return key;
}

char debouncing(char TECLA)
{
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	c8 2f       	mov	r28, r24
	unsigned char Key_last = 0, Count = 0, Key_now, BOUNCE = 7;
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	10 e0       	ldi	r17, 0x00	; 0
	
	while(Count < BOUNCE)
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <debouncing+0x20>
	{
		delay_debouncing(); 			//delay de 1ms
  c6:	0e 94 51 00 	call	0xa2	; 0xa2 <delay_debouncing>
		
		Key_now = TECLA;
		
		if (Key_now == Key_last)
  ca:	1c 13       	cpse	r17, r28
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <debouncing+0x1a>
		{
			Count++;
  ce:	df 5f       	subi	r29, 0xFF	; 255
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <debouncing+0x1e>
		}
		else
		{
			Count = 0;
			Key_last = Key_now;
  d2:	1c 2f       	mov	r17, r28
		{
			Count++;
		}
		else
		{
			Count = 0;
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	9c 2f       	mov	r25, r28

char debouncing(char TECLA)
{
	unsigned char Key_last = 0, Count = 0, Key_now, BOUNCE = 7;
	
	while(Count < BOUNCE)
  d8:	d7 30       	cpi	r29, 0x07	; 7
  da:	a8 f3       	brcs	.-22     	; 0xc6 <debouncing+0xe>
			Count = 0;
			Key_last = Key_now;
		}
	}
	return Key_now;
}
  dc:	89 2f       	mov	r24, r25
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	08 95       	ret

000000e6 <keyboard_input>:
 */ 
#include "header.h"
#include <avr/io.h>

char keyboard_input()
{
  e6:	bf 92       	push	r11
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	2c 97       	sbiw	r28, 0x0c	; 12
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	int i, j, flag=0;
	char key;
	char keyboard[4][3] = {{'1','2','3'},
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	e1 e0       	ldi	r30, 0x01	; 1
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	de 01       	movw	r26, r28
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	01 90       	ld	r0, Z+
 114:	0d 92       	st	X+, r0
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <keyboard_input+0x2c>
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
 11a:	80 e7       	ldi	r24, 0x70	; 112
 11c:	8b b9       	out	0x0b, r24	; 11
#include "header.h"
#include <avr/io.h>

char keyboard_input()
{
	int i, j, flag=0;
 11e:	c1 2c       	mov	r12, r1
 120:	d1 2c       	mov	r13, r1
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
 122:	42 c0       	rjmp	.+132    	; 0x1a8 <keyboard_input+0xc2>
	{
		for(i=0; i<4; i++)
		{
			PORTC = 0x0F; //set PC0, PC1, PC2, PC3 -> 0000 1111
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	88 b9       	out	0x08, r24	; 8
			
			PORTC &= ~(1 << i); //A cada iteração ele zera uma porta
 128:	28 b1       	in	r18, 0x08	; 8
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 2c       	mov	r0, r14
 130:	02 c0       	rjmp	.+4      	; 0x136 <keyboard_input+0x50>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <keyboard_input+0x4c>
 13a:	80 95       	com	r24
 13c:	82 23       	and	r24, r18
 13e:	88 b9       	out	0x08, r24	; 8
			
			for(j=0; j<3; j++)
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	23 c0       	rjmp	.+70     	; 0x18c <keyboard_input+0xa6>
			{
				if(!debouncing((PIND & (1 << (4+j)))))	//testa as colunas de PD4, PD5 e PD6
 146:	29 b1       	in	r18, 0x09	; 9
 148:	a8 01       	movw	r20, r16
 14a:	4c 5f       	subi	r20, 0xFC	; 252
 14c:	5f 4f       	sbci	r21, 0xFF	; 255
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <keyboard_input+0x72>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	4a 95       	dec	r20
 15a:	e2 f7       	brpl	.-8      	; 0x154 <keyboard_input+0x6e>
 15c:	82 23       	and	r24, r18
 15e:	0e 94 5c 00 	call	0xb8	; 0xb8 <debouncing>
 162:	81 11       	cpse	r24, r1
 164:	11 c0       	rjmp	.+34     	; 0x188 <keyboard_input+0xa2>
				{
					key = keyboard[i][j];
 166:	f7 01       	movw	r30, r14
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	ee 0d       	add	r30, r14
 16e:	ff 1d       	adc	r31, r15
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	8c 0f       	add	r24, r28
 176:	9d 1f       	adc	r25, r29
 178:	e8 0f       	add	r30, r24
 17a:	f9 1f       	adc	r31, r25
 17c:	e0 0f       	add	r30, r16
 17e:	f1 1f       	adc	r31, r17
 180:	b0 80       	ld	r11, Z
					flag = 1;
 182:	cc 24       	eor	r12, r12
 184:	c3 94       	inc	r12
 186:	d1 2c       	mov	r13, r1
		{
			PORTC = 0x0F; //set PC0, PC1, PC2, PC3 -> 0000 1111
			
			PORTC &= ~(1 << i); //A cada iteração ele zera uma porta
			
			for(j=0; j<3; j++)
 188:	0f 5f       	subi	r16, 0xFF	; 255
 18a:	1f 4f       	sbci	r17, 0xFF	; 255
 18c:	03 30       	cpi	r16, 0x03	; 3
 18e:	11 05       	cpc	r17, r1
 190:	d4 f2       	brlt	.-76     	; 0x146 <keyboard_input+0x60>
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
	{
		for(i=0; i<4; i++)
 192:	9f ef       	ldi	r25, 0xFF	; 255
 194:	e9 1a       	sub	r14, r25
 196:	f9 0a       	sbc	r15, r25
 198:	02 c0       	rjmp	.+4      	; 0x19e <keyboard_input+0xb8>
 19a:	e1 2c       	mov	r14, r1
 19c:	f1 2c       	mov	r15, r1
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	e8 16       	cp	r14, r24
 1a2:	f1 04       	cpc	r15, r1
 1a4:	0c f4       	brge	.+2      	; 0x1a8 <keyboard_input+0xc2>
 1a6:	be cf       	rjmp	.-132    	; 0x124 <keyboard_input+0x3e>
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
 1a8:	c1 14       	cp	r12, r1
 1aa:	d1 04       	cpc	r13, r1
 1ac:	b1 f3       	breq	.-20     	; 0x19a <keyboard_input+0xb4>
			}
		}
	}
	
	return key;
}
 1ae:	8b 2d       	mov	r24, r11
 1b0:	2c 96       	adiw	r28, 0x0c	; 12
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	bf 90       	pop	r11
 1ce:	08 95       	ret

000001d0 <delay_lcd>:
#define RS (PINB & (1 << PINB0))
#define E (PINB & (1 << PINB1))

void delay_lcd()
{	
	TCCR0B = 0x02;				//prescaler de 8, T_timer = 8*T_CPU = 0,5us
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 176;				//(40us/0,5us) = 80 contagens -> 256-80 = 176
 1d4:	80 eb       	ldi	r24, 0xB0	; 176
 1d6:	86 bd       	out	0x26, r24	; 38
	while(!(TIFR0 & (1<<0)));	//aguarda estouro
 1d8:	a8 9b       	sbis	0x15, 0	; 21
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <delay_lcd+0x8>
	TIFR0 = (1<<0);				//limpa flag de estouro
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	85 bb       	out	0x15, r24	; 21
 1e0:	08 95       	ret

000001e2 <delay_clear>:
}

void delay_clear()
{	
	TCCR0B = 0x04;				//prescaler de 256, T_timer = 256*T_CPU = 16us
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 153;				//(1640us/16us) = 103 contagens -> 256-103 = 153
 1e6:	89 e9       	ldi	r24, 0x99	; 153
 1e8:	86 bd       	out	0x26, r24	; 38
	while(!(TIFR0 & (1<<0)));	//aguarda estouro
 1ea:	a8 9b       	sbis	0x15, 0	; 21
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <delay_clear+0x8>
	TIFR0 = (1<<0);				//limpa flag de estouro
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	85 bb       	out	0x15, r24	; 21
 1f2:	08 95       	ret

000001f4 <send_command>:
	send_command(0xC, 0); 	// display aceso sem cursor
}

// enviar comando para o display
void send_command(char c, char rs)
{
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24
	if(rs == 0)                // RS = 1, configura display; RS = 0, escreve no display
 1f8:	61 11       	cpse	r22, r1
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <send_command+0x10>
		PORTB &= ~(1 << 0);
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	8e 7f       	andi	r24, 0xFE	; 254
 200:	85 b9       	out	0x05, r24	; 5
 202:	03 c0       	rjmp	.+6      	; 0x20a <send_command+0x16>
	else
		PORTB |= (1 << 0);
 204:	85 b1       	in	r24, 0x05	; 5
 206:	81 60       	ori	r24, 0x01	; 1
 208:	85 b9       	out	0x05, r24	; 5

	PORTB &= 0x0F;            // AND com 0000 1111 -> limpa os bits (P1_4 P1_5 P1_6 P1_7)
 20a:	85 b1       	in	r24, 0x05	; 5
 20c:	8f 70       	andi	r24, 0x0F	; 15
 20e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (c&0xF0);        // passa os 4 bits mais significativos de C para P1 -> cccc cccc & 1111 0000 = cccc 0000
 210:	85 b1       	in	r24, 0x05	; 5
 212:	9c 2f       	mov	r25, r28
 214:	90 7f       	andi	r25, 0xF0	; 240
 216:	89 2b       	or	r24, r25
 218:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1);
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 220:	85 b1       	in	r24, 0x05	; 5
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	85 b9       	out	0x05, r24	; 5

	delay_lcd(); // delay de 40us
 226:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay_lcd>

	c = c<<4;
	PORTB &= 0x0F;
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	8f 70       	andi	r24, 0x0F	; 15
 22e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (c&0xF0);
 230:	85 b1       	in	r24, 0x05	; 5
 232:	c2 95       	swap	r28
 234:	c0 7f       	andi	r28, 0xF0	; 240
 236:	c8 2b       	or	r28, r24
 238:	c5 b9       	out	0x05, r28	; 5
	PORTB |= (1 << 1);
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 240:	85 b1       	in	r24, 0x05	; 5
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	85 b9       	out	0x05, r24	; 5

	delay_lcd();            // delay de 40us
 246:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay_lcd>
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_init>:
}

// inicializa o display LCD
void LCD_init()
{
	PORTB &= ~(1 << 0);
 24e:	85 b1       	in	r24, 0x05	; 5
 250:	8e 7f       	andi	r24, 0xFE	; 254
 252:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0x0F;
 254:	85 b1       	in	r24, 0x05	; 5
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x20;
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	80 62       	ori	r24, 0x20	; 32
 25e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1);
 260:	85 b1       	in	r24, 0x05	; 5
 262:	82 60       	ori	r24, 0x02	; 2
 264:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 266:	85 b1       	in	r24, 0x05	; 5
 268:	8d 7f       	andi	r24, 0xFD	; 253
 26a:	85 b9       	out	0x05, r24	; 5
	delay_lcd();
 26c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delay_lcd>
	
	send_command(0x28, 0); 	// função de utilização
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	88 e2       	ldi	r24, 0x28	; 40
 274:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <send_command>
	send_command(0x06, 0); 	// modo de operação: escreve deslocando o cursor para a direita
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <send_command>
	send_command(0xC, 0); 	// display aceso sem cursor
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <send_command>
 288:	08 95       	ret

0000028a <sendString>:

	delay_lcd();            // delay de 40us
}

void sendString(char* str)
{
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	8c 01       	movw	r16, r24
	unsigned char index = 0;
 292:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[index] != 0)
 294:	04 c0       	rjmp	.+8      	; 0x29e <sendString+0x14>
	{
		send_command(str[index], 1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <send_command>
		index++;
 29c:	cf 5f       	subi	r28, 0xFF	; 255

void sendString(char* str)
{
	unsigned char index = 0;
	
	while(str[index] != 0)
 29e:	f8 01       	movw	r30, r16
 2a0:	ec 0f       	add	r30, r28
 2a2:	f1 1d       	adc	r31, r1
 2a4:	80 81       	ld	r24, Z
 2a6:	81 11       	cpse	r24, r1
 2a8:	f6 cf       	rjmp	.-20     	; 0x296 <sendString+0xc>
	{
		send_command(str[index], 1);
		index++;
	}
}
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	08 95       	ret

000002b2 <sendChar>:

void sendChar(char c)
{
	send_command(c, 1);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <send_command>
 2b8:	08 95       	ret

000002ba <LCD_clear>:
}

// limpa o display e retorna o cursor para o início
void LCD_clear()
{
	send_command(0x01, 0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <send_command>
	delay_clear();
 2c2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <delay_clear>
 2c6:	08 95       	ret

000002c8 <LCD_print2lines>:
{
	send_command(c, 1);
}

void LCD_print2lines(char *line1, char *line2)
{
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	8c 01       	movw	r16, r24
 2d2:	eb 01       	movw	r28, r22
	LCD_clear();
 2d4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_clear>
	sendString(line1);
 2d8:	c8 01       	movw	r24, r16
 2da:	0e 94 45 01 	call	0x28a	; 0x28a <sendString>
	send_command(0xC0,0);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	80 ec       	ldi	r24, 0xC0	; 192
 2e2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <send_command>
	sendString(line2);
 2e6:	ce 01       	movw	r24, r28
 2e8:	0e 94 45 01 	call	0x28a	; 0x28a <sendString>
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	08 95       	ret

000002f6 <main>:

char STATE=1;

int main(void)
{
	PINS_init();
 2f6:	0e 94 4b 00 	call	0x96	; 0x96 <PINS_init>
	LCD_init();
 2fa:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_init>
	
	TCCR1A = 0; //Modo normal
 2fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x5; //Prescaler 1024
 302:	85 e0       	ldi	r24, 0x05	; 5
 304:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	/* Replace with your application code */
    while (1) 
    {
        switch(STATE)
 308:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	a1 f0       	breq	.+40     	; 0x338 <main+0x42>
 310:	18 f0       	brcs	.+6      	; 0x318 <main+0x22>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	d1 f0       	breq	.+52     	; 0x34a <main+0x54>
 316:	f8 cf       	rjmp	.-16     	; 0x308 <main+0x12>
        {
	        case 0: // espera a máquina ser ligada
				LCD_clear();
 318:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_clear>
				sendString("DESLIGADO");
 31c:	8d e0       	ldi	r24, 0x0D	; 13
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 45 01 	call	0x28a	; 0x28a <sendString>
				if(keyboard_input() == '#')
 324:	0e 94 73 00 	call	0xe6	; 0xe6 <keyboard_input>
 328:	83 32       	cpi	r24, 0x23	; 35
 32a:	71 f7       	brne	.-36     	; 0x308 <main+0x12>
				{
					STATE = maquina_on_off(1);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 ac 01 	call	0x358	; 0x358 <maquina_on_off>
 332:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 336:	e8 cf       	rjmp	.-48     	; 0x308 <main+0x12>
				}
			break;
			
	        case 1: // espera pela senha de user
				LCD_print2lines("Digite a senha","Senha:");
 338:	67 e1       	ldi	r22, 0x17	; 23
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	8e e1       	ldi	r24, 0x1E	; 30
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_print2lines>
				STATE = read_user_password();
 344:	0e 94 b6 01 	call	0x36c	; 0x36c <read_user_password>
 348:	ff cf       	rjmp	.-2      	; 0x348 <main+0x52>
				while(1);
	        break;
			
	        case 2:
				LCD_print2lines("1-A Vista 2-A","prazo 3-Estorno");
 34a:	6d e2       	ldi	r22, 0x2D	; 45
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	8d e3       	ldi	r24, 0x3D	; 61
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_print2lines>
 356:	ff cf       	rjmp	.-2      	; 0x356 <main+0x60>

00000358 <maquina_on_off>:
{
	if(mode == 0) //caso para desligar a maquina
	{
		//return 0;
	}
	if(mode == 1) //caso para ligar a maquina
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	29 f4       	brne	.+10     	; 0x366 <maquina_on_off+0xe>
	{
		
		delay_3s();
 35c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <delay_3s>
		
		return 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	08 95       	ret
	}
	return 0;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
}
 36a:	08 95       	ret

0000036c <read_user_password>:

int read_user_password()
{
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	00 d0       	rcall	.+0      	; 0x376 <read_user_password+0xa>
 376:	00 d0       	rcall	.+0      	; 0x378 <read_user_password+0xc>
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
	int i=0, flag=0;
 37c:	00 e0       	ldi	r16, 0x00	; 0
 37e:	10 e0       	ldi	r17, 0x00	; 0
	char pass[4], c;
	
	while(i<4)
 380:	11 c0       	rjmp	.+34     	; 0x3a4 <read_user_password+0x38>
	{
		c = keyboard_input();
 382:	0e 94 73 00 	call	0xe6	; 0xe6 <keyboard_input>
		if(c != '*' && c != '#')
 386:	8a 32       	cpi	r24, 0x2A	; 42
 388:	69 f0       	breq	.+26     	; 0x3a4 <read_user_password+0x38>
 38a:	83 32       	cpi	r24, 0x23	; 35
 38c:	59 f0       	breq	.+22     	; 0x3a4 <read_user_password+0x38>
		{
			pass[i] = c;
 38e:	e1 e0       	ldi	r30, 0x01	; 1
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	e0 0f       	add	r30, r16
 398:	f1 1f       	adc	r31, r17
 39a:	80 83       	st	Z, r24
			sendChar(pass[i]);
 39c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <sendChar>
			i++;
 3a0:	0f 5f       	subi	r16, 0xFF	; 255
 3a2:	1f 4f       	sbci	r17, 0xFF	; 255
int read_user_password()
{
	int i=0, flag=0;
	char pass[4], c;
	
	while(i<4)
 3a4:	04 30       	cpi	r16, 0x04	; 4
 3a6:	11 05       	cpc	r17, r1
 3a8:	64 f3       	brlt	.-40     	; 0x382 <read_user_password+0x16>
			pass[i] = c;
			sendChar(pass[i]);
			i++;
		}
	}
	if(keyboard_input() == '#')
 3aa:	0e 94 73 00 	call	0xe6	; 0xe6 <keyboard_input>
 3ae:	83 32       	cpi	r24, 0x23	; 35
 3b0:	79 f4       	brne	.+30     	; 0x3d0 <read_user_password+0x64>
	{
		if(!strcmp(pass,"1234"))
 3b2:	6b e4       	ldi	r22, 0x4B	; 75
 3b4:	71 e0       	ldi	r23, 0x01	; 1
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	0e 94 fd 01 	call	0x3fa	; 0x3fa <strcmp>
 3be:	89 2b       	or	r24, r25
 3c0:	21 f4       	brne	.+8      	; 0x3ca <read_user_password+0x5e>
		{
			sendChar('a');
 3c2:	81 e6       	ldi	r24, 0x61	; 97
 3c4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <sendChar>
 3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <read_user_password+0x64>
		}
		else
		{
			sendChar('b');
 3ca:	82 e6       	ldi	r24, 0x62	; 98
 3cc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <sendChar>
		}
	}
		
}
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret

000003e2 <delay_3s>:
void delay_3s()
{
	// T_Timer = 1/16MHz = 62.5ns
	// Prescalar: 1024 -> T_Timer = 62.5ns * 1024 = 64us
	// N_contagens = 3s/64us = 46875
	TCNT1 = 18661; // 65536 - 46875 = 18661
 3e2:	85 ee       	ldi	r24, 0xE5	; 229
 3e4:	98 e4       	ldi	r25, 0x48	; 72
 3e6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 3ea:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while ((TIFR1 & (1 << 0)) == 0); //aguarda flag
 3ee:	b0 9b       	sbis	0x16, 0	; 22
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <delay_3s+0xc>
	TIFR1 |= (1 << 0); //limpa flag
 3f2:	86 b3       	in	r24, 0x16	; 22
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	86 bb       	out	0x16, r24	; 22
 3f8:	08 95       	ret

000003fa <strcmp>:
 3fa:	fb 01       	movw	r30, r22
 3fc:	dc 01       	movw	r26, r24
 3fe:	8d 91       	ld	r24, X+
 400:	01 90       	ld	r0, Z+
 402:	80 19       	sub	r24, r0
 404:	01 10       	cpse	r0, r1
 406:	d9 f3       	breq	.-10     	; 0x3fe <strcmp+0x4>
 408:	99 0b       	sbc	r25, r25
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
