
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  00000f7e  00001012  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800292  00800292  000011a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002693  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea4  00000000  00000000  00003a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001312  00000000  00000000  00004903  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  00005c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d0  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb5  00000000  00000000  0000676c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00007621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_13>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_18>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	f3 01       	movw	r30, r6
  6a:	05 02       	muls	r16, r21
  6c:	0c 02       	muls	r16, r28
  6e:	19 02       	muls	r17, r25
  70:	2c 02       	muls	r18, r28
  72:	35 02       	muls	r19, r21
  74:	3e 02       	muls	r19, r30
  76:	53 02       	muls	r21, r19
  78:	56 02       	muls	r21, r22
  7a:	59 02       	muls	r21, r25
  7c:	5c 02       	muls	r21, r28

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d8 e0       	ldi	r29, 0x08	; 8
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	ee e7       	ldi	r30, 0x7E	; 126
  92:	ff e0       	ldi	r31, 0x0F	; 15
  94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0
  9a:	a2 39       	cpi	r26, 0x92	; 146
  9c:	b1 07       	cpc	r27, r17
  9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	a2 e9       	ldi	r26, 0x92	; 146
  a4:	b2 e0       	ldi	r27, 0x02	; 2
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	af 3d       	cpi	r26, 0xDF	; 223
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  b4:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <MICPAY_init>:

// inicializa os pinos usados no projeto
void MICPAY_init()
{
	/* configurações para modo de operação normal nos timers */
	TCCR0A = 0;
  bc:	14 bc       	out	0x24, r1	; 36
	TCCR1A = 0;
  be:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR2A = 0;
  c2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	
	// configurações iniciais para TIM1 para contagem de 1 seg = 1 min no sistema
	TCCR1B = 0x04;	// prescaler de 256 -> tempo de uma contagem é 0,0625us*256 = 16us
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0x0BDC;	// 1s/16us = 62500 contagens -> 65536-62500 = 3036
  cc:	8c ed       	ldi	r24, 0xDC	; 220
  ce:	9b e0       	ldi	r25, 0x0B	; 11
  d0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	// interrupções do timer
	sei();
  d8:	78 94       	sei
	TIMSK1 |= (1 << 0); // interrupção flag estouro tim1
  da:	ef e6       	ldi	r30, 0x6F	; 111
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
	
	
	/*	pinos como entrada e saída:
		0 -> pino de entrada do microcontrolador
		1 -> pino de saída do microcontrolador	*/
	DDRB = 0xFF; // 1111 111
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0F; //xx00 1111 -> PC0, PC1, PC2 e PC3 as input e PC4 (led fora do ar) e PC5 (pag pendente) como output
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00; //x000 xxxx -> PD4, PD5 e PD6 as output
  ec:	1a b8       	out	0x0a, r1	; 10
  ee:	08 95       	ret

000000f0 <set_hour>:
}

void set_hour(int in_hour, int in_minute)
{
	HOUR = in_hour;
  f0:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <HOUR+0x1>
  f4:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <HOUR>
	MINUTE = in_minute;
  f8:	70 93 9e 02 	sts	0x029E, r23	; 0x80029e <MINUTE+0x1>
  fc:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <MINUTE>
 100:	08 95       	ret

00000102 <VAR_init>:

// inicializa variáveis do sistema
void VAR_init()
{
	// inicializa dados dos operadores
	operador1.saldo = 0;
 102:	e1 eb       	ldi	r30, 0xB1	; 177
 104:	f2 e0       	ldi	r31, 0x02	; 2
 106:	10 82       	st	Z, r1
 108:	11 82       	std	Z+1, r1	; 0x01
 10a:	12 82       	std	Z+2, r1	; 0x02
 10c:	13 82       	std	Z+3, r1	; 0x03
	operador1.total_estornos=0;
 10e:	15 82       	std	Z+5, r1	; 0x05
 110:	14 82       	std	Z+4, r1	; 0x04
	operador1.enable = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	97 83       	std	Z+7, r25	; 0x07
 118:	86 83       	std	Z+6, r24	; 0x06
	
	operador2.saldo = 0;
 11a:	e9 eb       	ldi	r30, 0xB9	; 185
 11c:	f2 e0       	ldi	r31, 0x02	; 2
 11e:	10 82       	st	Z, r1
 120:	11 82       	std	Z+1, r1	; 0x01
 122:	12 82       	std	Z+2, r1	; 0x02
 124:	13 82       	std	Z+3, r1	; 0x03
	operador2.total_estornos=0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
	operador2.enable = 1;
 12a:	97 83       	std	Z+7, r25	; 0x07
 12c:	86 83       	std	Z+6, r24	; 0x06
	
	// inicializa os dados de hora
	set_hour(8, 0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 78 00 	call	0xf0	; 0xf0 <set_hour>
	enable_4S = 0;
 13a:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <enable_4S+0x1>
 13e:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <enable_4S>
	enable_3S = 0;
 142:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <enable_3S+0x1>
 146:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <enable_3S>
	COUNT_3S = 0;
 14a:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <COUNT_3S+0x1>
 14e:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <COUNT_3S>
	COUNT_4S = 0;
 152:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <COUNT_4S+0x1>
 156:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <COUNT_4S>
 15a:	08 95       	ret

0000015c <update_clock>:
}

void update_clock()
{
	MINUTE++;
 15c:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <MINUTE>
 160:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <MINUTE+0x1>
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <MINUTE+0x1>
 16a:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <MINUTE>
	if (MINUTE > 59)
 16e:	cc 97       	sbiw	r24, 0x3c	; 60
 170:	6c f0       	brlt	.+26     	; 0x18c <update_clock+0x30>
	{
		MINUTE = 0;
 172:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <MINUTE+0x1>
 176:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <MINUTE>
		HOUR++;
 17a:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <HOUR>
 17e:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <HOUR+0x1>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <HOUR+0x1>
 188:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <HOUR>
	}
	if (HOUR>23)
 18c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <HOUR>
 190:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <HOUR+0x1>
 194:	48 97       	sbiw	r24, 0x18	; 24
 196:	24 f0       	brlt	.+8      	; 0x1a0 <update_clock+0x44>
	{
		HOUR = 0;
 198:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <HOUR+0x1>
 19c:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <HOUR>
 1a0:	08 95       	ret

000001a2 <debouncing>:
	
	return key;
}

char debouncing(char TECLA)
{
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	c8 2f       	mov	r28, r24
	unsigned char Key_last = 0, Count = 0, Key_now, BOUNCE = 7;
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	10 e0       	ldi	r17, 0x00	; 0
	
	while(Count < BOUNCE)
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <debouncing+0x20>
	{
		delay_debouncing(); 			//delay de 1ms
 1b0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <delay_debouncing>
		
		Key_now = TECLA;
		
		if (Key_now == Key_last)
 1b4:	1c 13       	cpse	r17, r28
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <debouncing+0x1a>
		{
			Count++;
 1b8:	df 5f       	subi	r29, 0xFF	; 255
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <debouncing+0x1e>
		}
		else
		{
			Count = 0;
			Key_last = Key_now;
 1bc:	1c 2f       	mov	r17, r28
		{
			Count++;
		}
		else
		{
			Count = 0;
 1be:	d0 e0       	ldi	r29, 0x00	; 0
 1c0:	9c 2f       	mov	r25, r28

char debouncing(char TECLA)
{
	unsigned char Key_last = 0, Count = 0, Key_now, BOUNCE = 7;
	
	while(Count < BOUNCE)
 1c2:	d7 30       	cpi	r29, 0x07	; 7
 1c4:	a8 f3       	brcs	.-22     	; 0x1b0 <debouncing+0xe>
			Count = 0;
			Key_last = Key_now;
		}
	}
	return Key_now;
}
 1c6:	89 2f       	mov	r24, r25
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	08 95       	ret

000001d0 <keyboard_input>:
 #include "header.h"

char keyboard_input()
{
 1d0:	bf 92       	push	r11
 1d2:	cf 92       	push	r12
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	2c 97       	sbiw	r28, 0x0c	; 12
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
	int i, j, flag=0;
	char key;
	char keyboard[4][3] = {{'1','2','3'},
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	e0 e0       	ldi	r30, 0x00	; 0
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	de 01       	movw	r26, r28
 1fa:	11 96       	adiw	r26, 0x01	; 1
 1fc:	01 90       	ld	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	8a 95       	dec	r24
 202:	e1 f7       	brne	.-8      	; 0x1fc <keyboard_input+0x2c>
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
 204:	80 e7       	ldi	r24, 0x70	; 112
 206:	8b b9       	out	0x0b, r24	; 11
 #include "header.h"

char keyboard_input()
{
	int i, j, flag=0;
 208:	c1 2c       	mov	r12, r1
 20a:	d1 2c       	mov	r13, r1
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
 20c:	42 c0       	rjmp	.+132    	; 0x292 <keyboard_input+0xc2>
	{
		for(i=0; i<4; i++)
		{
			PORTC = 0x0F; //set PC0, PC1, PC2, PC3 -> 0000 1111
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	88 b9       	out	0x08, r24	; 8
			
			PORTC &= ~(1 << i); //A cada iteração ele zera uma porta
 212:	28 b1       	in	r18, 0x08	; 8
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 2c       	mov	r0, r14
 21a:	02 c0       	rjmp	.+4      	; 0x220 <keyboard_input+0x50>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <keyboard_input+0x4c>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	88 b9       	out	0x08, r24	; 8
			
			for(j=0; j<3; j++)
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	23 c0       	rjmp	.+70     	; 0x276 <keyboard_input+0xa6>
			{
				if(!debouncing((PIND & (1 << (4+j) ) )))	//testa as colunas de PD4, PD5 e PD6
 230:	29 b1       	in	r18, 0x09	; 9
 232:	a8 01       	movw	r20, r16
 234:	4c 5f       	subi	r20, 0xFC	; 252
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <keyboard_input+0x72>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	4a 95       	dec	r20
 244:	e2 f7       	brpl	.-8      	; 0x23e <keyboard_input+0x6e>
 246:	82 23       	and	r24, r18
 248:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <debouncing>
 24c:	81 11       	cpse	r24, r1
 24e:	11 c0       	rjmp	.+34     	; 0x272 <keyboard_input+0xa2>
				{
					key = keyboard[i][j];
 250:	f7 01       	movw	r30, r14
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	ee 0d       	add	r30, r14
 258:	ff 1d       	adc	r31, r15
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	8c 0f       	add	r24, r28
 260:	9d 1f       	adc	r25, r29
 262:	e8 0f       	add	r30, r24
 264:	f9 1f       	adc	r31, r25
 266:	e0 0f       	add	r30, r16
 268:	f1 1f       	adc	r31, r17
 26a:	b0 80       	ld	r11, Z
					flag = 1;
 26c:	cc 24       	eor	r12, r12
 26e:	c3 94       	inc	r12
 270:	d1 2c       	mov	r13, r1
		{
			PORTC = 0x0F; //set PC0, PC1, PC2, PC3 -> 0000 1111
			
			PORTC &= ~(1 << i); //A cada iteração ele zera uma porta
			
			for(j=0; j<3; j++)
 272:	0f 5f       	subi	r16, 0xFF	; 255
 274:	1f 4f       	sbci	r17, 0xFF	; 255
 276:	03 30       	cpi	r16, 0x03	; 3
 278:	11 05       	cpc	r17, r1
 27a:	d4 f2       	brlt	.-76     	; 0x230 <keyboard_input+0x60>
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
	{
		for(i=0; i<4; i++)
 27c:	9f ef       	ldi	r25, 0xFF	; 255
 27e:	e9 1a       	sub	r14, r25
 280:	f9 0a       	sbc	r15, r25
 282:	02 c0       	rjmp	.+4      	; 0x288 <keyboard_input+0xb8>
 284:	e1 2c       	mov	r14, r1
 286:	f1 2c       	mov	r15, r1
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	e8 16       	cp	r14, r24
 28c:	f1 04       	cpc	r15, r1
 28e:	0c f4       	brge	.+2      	; 0x292 <keyboard_input+0xc2>
 290:	be cf       	rjmp	.-132    	; 0x20e <keyboard_input+0x3e>
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
 292:	c1 14       	cp	r12, r1
 294:	d1 04       	cpc	r13, r1
 296:	b1 f3       	breq	.-20     	; 0x284 <keyboard_input+0xb4>
			}
		}
	}
	
	return key;
}
 298:	8b 2d       	mov	r24, r11
 29a:	2c 96       	adiw	r28, 0x0c	; 12
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	df 90       	pop	r13
 2b4:	cf 90       	pop	r12
 2b6:	bf 90       	pop	r11
 2b8:	08 95       	ret

000002ba <send_command>:
	send_command(0xC, 0); 	// display aceso sem cursor
}

// enviar comando para o display
void send_command(char c, char rs)
{
 2ba:	cf 93       	push	r28
 2bc:	c8 2f       	mov	r28, r24
	if(rs == 0)                // RS = 1, configura display; RS = 0, escreve no display
 2be:	61 11       	cpse	r22, r1
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <send_command+0x10>
		PORTB &= ~(1 << 0);
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	8e 7f       	andi	r24, 0xFE	; 254
 2c6:	85 b9       	out	0x05, r24	; 5
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <send_command+0x16>
	else
		PORTB |= (1 << 0);
 2ca:	85 b1       	in	r24, 0x05	; 5
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	85 b9       	out	0x05, r24	; 5

	PORTB &= 0x0F;            // AND com 0000 1111 -> limpa os bits (P1_4 P1_5 P1_6 P1_7)
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	85 b9       	out	0x05, r24	; 5
	PORTB |= (c&0xF0);        // passa os 4 bits mais significativos de C para P1 -> cccc cccc & 1111 0000 = cccc 0000
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	9c 2f       	mov	r25, r28
 2da:	90 7f       	andi	r25, 0xF0	; 240
 2dc:	89 2b       	or	r24, r25
 2de:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1);
 2e0:	85 b1       	in	r24, 0x05	; 5
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 2e6:	85 b1       	in	r24, 0x05	; 5
 2e8:	8d 7f       	andi	r24, 0xFD	; 253
 2ea:	85 b9       	out	0x05, r24	; 5

	delay_lcd(); // delay de 40us
 2ec:	0e 94 28 06 	call	0xc50	; 0xc50 <delay_lcd>

	c = c<<4;
	PORTB &= 0x0F;
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	8f 70       	andi	r24, 0x0F	; 15
 2f4:	85 b9       	out	0x05, r24	; 5
	PORTB |= (c&0xF0);
 2f6:	85 b1       	in	r24, 0x05	; 5
 2f8:	c2 95       	swap	r28
 2fa:	c0 7f       	andi	r28, 0xF0	; 240
 2fc:	c8 2b       	or	r28, r24
 2fe:	c5 b9       	out	0x05, r28	; 5
	PORTB |= (1 << 1);
 300:	85 b1       	in	r24, 0x05	; 5
 302:	82 60       	ori	r24, 0x02	; 2
 304:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 306:	85 b1       	in	r24, 0x05	; 5
 308:	8d 7f       	andi	r24, 0xFD	; 253
 30a:	85 b9       	out	0x05, r24	; 5

	delay_lcd();            // delay de 40us
 30c:	0e 94 28 06 	call	0xc50	; 0xc50 <delay_lcd>
}
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <LCD_init>:
#define E (PINB & (1 << PINB1))

// inicializa o display LCD
void LCD_init()
{
	PORTB &= ~(1 << 0);
 314:	85 b1       	in	r24, 0x05	; 5
 316:	8e 7f       	andi	r24, 0xFE	; 254
 318:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0x0F;
 31a:	85 b1       	in	r24, 0x05	; 5
 31c:	8f 70       	andi	r24, 0x0F	; 15
 31e:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x20;
 320:	85 b1       	in	r24, 0x05	; 5
 322:	80 62       	ori	r24, 0x20	; 32
 324:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1);
 326:	85 b1       	in	r24, 0x05	; 5
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 32c:	85 b1       	in	r24, 0x05	; 5
 32e:	8d 7f       	andi	r24, 0xFD	; 253
 330:	85 b9       	out	0x05, r24	; 5
	delay_lcd();
 332:	0e 94 28 06 	call	0xc50	; 0xc50 <delay_lcd>
	
	send_command(0x28, 0); 	// função de utilização
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	88 e2       	ldi	r24, 0x28	; 40
 33a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <send_command>
	send_command(0x06, 0); 	// modo de operação: escreve deslocando o cursor para a direita
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	0e 94 5d 01 	call	0x2ba	; 0x2ba <send_command>
	send_command(0xC, 0); 	// display aceso sem cursor
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <send_command>
 34e:	08 95       	ret

00000350 <sendString>:

	delay_lcd();            // delay de 40us
}

void sendString(char* str)
{
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	8c 01       	movw	r16, r24
	unsigned char index = 0;
 358:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[index] != 0)
 35a:	04 c0       	rjmp	.+8      	; 0x364 <sendString+0x14>
	{
		send_command(str[index], 1);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <send_command>
		index++;
 362:	cf 5f       	subi	r28, 0xFF	; 255

void sendString(char* str)
{
	unsigned char index = 0;
	
	while(str[index] != 0)
 364:	f8 01       	movw	r30, r16
 366:	ec 0f       	add	r30, r28
 368:	f1 1d       	adc	r31, r1
 36a:	80 81       	ld	r24, Z
 36c:	81 11       	cpse	r24, r1
 36e:	f6 cf       	rjmp	.-20     	; 0x35c <sendString+0xc>
	{
		send_command(str[index], 1);
		index++;
	}
}
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	08 95       	ret

00000378 <sendChar>:

void sendChar(char c)
{
	send_command(c, 1);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <send_command>
 37e:	08 95       	ret

00000380 <LCD_clear>:
}

// limpa o display e retorna o cursor para o início
void LCD_clear()
{
	send_command(0x01, 0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 5d 01 	call	0x2ba	; 0x2ba <send_command>
	delay_clear();
 388:	0e 94 31 06 	call	0xc62	; 0xc62 <delay_clear>
 38c:	08 95       	ret

0000038e <LCD_print2lines>:
{
	send_command(c, 1);
}

void LCD_print2lines(char *line1, char *line2)
{
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	8c 01       	movw	r16, r24
 398:	eb 01       	movw	r28, r22
	LCD_clear();
 39a:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
	sendString(line1);
 39e:	c8 01       	movw	r24, r16
 3a0:	0e 94 a8 01 	call	0x350	; 0x350 <sendString>
	send_command(0xC0,0);
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	80 ec       	ldi	r24, 0xC0	; 192
 3a8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <send_command>
	sendString(line2);
 3ac:	ce 01       	movw	r24, r28
 3ae:	0e 94 a8 01 	call	0x350	; 0x350 <sendString>
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <main>:
#include "header.h"

int main(void)
{
	MICPAY_init();
 3bc:	0e 94 5e 00 	call	0xbc	; 0xbc <MICPAY_init>
	LCD_init();
 3c0:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_init>
	VAR_init();
 3c4:	0e 94 81 00 	call	0x102	; 0x102 <VAR_init>
	
	STATE=0;
 3c8:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <STATE+0x1>
 3cc:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <STATE>
	
	/* Replace with your application code */
    while (1) 
    {
        switch(STATE)
 3d0:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <STATE>
 3d4:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <STATE+0x1>
 3d8:	eb 30       	cpi	r30, 0x0B	; 11
 3da:	f1 05       	cpc	r31, r1
 3dc:	c8 f7       	brcc	.-14     	; 0x3d0 <main+0x14>
 3de:	ec 5c       	subi	r30, 0xCC	; 204
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__tablejump2__>
        {
	        case 0: //espera a máquina ser ligada
				LCD_clear();
 3e6:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
				sendString("OFF");
 3ea:	8c e0       	ldi	r24, 0x0C	; 12
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 a8 01 	call	0x350	; 0x350 <sendString>
				if(keyboard_input() == '#')
 3f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
 3f6:	83 32       	cpi	r24, 0x23	; 35
 3f8:	59 f7       	brne	.-42     	; 0x3d0 <main+0x14>
				{
					STATE = maquina_on_off(1);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 5f 02 	call	0x4be	; 0x4be <maquina_on_off>
 400:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <STATE+0x1>
 404:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <STATE>
 408:	e3 cf       	rjmp	.-58     	; 0x3d0 <main+0x14>
				}
			break;
			
	        case 1: //espera pela senha de usuário
				STATE = read_user_password();
 40a:	0e 94 ab 02 	call	0x556	; 0x556 <read_user_password>
 40e:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <STATE+0x1>
 412:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <STATE>
	        break;
 416:	dc cf       	rjmp	.-72     	; 0x3d0 <main+0x14>
			
	        case 2: //tela para selecionar a função operador
				LCD_print2lines("1-A Vista 2-A","Prazo 3-Estorno");
 418:	60 e1       	ldi	r22, 0x10	; 16
 41a:	71 e0       	ldi	r23, 0x01	; 1
 41c:	80 e2       	ldi	r24, 0x20	; 32
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
				STATE = select_mode();
 424:	0e 94 ee 02 	call	0x5dc	; 0x5dc <select_mode>
 428:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <STATE+0x1>
 42c:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <STATE>
	        break;
 430:	cf cf       	rjmp	.-98     	; 0x3d0 <main+0x14>
			
	        case 3: //tela de admin
				LCD_clear();
 432:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
				LCD_print2lines("Modo", "Admiministrador");
 436:	6e e2       	ldi	r22, 0x2E	; 46
 438:	71 e0       	ldi	r23, 0x01	; 1
 43a:	8e e3       	ldi	r24, 0x3E	; 62
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
				TIFR1 = (1 << 0);
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	86 bb       	out	0x16, r24	; 22
				delay_3s();
 446:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
				LCD_print2lines("1-En_OP 2-Hora","3-Pend. 4-D.Pend");
 44a:	63 e4       	ldi	r22, 0x43	; 67
 44c:	71 e0       	ldi	r23, 0x01	; 1
 44e:	84 e5       	ldi	r24, 0x54	; 84
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
 456:	ff cf       	rjmp	.-2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				//STATE = read_mode_adm();
				while(1);
	        break;
			
	        case 4: //modo pagamento a vista
				read_price();
 458:	0e 94 3d 03 	call	0x67a	; 0x67a <read_price>
				STATE = 10;
 45c:	8a e0       	ldi	r24, 0x0A	; 10
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <STATE+0x1>
 464:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <STATE>
	        break;
 468:	b3 cf       	rjmp	.-154    	; 0x3d0 <main+0x14>
			
	        case 5: //modo pagamento parcelado
				read_price();
 46a:	0e 94 3d 03 	call	0x67a	; 0x67a <read_price>
				STATE = 9;
 46e:	89 e0       	ldi	r24, 0x09	; 9
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <STATE+0x1>
 476:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <STATE>
	        break;
 47a:	aa cf       	rjmp	.-172    	; 0x3d0 <main+0x14>
			
	        case 6: //modo estorno
				read_price();
 47c:	0e 94 3d 03 	call	0x67a	; 0x67a <read_price>
				LCD_clear();
 480:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
				LCD_print2lines("Operador,", "por seguranca");
 484:	63 e6       	ldi	r22, 0x63	; 99
 486:	71 e0       	ldi	r23, 0x01	; 1
 488:	81 e7       	ldi	r24, 0x71	; 113
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
				TIFR1 = (1 << 0);
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	86 bb       	out	0x16, r24	; 22
				delay_3s();
 494:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
				STATE = read_user_password();
 498:	0e 94 ab 02 	call	0x556	; 0x556 <read_user_password>
 49c:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <STATE+0x1>
 4a0:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <STATE>
	        break;
 4a4:	95 cf       	rjmp	.-214    	; 0x3d0 <main+0x14>
			
			case 7: //entrada numero cartao
				insere_cartao();
 4a6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <insere_cartao>
			break;
 4aa:	92 cf       	rjmp	.-220    	; 0x3d0 <main+0x14>
			
			case 8: //entrada senha cartao
				senha_cartao();
 4ac:	0e 94 0a 05 	call	0xa14	; 0xa14 <senha_cartao>
			break;
 4b0:	8f cf       	rjmp	.-226    	; 0x3d0 <main+0x14>
			
			case 9: //numero de parcelas
				numero_parcelas();
 4b2:	0e 94 9b 04 	call	0x936	; 0x936 <numero_parcelas>
			break;
 4b6:	8c cf       	rjmp	.-232    	; 0x3d0 <main+0x14>
			
			case 10: //débito ou credito
				debit_or_credit();
 4b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <debit_or_credit>
			break;
 4bc:	89 cf       	rjmp	.-238    	; 0x3d0 <main+0x14>

000004be <maquina_on_off>:
#include "header.h"

int maquina_on_off(char mode)
{
	if(mode == 0) //Para desligar a maquina
 4be:	81 11       	cpse	r24, r1
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <maquina_on_off+0xa>
	{
		return press_cancel();
 4c2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <press_cancel>
 4c6:	08 95       	ret
	}
	if(mode == 1) //Para ligar a maquina
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	19 f4       	brne	.+6      	; 0x4d2 <maquina_on_off+0x14>
	{
		return press_confirm();
 4cc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <press_confirm>
 4d0:	08 95       	ret
	}
	return 0;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
}
 4d6:	08 95       	ret

000004d8 <read_pass>:
}

//função que faz a leitura da senha
//recebe como parametro o número de caracteres que tem a senha
void read_pass(int n)
{
 4d8:	ef 92       	push	r14
 4da:	ff 92       	push	r15
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	8c 01       	movw	r16, r24
	int i=0;
	char c;
	
	if(STATE)
 4e4:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <STATE>
 4e8:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <STATE+0x1>
 4ec:	89 2b       	or	r24, r25
 4ee:	31 f0       	breq	.+12     	; 0x4fc <read_pass+0x24>
	LCD_print2lines("Digite a senha","Senha:");
 4f0:	6b e7       	ldi	r22, 0x7B	; 123
 4f2:	71 e0       	ldi	r23, 0x01	; 1
 4f4:	82 e8       	ldi	r24, 0x82	; 130
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
}

//função que faz a leitura da senha
//recebe como parametro o número de caracteres que tem a senha
void read_pass(int n)
{
 4fc:	e1 2c       	mov	r14, r1
 4fe:	f1 2c       	mov	r15, r1
 500:	21 c0       	rjmp	.+66     	; 0x544 <read_pass+0x6c>
	
	if(STATE)
	LCD_print2lines("Digite a senha","Senha:");
	while(i<n)
	{
		c = keyboard_input();
 502:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
 506:	c8 2f       	mov	r28, r24
		if(c != '*' && c != '#')
 508:	8a 32       	cpi	r24, 0x2A	; 42
 50a:	e1 f0       	breq	.+56     	; 0x544 <read_pass+0x6c>
 50c:	83 32       	cpi	r24, 0x23	; 35
 50e:	d1 f0       	breq	.+52     	; 0x544 <read_pass+0x6c>
		{
			if (n == 4)
 510:	04 30       	cpi	r16, 0x04	; 4
 512:	11 05       	cpc	r17, r1
 514:	51 f4       	brne	.+20     	; 0x52a <read_pass+0x52>
			{
				USER_PASSWORD[i] = c;
 516:	f7 01       	movw	r30, r14
 518:	ee 56       	subi	r30, 0x6E	; 110
 51a:	fd 4f       	sbci	r31, 0xFD	; 253
 51c:	80 83       	st	Z, r24
				sendChar('*');
 51e:	8a e2       	ldi	r24, 0x2A	; 42
 520:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
				i++;
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	e8 1a       	sub	r14, r24
 528:	f8 0a       	sbc	r15, r24
			}
			if (n == 6)
 52a:	06 30       	cpi	r16, 0x06	; 6
 52c:	11 05       	cpc	r17, r1
 52e:	51 f4       	brne	.+20     	; 0x544 <read_pass+0x6c>
			{
				CARD_PASSWORD[i] = c;
 530:	f7 01       	movw	r30, r14
 532:	e9 55       	subi	r30, 0x59	; 89
 534:	fd 4f       	sbci	r31, 0xFD	; 253
 536:	c0 83       	st	Z, r28
				sendChar('*');
 538:	8a e2       	ldi	r24, 0x2A	; 42
 53a:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
				i++;
 53e:	8f ef       	ldi	r24, 0xFF	; 255
 540:	e8 1a       	sub	r14, r24
 542:	f8 0a       	sbc	r15, r24
	int i=0;
	char c;
	
	if(STATE)
	LCD_print2lines("Digite a senha","Senha:");
	while(i<n)
 544:	e0 16       	cp	r14, r16
 546:	f1 06       	cpc	r15, r17
 548:	e4 f2       	brlt	.-72     	; 0x502 <read_pass+0x2a>
				sendChar('*');
				i++;
			}	
		}
	}
}
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	08 95       	ret

00000556 <read_user_password>:
int read_user_password()
{
	int flag=0;
	char c;
	
	read_pass(4);
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <read_pass>
	
	while(!flag)
 55e:	36 c0       	rjmp	.+108    	; 0x5cc <read_user_password+0x76>
	{
		c = keyboard_input();
		if(c == '#')
		{
			if(!strcmp(USER_PASSWORD,"1234"))
 560:	61 e9       	ldi	r22, 0x91	; 145
 562:	71 e0       	ldi	r23, 0x01	; 1
 564:	82 e9       	ldi	r24, 0x92	; 146
 566:	92 e0       	ldi	r25, 0x02	; 2
 568:	0e 94 ad 07 	call	0xf5a	; 0xf5a <strcmp>
 56c:	89 2b       	or	r24, r25
 56e:	49 f4       	brne	.+18     	; 0x582 <read_user_password+0x2c>
			{
				OP = 1; 
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <OP+0x1>
 578:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <OP>
				flag = 1;
				return 2;
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	08 95       	ret
			}
			else if(!strcmp(USER_PASSWORD,"2345"))
 582:	66 e9       	ldi	r22, 0x96	; 150
 584:	71 e0       	ldi	r23, 0x01	; 1
 586:	82 e9       	ldi	r24, 0x92	; 146
 588:	92 e0       	ldi	r25, 0x02	; 2
 58a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <strcmp>
 58e:	89 2b       	or	r24, r25
 590:	39 f4       	brne	.+14     	; 0x5a0 <read_user_password+0x4a>
			{
				OP = 2;
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <OP+0x1>
 59a:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <OP>
				flag = 1;
				return 2;
 59e:	08 95       	ret
			}
			else if(!strcmp(USER_PASSWORD,"0123"))
 5a0:	6b e9       	ldi	r22, 0x9B	; 155
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	82 e9       	ldi	r24, 0x92	; 146
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <strcmp>
 5ac:	89 2b       	or	r24, r25
 5ae:	99 f0       	breq	.+38     	; 0x5d6 <read_user_password+0x80>
				flag = 1;
				return 3;
			} 
			else
			{
				LCD_clear();
 5b0:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
				sendString("SENHA INVALIDA");
 5b4:	80 ea       	ldi	r24, 0xA0	; 160
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 a8 01 	call	0x350	; 0x350 <sendString>
				TIFR1 = (1 << 0);
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	86 bb       	out	0x16, r24	; 22
				delay_3s();
 5c0:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
				read_pass(4);
 5c4:	84 e0       	ldi	r24, 0x04	; 4
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <read_pass>
	
	read_pass(4);
	
	while(!flag)
	{
		c = keyboard_input();
 5cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
		if(c == '#')
 5d0:	83 32       	cpi	r24, 0x23	; 35
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <read_user_password+0x76>
 5d4:	c5 cf       	rjmp	.-118    	; 0x560 <read_user_password+0xa>
				return 2;
			}
			else if(!strcmp(USER_PASSWORD,"0123"))
			{
				flag = 1;
				return 3;
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	
	return 0;
}
 5da:	08 95       	ret

000005dc <select_mode>:
		}
	}
}

int select_mode()
{
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
	char c;
	int flag=0, mode=0;
 5e6:	e1 2c       	mov	r14, r1
 5e8:	f1 2c       	mov	r15, r1
 5ea:	00 e0       	ldi	r16, 0x00	; 0
 5ec:	10 e0       	ldi	r17, 0x00	; 0
	
	while(!flag)
 5ee:	3b c0       	rjmp	.+118    	; 0x666 <select_mode+0x8a>
	{
		c = keyboard_input();
 5f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
 5f4:	c8 2f       	mov	r28, r24
		if(c == '1')
 5f6:	81 33       	cpi	r24, 0x31	; 49
 5f8:	81 f4       	brne	.+32     	; 0x61a <select_mode+0x3e>
		{
			LCD_print2lines("Selcionado:","A vista");
 5fa:	6f ea       	ldi	r22, 0xAF	; 175
 5fc:	71 e0       	ldi	r23, 0x01	; 1
 5fe:	87 eb       	ldi	r24, 0xB7	; 183
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
			TIFR1 = (1 << 0);
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	86 bb       	out	0x16, r24	; 22
			delay_3s();
 60a:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
			flag=1;
			mode = 4;
 60e:	68 94       	set
 610:	ee 24       	eor	r14, r14
 612:	e2 f8       	bld	r14, 2
 614:	f1 2c       	mov	r15, r1
		if(c == '1')
		{
			LCD_print2lines("Selcionado:","A vista");
			TIFR1 = (1 << 0);
			delay_3s();
			flag=1;
 616:	01 e0       	ldi	r16, 0x01	; 1
 618:	10 e0       	ldi	r17, 0x00	; 0
			mode = 4;
		}
		if(c == '2')
 61a:	c2 33       	cpi	r28, 0x32	; 50
 61c:	89 f4       	brne	.+34     	; 0x640 <select_mode+0x64>
		{
			LCD_print2lines("Selcionado:","A prazo");
 61e:	63 ec       	ldi	r22, 0xC3	; 195
 620:	71 e0       	ldi	r23, 0x01	; 1
 622:	87 eb       	ldi	r24, 0xB7	; 183
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
			TIFR1 = (1 << 0);
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	86 bb       	out	0x16, r24	; 22
			delay_3s();			
 62e:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
			flag=1;
			mode = 5;
 632:	0f 2e       	mov	r0, r31
 634:	f5 e0       	ldi	r31, 0x05	; 5
 636:	ef 2e       	mov	r14, r31
 638:	f1 2c       	mov	r15, r1
 63a:	f0 2d       	mov	r31, r0
		if(c == '2')
		{
			LCD_print2lines("Selcionado:","A prazo");
			TIFR1 = (1 << 0);
			delay_3s();			
			flag=1;
 63c:	01 e0       	ldi	r16, 0x01	; 1
 63e:	10 e0       	ldi	r17, 0x00	; 0
			mode = 5;
		}
		if(c == '3')
 640:	c3 33       	cpi	r28, 0x33	; 51
 642:	89 f4       	brne	.+34     	; 0x666 <select_mode+0x8a>
		{
			LCD_print2lines("Selcionado:","Estorno");
 644:	68 e1       	ldi	r22, 0x18	; 24
 646:	71 e0       	ldi	r23, 0x01	; 1
 648:	87 eb       	ldi	r24, 0xB7	; 183
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
			TIFR1 = (1 << 0);
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	86 bb       	out	0x16, r24	; 22
			delay_3s();
 654:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
			flag=1;
 658:	01 e0       	ldi	r16, 0x01	; 1
 65a:	10 e0       	ldi	r17, 0x00	; 0
			mode = 6;
 65c:	0f 2e       	mov	r0, r31
 65e:	f6 e0       	ldi	r31, 0x06	; 6
 660:	ef 2e       	mov	r14, r31
 662:	f1 2c       	mov	r15, r1
 664:	f0 2d       	mov	r31, r0
int select_mode()
{
	char c;
	int flag=0, mode=0;
	
	while(!flag)
 666:	01 15       	cp	r16, r1
 668:	11 05       	cpc	r17, r1
 66a:	11 f2       	breq	.-124    	; 0x5f0 <select_mode+0x14>
			flag=1;
			mode = 6;
		}
	}
	return mode;
}
 66c:	c7 01       	movw	r24, r14
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	08 95       	ret

0000067a <read_price>:

void read_price() // VALOR MAXIMO R$99,99
{
 67a:	0f 93       	push	r16
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	2f 97       	sbiw	r28, 0x0f	; 15
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	f8 94       	cli
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	0f be       	out	0x3f, r0	; 63
 690:	cd bf       	out	0x3d, r28	; 61
	char valor[5] = {0,0,0,0,0};
 692:	fe 01       	movw	r30, r28
 694:	31 96       	adiw	r30, 0x01	; 1
 696:	85 e0       	ldi	r24, 0x05	; 5
 698:	df 01       	movw	r26, r30
 69a:	1d 92       	st	X+, r1
 69c:	8a 95       	dec	r24
 69e:	e9 f7       	brne	.-6      	; 0x69a <read_price+0x20>
	int valor_int[5] = {0,0,0,0,0}, i=0;
 6a0:	35 96       	adiw	r30, 0x05	; 5
 6a2:	8a e0       	ldi	r24, 0x0A	; 10
 6a4:	df 01       	movw	r26, r30
 6a6:	1d 92       	st	X+, r1
 6a8:	8a 95       	dec	r24
 6aa:	e9 f7       	brne	.-6      	; 0x6a6 <read_price+0x2c>
	
	LCD_clear();
 6ac:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
	LCD_print2lines("Digite o valor","R$         , ");
 6b0:	6b ec       	ldi	r22, 0xCB	; 203
 6b2:	71 e0       	ldi	r23, 0x01	; 1
 6b4:	89 ed       	ldi	r24, 0xD9	; 217
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
}

void read_price() // VALOR MAXIMO R$99,99
{
	char valor[5] = {0,0,0,0,0};
	int valor_int[5] = {0,0,0,0,0}, i=0;
 6bc:	00 e0       	ldi	r16, 0x00	; 0
 6be:	10 e0       	ldi	r17, 0x00	; 0
	
	LCD_clear();
	LCD_print2lines("Digite o valor","R$         , ");
	
	while(keyboard_input() != '#')
 6c0:	8d c0       	rjmp	.+282    	; 0x7dc <read_price+0x162>
	{	
		valor[i] = keyboard_input();
 6c2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
 6c6:	e1 e0       	ldi	r30, 0x01	; 1
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	ec 0f       	add	r30, r28
 6cc:	fd 1f       	adc	r31, r29
 6ce:	e0 0f       	add	r30, r16
 6d0:	f1 1f       	adc	r31, r17
 6d2:	80 83       	st	Z, r24
		if (keyboard_input() != '#')
 6d4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
 6d8:	83 32       	cpi	r24, 0x23	; 35
 6da:	09 f4       	brne	.+2      	; 0x6de <read_price+0x64>
 6dc:	7f c0       	rjmp	.+254    	; 0x7dc <read_price+0x162>
		{
			switch(i)
 6de:	02 30       	cpi	r16, 0x02	; 2
 6e0:	11 05       	cpc	r17, r1
 6e2:	79 f1       	breq	.+94     	; 0x742 <read_price+0xc8>
 6e4:	3c f4       	brge	.+14     	; 0x6f4 <read_price+0x7a>
 6e6:	01 15       	cp	r16, r1
 6e8:	11 05       	cpc	r17, r1
 6ea:	61 f0       	breq	.+24     	; 0x704 <read_price+0x8a>
 6ec:	01 30       	cpi	r16, 0x01	; 1
 6ee:	11 05       	cpc	r17, r1
 6f0:	b9 f0       	breq	.+46     	; 0x720 <read_price+0xa6>
 6f2:	74 c0       	rjmp	.+232    	; 0x7dc <read_price+0x162>
 6f4:	03 30       	cpi	r16, 0x03	; 3
 6f6:	11 05       	cpc	r17, r1
 6f8:	d9 f1       	breq	.+118    	; 0x770 <read_price+0xf6>
 6fa:	04 30       	cpi	r16, 0x04	; 4
 6fc:	11 05       	cpc	r17, r1
 6fe:	09 f4       	brne	.+2      	; 0x702 <read_price+0x88>
 700:	51 c0       	rjmp	.+162    	; 0x7a4 <read_price+0x12a>
 702:	6c c0       	rjmp	.+216    	; 0x7dc <read_price+0x162>
			{
				case 0: //apenas 1 número digitado
					LCD_clear();
 704:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
					LCD_print2lines("Digite o valor","R$         , ");		
 708:	6b ec       	ldi	r22, 0xCB	; 203
 70a:	71 e0       	ldi	r23, 0x01	; 1
 70c:	89 ed       	ldi	r24, 0xD9	; 217
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
					sendChar(valor[0]);
 714:	89 81       	ldd	r24, Y+1	; 0x01
 716:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					i++;
 71a:	0f 5f       	subi	r16, 0xFF	; 255
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
 71e:	5e c0       	rjmp	.+188    	; 0x7dc <read_price+0x162>
			
				case 1: //2 números digitados
					LCD_clear();		
 720:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
					LCD_print2lines("Digite o valor","R$         ,");	
 724:	68 ee       	ldi	r22, 0xE8	; 232
 726:	71 e0       	ldi	r23, 0x01	; 1
 728:	89 ed       	ldi	r24, 0xD9	; 217
 72a:	91 e0       	ldi	r25, 0x01	; 1
 72c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
					sendChar(valor[0]);
 730:	89 81       	ldd	r24, Y+1	; 0x01
 732:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[1]);
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					i++;				
 73c:	0f 5f       	subi	r16, 0xFF	; 255
 73e:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
 740:	4d c0       	rjmp	.+154    	; 0x7dc <read_price+0x162>
			
				case 2: //3 números digitados
					LCD_clear();		
 742:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
					LCD_print2lines("Digite o valor","R$        ");
 746:	65 ef       	ldi	r22, 0xF5	; 245
 748:	71 e0       	ldi	r23, 0x01	; 1
 74a:	89 ed       	ldi	r24, 0xD9	; 217
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
					sendChar(valor[0]);
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(',');				
 758:	8c e2       	ldi	r24, 0x2C	; 44
 75a:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[1]);
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[2]);	
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					i++;							
 76a:	0f 5f       	subi	r16, 0xFF	; 255
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
 76e:	36 c0       	rjmp	.+108    	; 0x7dc <read_price+0x162>
			
				case 3: //4 números digitados
					LCD_clear();
 770:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
					LCD_print2lines("Digite o valor","R$       ");
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	72 e0       	ldi	r23, 0x02	; 2
 778:	89 ed       	ldi	r24, 0xD9	; 217
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
					sendChar(valor[0]);
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[1]);
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(',');
 78c:	8c e2       	ldi	r24, 0x2C	; 44
 78e:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[2]);
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[3]);		
 798:	8c 81       	ldd	r24, Y+4	; 0x04
 79a:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					i++;						
 79e:	0f 5f       	subi	r16, 0xFF	; 255
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
 7a2:	1c c0       	rjmp	.+56     	; 0x7dc <read_price+0x162>
			
				case 4: //5 números digitados
					LCD_clear();
 7a4:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
					LCD_print2lines("Digite o valor","R$      ");
 7a8:	6a e0       	ldi	r22, 0x0A	; 10
 7aa:	72 e0       	ldi	r23, 0x02	; 2
 7ac:	89 ed       	ldi	r24, 0xD9	; 217
 7ae:	91 e0       	ldi	r25, 0x01	; 1
 7b0:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
					sendChar(valor[0]);
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
 7b6:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[1]);
 7ba:	8a 81       	ldd	r24, Y+2	; 0x02
 7bc:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[2]);
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(',');
 7c6:	8c e2       	ldi	r24, 0x2C	; 44
 7c8:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[3]);
 7cc:	8c 81       	ldd	r24, Y+4	; 0x04
 7ce:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					sendChar(valor[4]);	
 7d2:	8d 81       	ldd	r24, Y+5	; 0x05
 7d4:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
					i++;							
 7d8:	0f 5f       	subi	r16, 0xFF	; 255
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
	int valor_int[5] = {0,0,0,0,0}, i=0;
	
	LCD_clear();
	LCD_print2lines("Digite o valor","R$         , ");
	
	while(keyboard_input() != '#')
 7dc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
 7e0:	83 32       	cpi	r24, 0x23	; 35
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <read_price+0x16c>
 7e4:	6e cf       	rjmp	.-292    	; 0x6c2 <read_price+0x48>
 7e6:	20 e0       	ldi	r18, 0x00	; 0
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	16 c0       	rjmp	.+44     	; 0x818 <__DATA_REGION_LENGTH__+0x18>

	//Transforma os valores de char para float, para que seja possível
	//realizar operações matemáticas posteriormente
	for(i = 0; i<5 ; i++)
	{
		valor_int[i] = valor[i] - '0';
 7ec:	e1 e0       	ldi	r30, 0x01	; 1
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	ec 0f       	add	r30, r28
 7f2:	fd 1f       	adc	r31, r29
 7f4:	e2 0f       	add	r30, r18
 7f6:	f3 1f       	adc	r31, r19
 7f8:	80 81       	ld	r24, Z
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	c0 97       	sbiw	r24, 0x30	; 48
 7fe:	f9 01       	movw	r30, r18
 800:	ee 0f       	add	r30, r30
 802:	ff 1f       	adc	r31, r31
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	50 e0       	ldi	r21, 0x00	; 0
 808:	4c 0f       	add	r20, r28
 80a:	5d 1f       	adc	r21, r29
 80c:	e4 0f       	add	r30, r20
 80e:	f5 1f       	adc	r31, r21
 810:	96 83       	std	Z+6, r25	; 0x06
 812:	85 83       	std	Z+5, r24	; 0x05
		}	
	}

	//Transforma os valores de char para float, para que seja possível
	//realizar operações matemáticas posteriormente
	for(i = 0; i<5 ; i++)
 814:	2f 5f       	subi	r18, 0xFF	; 255
 816:	3f 4f       	sbci	r19, 0xFF	; 255
 818:	25 30       	cpi	r18, 0x05	; 5
 81a:	31 05       	cpc	r19, r1
 81c:	3c f3       	brlt	.-50     	; 0x7ec <read_price+0x172>
	{
		valor_int[i] = valor[i] - '0';
	}
	VALOR_OPERACAO = valor_int[4]*100 + valor_int[3]*10 + valor_int[2] + valor_int[1]/10 + valor_int[0]/100;	
 81e:	8e 85       	ldd	r24, Y+14	; 0x0e
 820:	9f 85       	ldd	r25, Y+15	; 0x0f
 822:	24 e6       	ldi	r18, 0x64	; 100
 824:	28 9f       	mul	r18, r24
 826:	b0 01       	movw	r22, r0
 828:	29 9f       	mul	r18, r25
 82a:	70 0d       	add	r23, r0
 82c:	11 24       	eor	r1, r1
 82e:	8c 85       	ldd	r24, Y+12	; 0x0c
 830:	9d 85       	ldd	r25, Y+13	; 0x0d
 832:	ac 01       	movw	r20, r24
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	9c 01       	movw	r18, r24
 83a:	22 0f       	add	r18, r18
 83c:	33 1f       	adc	r19, r19
 83e:	22 0f       	add	r18, r18
 840:	33 1f       	adc	r19, r19
 842:	22 0f       	add	r18, r18
 844:	33 1f       	adc	r19, r19
 846:	ca 01       	movw	r24, r20
 848:	82 0f       	add	r24, r18
 84a:	93 1f       	adc	r25, r19
 84c:	86 0f       	add	r24, r22
 84e:	97 1f       	adc	r25, r23
 850:	2a 85       	ldd	r18, Y+10	; 0x0a
 852:	3b 85       	ldd	r19, Y+11	; 0x0b
 854:	28 0f       	add	r18, r24
 856:	39 1f       	adc	r19, r25
 858:	88 85       	ldd	r24, Y+8	; 0x08
 85a:	99 85       	ldd	r25, Y+9	; 0x09
 85c:	6a e0       	ldi	r22, 0x0A	; 10
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	0e 94 7f 07 	call	0xefe	; 0xefe <__divmodhi4>
 864:	26 0f       	add	r18, r22
 866:	37 1f       	adc	r19, r23
 868:	8e 81       	ldd	r24, Y+6	; 0x06
 86a:	9f 81       	ldd	r25, Y+7	; 0x07
 86c:	64 e6       	ldi	r22, 0x64	; 100
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	0e 94 7f 07 	call	0xefe	; 0xefe <__divmodhi4>
 874:	62 0f       	add	r22, r18
 876:	73 1f       	adc	r23, r19
 878:	07 2e       	mov	r0, r23
 87a:	00 0c       	add	r0, r0
 87c:	88 0b       	sbc	r24, r24
 87e:	99 0b       	sbc	r25, r25
 880:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
 884:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <VALOR_OPERACAO>
 888:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <VALOR_OPERACAO+0x1>
 88c:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <VALOR_OPERACAO+0x2>
 890:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <VALOR_OPERACAO+0x3>
}
 894:	2f 96       	adiw	r28, 0x0f	; 15
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	08 95       	ret

000008aa <debit_or_credit>:

void debit_or_credit ()
{
 8aa:	0f 93       	push	r16
 8ac:	1f 93       	push	r17
 8ae:	cf 93       	push	r28
	char c;
	int flag = 0;
	
	LCD_clear();
 8b0:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
	LCD_print2lines("1 - Debito", "2 - Credito");
 8b4:	63 e1       	ldi	r22, 0x13	; 19
 8b6:	72 e0       	ldi	r23, 0x02	; 2
 8b8:	8f e1       	ldi	r24, 0x1F	; 31
 8ba:	92 e0       	ldi	r25, 0x02	; 2
 8bc:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
}

void debit_or_credit ()
{
	char c;
	int flag = 0;
 8c0:	00 e0       	ldi	r16, 0x00	; 0
 8c2:	10 e0       	ldi	r17, 0x00	; 0
	
	LCD_clear();
	LCD_print2lines("1 - Debito", "2 - Credito");
	
	while(!flag)
 8c4:	31 c0       	rjmp	.+98     	; 0x928 <__stack+0x29>
	{
		c = keyboard_input();
 8c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
 8ca:	c8 2f       	mov	r28, r24
		if(c == '1')
 8cc:	81 33       	cpi	r24, 0x31	; 49
 8ce:	91 f4       	brne	.+36     	; 0x8f4 <debit_or_credit+0x4a>
		{
			flag = 1;
			OP_PAGAMENTO = 1;
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <OP_PAGAMENTO+0x1>
 8d8:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <OP_PAGAMENTO>
			LCD_print2lines("Selecionado:", "Debito");
 8dc:	63 e2       	ldi	r22, 0x23	; 35
 8de:	72 e0       	ldi	r23, 0x02	; 2
 8e0:	8a e2       	ldi	r24, 0x2A	; 42
 8e2:	92 e0       	ldi	r25, 0x02	; 2
 8e4:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
			TIFR1 = (1 << 0);
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	86 bb       	out	0x16, r24	; 22
			delay_3s();
 8ec:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
	while(!flag)
	{
		c = keyboard_input();
		if(c == '1')
		{
			flag = 1;
 8f0:	01 e0       	ldi	r16, 0x01	; 1
 8f2:	10 e0       	ldi	r17, 0x00	; 0
			OP_PAGAMENTO = 1;
			LCD_print2lines("Selecionado:", "Debito");
			TIFR1 = (1 << 0);
			delay_3s();
		}
		if(c == '2')
 8f4:	c2 33       	cpi	r28, 0x32	; 50
 8f6:	91 f4       	brne	.+36     	; 0x91c <__stack+0x1d>
		{
			flag = 1;
			OP_PAGAMENTO = 2;
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <OP_PAGAMENTO+0x1>
 900:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <OP_PAGAMENTO>
			LCD_print2lines("Selecionado:", "Credito");
 904:	67 e1       	ldi	r22, 0x17	; 23
 906:	72 e0       	ldi	r23, 0x02	; 2
 908:	8a e2       	ldi	r24, 0x2A	; 42
 90a:	92 e0       	ldi	r25, 0x02	; 2
 90c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
			TIFR1 = (1 << 0);
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	86 bb       	out	0x16, r24	; 22
			delay_3s();
 914:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
			TIFR1 = (1 << 0);
			delay_3s();
		}
		if(c == '2')
		{
			flag = 1;
 918:	01 e0       	ldi	r16, 0x01	; 1
 91a:	10 e0       	ldi	r17, 0x00	; 0
			OP_PAGAMENTO = 2;
			LCD_print2lines("Selecionado:", "Credito");
			TIFR1 = (1 << 0);
			delay_3s();
		}
		STATE = 7;
 91c:	87 e0       	ldi	r24, 0x07	; 7
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <STATE+0x1>
 924:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <STATE>
	int flag = 0;
	
	LCD_clear();
	LCD_print2lines("1 - Debito", "2 - Credito");
	
	while(!flag)
 928:	01 15       	cp	r16, r1
 92a:	11 05       	cpc	r17, r1
 92c:	61 f2       	breq	.-104    	; 0x8c6 <debit_or_credit+0x1c>
			TIFR1 = (1 << 0);
			delay_3s();
		}
		STATE = 7;
	}
}
 92e:	cf 91       	pop	r28
 930:	1f 91       	pop	r17
 932:	0f 91       	pop	r16
 934:	08 95       	ret

00000936 <numero_parcelas>:

void numero_parcelas()
{
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
	char c;
	int flag = 0;
	
	LCD_clear();
 93c:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
	LCD_print2lines("Parcelas", "2 ou 3:");
 940:	67 e3       	ldi	r22, 0x37	; 55
 942:	72 e0       	ldi	r23, 0x02	; 2
 944:	8f e3       	ldi	r24, 0x3F	; 63
 946:	92 e0       	ldi	r25, 0x02	; 2
 948:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
}

void numero_parcelas()
{
	char c;
	int flag = 0;
 94c:	00 e0       	ldi	r16, 0x00	; 0
 94e:	10 e0       	ldi	r17, 0x00	; 0
	
	LCD_clear();
	LCD_print2lines("Parcelas", "2 ou 3:");
	
	while(!flag)
 950:	25 c0       	rjmp	.+74     	; 0x99c <numero_parcelas+0x66>
	{
		c = keyboard_input();
 952:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
 956:	c8 2f       	mov	r28, r24
		if(c == '2')
 958:	82 33       	cpi	r24, 0x32	; 50
 95a:	61 f4       	brne	.+24     	; 0x974 <numero_parcelas+0x3e>
		{
			LCD_print2lines("Selecionado:", "2 vezes");
 95c:	68 e4       	ldi	r22, 0x48	; 72
 95e:	72 e0       	ldi	r23, 0x02	; 2
 960:	8a e2       	ldi	r24, 0x2A	; 42
 962:	92 e0       	ldi	r25, 0x02	; 2
 964:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
			TIFR1 = (1 << 0);
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	86 bb       	out	0x16, r24	; 22
			delay_3s();
 96c:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
			flag = 1;
 970:	01 e0       	ldi	r16, 0x01	; 1
 972:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if(c == '3')
 974:	c3 33       	cpi	r28, 0x33	; 51
 976:	61 f4       	brne	.+24     	; 0x990 <numero_parcelas+0x5a>
		{
			LCD_print2lines("Selecionado:", "3 vezes");
 978:	60 e5       	ldi	r22, 0x50	; 80
 97a:	72 e0       	ldi	r23, 0x02	; 2
 97c:	8a e2       	ldi	r24, 0x2A	; 42
 97e:	92 e0       	ldi	r25, 0x02	; 2
 980:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
			TIFR1 = (1 << 0);
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	86 bb       	out	0x16, r24	; 22
			delay_3s();
 988:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
			flag = 1;
 98c:	01 e0       	ldi	r16, 0x01	; 1
 98e:	10 e0       	ldi	r17, 0x00	; 0
		}
		STATE = 7;
 990:	87 e0       	ldi	r24, 0x07	; 7
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <STATE+0x1>
 998:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <STATE>
	int flag = 0;
	
	LCD_clear();
	LCD_print2lines("Parcelas", "2 ou 3:");
	
	while(!flag)
 99c:	01 15       	cp	r16, r1
 99e:	11 05       	cpc	r17, r1
 9a0:	c1 f2       	breq	.-80     	; 0x952 <numero_parcelas+0x1c>
			delay_3s();
			flag = 1;
		}
		STATE = 7;
	}
}
 9a2:	cf 91       	pop	r28
 9a4:	1f 91       	pop	r17
 9a6:	0f 91       	pop	r16
 9a8:	08 95       	ret

000009aa <insere_cartao>:

void insere_cartao ()
{
 9aa:	cf 93       	push	r28
 9ac:	df 93       	push	r29
	int i=0, flag = 0;
	char c;
	
	LCD_print2lines("Insira/digite","cartao: ");
 9ae:	68 e5       	ldi	r22, 0x58	; 88
 9b0:	72 e0       	ldi	r23, 0x02	; 2
 9b2:	81 e6       	ldi	r24, 0x61	; 97
 9b4:	92 e0       	ldi	r25, 0x02	; 2
 9b6:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
	}
}

void insere_cartao ()
{
	int i=0, flag = 0;
 9ba:	c0 e0       	ldi	r28, 0x00	; 0
 9bc:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	
	LCD_print2lines("Insira/digite","cartao: ");
	while(i<6)
 9be:	0d c0       	rjmp	.+26     	; 0x9da <insere_cartao+0x30>
	{
		c = keyboard_input();
 9c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
		if(c != '*' && c != '#')
 9c4:	8a 32       	cpi	r24, 0x2A	; 42
 9c6:	49 f0       	breq	.+18     	; 0x9da <insere_cartao+0x30>
 9c8:	83 32       	cpi	r24, 0x23	; 35
 9ca:	39 f0       	breq	.+14     	; 0x9da <insere_cartao+0x30>
		{
			CARD_PASSWORD[i] = c;
 9cc:	fe 01       	movw	r30, r28
 9ce:	e9 55       	subi	r30, 0x59	; 89
 9d0:	fd 4f       	sbci	r31, 0xFD	; 253
 9d2:	80 83       	st	Z, r24
			sendChar(c);
 9d4:	0e 94 bc 01 	call	0x378	; 0x378 <sendChar>
			i++;
 9d8:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0, flag = 0;
	char c;
	
	LCD_print2lines("Insira/digite","cartao: ");
	while(i<6)
 9da:	c6 30       	cpi	r28, 0x06	; 6
 9dc:	d1 05       	cpc	r29, r1
 9de:	84 f3       	brlt	.-32     	; 0x9c0 <insere_cartao+0x16>
 9e0:	c0 e0       	ldi	r28, 0x00	; 0
 9e2:	d0 e0       	ldi	r29, 0x00	; 0
 9e4:	12 c0       	rjmp	.+36     	; 0xa0a <insere_cartao+0x60>
		}
	}	

	while(!flag)
	{
		c = keyboard_input();
 9e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
		if(c == '#')
 9ea:	83 32       	cpi	r24, 0x23	; 35
 9ec:	41 f4       	brne	.+16     	; 0x9fe <insere_cartao+0x54>
		{
			flag  = 1;
			STATE = 8;
 9ee:	28 e0       	ldi	r18, 0x08	; 8
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	30 93 9a 02 	sts	0x029A, r19	; 0x80029a <STATE+0x1>
 9f6:	20 93 99 02 	sts	0x0299, r18	; 0x800299 <STATE>
	while(!flag)
	{
		c = keyboard_input();
		if(c == '#')
		{
			flag  = 1;
 9fa:	c1 e0       	ldi	r28, 0x01	; 1
 9fc:	d0 e0       	ldi	r29, 0x00	; 0
			STATE = 8;
		}
		if (c == '*')
 9fe:	8a 32       	cpi	r24, 0x2A	; 42
 a00:	21 f4       	brne	.+8      	; 0xa0a <insere_cartao+0x60>
		{
			//DESLIGA
			STATE = 0;
 a02:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <STATE+0x1>
 a06:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <STATE>
			sendChar(c);
			i++;
		}
	}	

	while(!flag)
 a0a:	20 97       	sbiw	r28, 0x00	; 0
 a0c:	61 f3       	breq	.-40     	; 0x9e6 <insere_cartao+0x3c>
		{
			//DESLIGA
			STATE = 0;
		}
	}
}
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	08 95       	ret

00000a14 <senha_cartao>:

void senha_cartao()
{
 a14:	cf 93       	push	r28
 a16:	df 93       	push	r29
	int flag=0;
	char c;
	
	//Faz a leitura da senha de 6 digitos do cartão
	read_pass(6);
 a18:	86 e0       	ldi	r24, 0x06	; 6
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <read_pass>
	}
}

void senha_cartao()
{
	int flag=0;
 a20:	c0 e0       	ldi	r28, 0x00	; 0
 a22:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Faz a leitura da senha de 6 digitos do cartão
	read_pass(6);
	
	//Fica aguardando que o usuário clique "confirma"
	while(!flag)
 a24:	28 c0       	rjmp	.+80     	; 0xa76 <senha_cartao+0x62>
	{
		c = keyboard_input();
 a26:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <keyboard_input>
		if(c == '#')
 a2a:	83 32       	cpi	r24, 0x23	; 35
 a2c:	21 f5       	brne	.+72     	; 0xa76 <senha_cartao+0x62>
		{
			//Verifica se a senha está correta, se tiver, sai do laço
			if((!strcmp(CARD_PASSWORD,"283077")) || (!strcmp(CARD_PASSWORD,"313799")))
 a2e:	6f e6       	ldi	r22, 0x6F	; 111
 a30:	72 e0       	ldi	r23, 0x02	; 2
 a32:	87 ea       	ldi	r24, 0xA7	; 167
 a34:	92 e0       	ldi	r25, 0x02	; 2
 a36:	0e 94 ad 07 	call	0xf5a	; 0xf5a <strcmp>
 a3a:	89 2b       	or	r24, r25
 a3c:	b9 f0       	breq	.+46     	; 0xa6c <senha_cartao+0x58>
 a3e:	66 e7       	ldi	r22, 0x76	; 118
 a40:	72 e0       	ldi	r23, 0x02	; 2
 a42:	87 ea       	ldi	r24, 0xA7	; 167
 a44:	92 e0       	ldi	r25, 0x02	; 2
 a46:	0e 94 ad 07 	call	0xf5a	; 0xf5a <strcmp>
 a4a:	89 2b       	or	r24, r25
 a4c:	91 f0       	breq	.+36     	; 0xa72 <senha_cartao+0x5e>
				flag = 1;
			}
			//Caso a senha esteja errada, é informado ao usuário
			else
			{
				LCD_clear();
 a4e:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_clear>
				sendString("SENHA INVALIDA");
 a52:	80 ea       	ldi	r24, 0xA0	; 160
 a54:	91 e0       	ldi	r25, 0x01	; 1
 a56:	0e 94 a8 01 	call	0x350	; 0x350 <sendString>
				TIFR1 = (1 << 0);
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	86 bb       	out	0x16, r24	; 22
				delay_3s();
 a5e:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
				read_pass(6);				
 a62:	86 e0       	ldi	r24, 0x06	; 6
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <read_pass>
 a6a:	05 c0       	rjmp	.+10     	; 0xa76 <senha_cartao+0x62>
		if(c == '#')
		{
			//Verifica se a senha está correta, se tiver, sai do laço
			if((!strcmp(CARD_PASSWORD,"283077")) || (!strcmp(CARD_PASSWORD,"313799")))
			{
				flag = 1;
 a6c:	c1 e0       	ldi	r28, 0x01	; 1
 a6e:	d0 e0       	ldi	r29, 0x00	; 0
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <senha_cartao+0x62>
 a72:	c1 e0       	ldi	r28, 0x01	; 1
 a74:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Faz a leitura da senha de 6 digitos do cartão
	read_pass(6);
	
	//Fica aguardando que o usuário clique "confirma"
	while(!flag)
 a76:	20 97       	sbiw	r28, 0x00	; 0
 a78:	b1 f2       	breq	.-84     	; 0xa26 <senha_cartao+0x12>
		}
	}
	
	//Verifica qual dos operador que realizou a operação
	//e adiciona ao seu saldo do dia
	if (!strcmp(USER_PASSWORD, "1234"))
 a7a:	61 e9       	ldi	r22, 0x91	; 145
 a7c:	71 e0       	ldi	r23, 0x01	; 1
 a7e:	82 e9       	ldi	r24, 0x92	; 146
 a80:	92 e0       	ldi	r25, 0x02	; 2
 a82:	0e 94 ad 07 	call	0xf5a	; 0xf5a <strcmp>
 a86:	89 2b       	or	r24, r25
 a88:	a1 f4       	brne	.+40     	; 0xab2 <senha_cartao+0x9e>
	{
		operador1.saldo += VALOR_OPERACAO;
 a8a:	c1 eb       	ldi	r28, 0xB1	; 177
 a8c:	d2 e0       	ldi	r29, 0x02	; 2
 a8e:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <VALOR_OPERACAO>
 a92:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <VALOR_OPERACAO+0x1>
 a96:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <VALOR_OPERACAO+0x2>
 a9a:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <VALOR_OPERACAO+0x3>
 a9e:	68 81       	ld	r22, Y
 aa0:	79 81       	ldd	r23, Y+1	; 0x01
 aa2:	8a 81       	ldd	r24, Y+2	; 0x02
 aa4:	9b 81       	ldd	r25, Y+3	; 0x03
 aa6:	0e 94 85 06 	call	0xd0a	; 0xd0a <__addsf3>
 aaa:	68 83       	st	Y, r22
 aac:	79 83       	std	Y+1, r23	; 0x01
 aae:	8a 83       	std	Y+2, r24	; 0x02
 ab0:	9b 83       	std	Y+3, r25	; 0x03
	}
	
	if (!strcmp(USER_PASSWORD, "2345"))
 ab2:	66 e9       	ldi	r22, 0x96	; 150
 ab4:	71 e0       	ldi	r23, 0x01	; 1
 ab6:	82 e9       	ldi	r24, 0x92	; 146
 ab8:	92 e0       	ldi	r25, 0x02	; 2
 aba:	0e 94 ad 07 	call	0xf5a	; 0xf5a <strcmp>
 abe:	89 2b       	or	r24, r25
 ac0:	a1 f4       	brne	.+40     	; 0xaea <senha_cartao+0xd6>
	{
		operador2.saldo += VALOR_OPERACAO;
 ac2:	c9 eb       	ldi	r28, 0xB9	; 185
 ac4:	d2 e0       	ldi	r29, 0x02	; 2
 ac6:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <VALOR_OPERACAO>
 aca:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <VALOR_OPERACAO+0x1>
 ace:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <VALOR_OPERACAO+0x2>
 ad2:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <VALOR_OPERACAO+0x3>
 ad6:	68 81       	ld	r22, Y
 ad8:	79 81       	ldd	r23, Y+1	; 0x01
 ada:	8a 81       	ldd	r24, Y+2	; 0x02
 adc:	9b 81       	ldd	r25, Y+3	; 0x03
 ade:	0e 94 85 06 	call	0xd0a	; 0xd0a <__addsf3>
 ae2:	68 83       	st	Y, r22
 ae4:	79 83       	std	Y+1, r23	; 0x01
 ae6:	8a 83       	std	Y+2, r24	; 0x02
 ae8:	9b 83       	std	Y+3, r25	; 0x03
	}
	
	//Informa no display, por 3 segundos, que o pagamento foi aprovado
	LCD_print2lines("Pagamento","Aprovado!");
 aea:	6d e7       	ldi	r22, 0x7D	; 125
 aec:	72 e0       	ldi	r23, 0x02	; 2
 aee:	87 e8       	ldi	r24, 0x87	; 135
 af0:	92 e0       	ldi	r25, 0x02	; 2
 af2:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_print2lines>
	TIFR1 = (1 << 0);
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	86 bb       	out	0x16, r24	; 22
	delay_3s();
 afa:	0e 94 10 06 	call	0xc20	; 0xc20 <delay_3s>
	STATE = 0;
 afe:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <STATE+0x1>
 b02:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <STATE>
 b06:	df 91       	pop	r29
 b08:	cf 91       	pop	r28
 b0a:	08 95       	ret

00000b0c <USART_Receive>:
		
		i++;
		
		//delay??
	}
}
 b0c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 b10:	88 23       	and	r24, r24
 b12:	e1 f3       	breq	.-8      	; 0xb0c <USART_Receive>
 b14:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b18:	08 95       	ret

00000b1a <__vector_18>:

ISR(USART_RX_vect)
{
 b1a:	1f 92       	push	r1
 b1c:	0f 92       	push	r0
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	0f 92       	push	r0
 b22:	11 24       	eor	r1, r1
 b24:	2f 93       	push	r18
 b26:	3f 93       	push	r19
 b28:	4f 93       	push	r20
 b2a:	5f 93       	push	r21
 b2c:	6f 93       	push	r22
 b2e:	7f 93       	push	r23
 b30:	8f 93       	push	r24
 b32:	9f 93       	push	r25
 b34:	af 93       	push	r26
 b36:	bf 93       	push	r27
 b38:	cf 93       	push	r28
 b3a:	df 93       	push	r29
 b3c:	ef 93       	push	r30
 b3e:	ff 93       	push	r31
	int i;
	
	for(i=0; i<9; i++)
 b40:	c0 e0       	ldi	r28, 0x00	; 0
 b42:	d0 e0       	ldi	r29, 0x00	; 0
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <__vector_18+0x3a>
	{
		RX_Buffer[i] = USART_Receive();
 b46:	0e 94 86 05 	call	0xb0c	; 0xb0c <USART_Receive>
 b4a:	fe 01       	movw	r30, r28
 b4c:	ed 53       	subi	r30, 0x3D	; 61
 b4e:	fd 4f       	sbci	r31, 0xFD	; 253
 b50:	80 83       	st	Z, r24

ISR(USART_RX_vect)
{
	int i;
	
	for(i=0; i<9; i++)
 b52:	21 96       	adiw	r28, 0x01	; 1
 b54:	c9 30       	cpi	r28, 0x09	; 9
 b56:	d1 05       	cpc	r29, r1
 b58:	b4 f3       	brlt	.-20     	; 0xb46 <__vector_18+0x2c>
	{
		RX_Buffer[i] = USART_Receive();
	}
	
	strcpy(RX_MSG, RX_Buffer);
 b5a:	63 ec       	ldi	r22, 0xC3	; 195
 b5c:	72 e0       	ldi	r23, 0x02	; 2
 b5e:	86 ed       	ldi	r24, 0xD6	; 214
 b60:	92 e0       	ldi	r25, 0x02	; 2
 b62:	0e 94 b6 07 	call	0xf6c	; 0xf6c <strcpy>
 b66:	ff 91       	pop	r31
 b68:	ef 91       	pop	r30
 b6a:	df 91       	pop	r29
 b6c:	cf 91       	pop	r28
 b6e:	bf 91       	pop	r27
 b70:	af 91       	pop	r26
 b72:	9f 91       	pop	r25
 b74:	8f 91       	pop	r24
 b76:	7f 91       	pop	r23
 b78:	6f 91       	pop	r22
 b7a:	5f 91       	pop	r21
 b7c:	4f 91       	pop	r20
 b7e:	3f 91       	pop	r19
 b80:	2f 91       	pop	r18
 b82:	0f 90       	pop	r0
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	0f 90       	pop	r0
 b88:	1f 90       	pop	r1
 b8a:	18 95       	reti

00000b8c <press_confirm>:

int press_confirm()
{
	char flag = 0;
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
 b8c:	87 e0       	ldi	r24, 0x07	; 7
 b8e:	88 b9       	out	0x08, r24	; 8
	enable_3S = 1; // habilita contador de 3s
 b90:	81 e0       	ldi	r24, 0x01	; 1
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <enable_3S+0x1>
 b98:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <enable_3S>
#include "header.h"

int press_confirm()
{
	char flag = 0;
 b9c:	20 e0       	ldi	r18, 0x00	; 0
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
	enable_3S = 1; // habilita contador de 3s
	
	while(((PIND & (1 << 6)) == 0) && !flag) // verifica se '#' esta pressionado ou se ja contou 3 seg
 b9e:	07 c0       	rjmp	.+14     	; 0xbae <press_confirm+0x22>
	{
		if(COUNT_3S == 3) // verifica se o contador chegou em 3
 ba0:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <COUNT_3S>
 ba4:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <COUNT_3S+0x1>
 ba8:	03 97       	sbiw	r24, 0x03	; 3
 baa:	09 f4       	brne	.+2      	; 0xbae <press_confirm+0x22>
			flag = 1;
 bac:	21 e0       	ldi	r18, 0x01	; 1
	char flag = 0;
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
	enable_3S = 1; // habilita contador de 3s
	
	while(((PIND & (1 << 6)) == 0) && !flag) // verifica se '#' esta pressionado ou se ja contou 3 seg
 bae:	4e 99       	sbic	0x09, 6	; 9
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <press_confirm+0x2a>
 bb2:	22 23       	and	r18, r18
 bb4:	a9 f3       	breq	.-22     	; 0xba0 <press_confirm+0x14>
	{
		if(COUNT_3S == 3) // verifica se o contador chegou em 3
			flag = 1;
	}
	
	enable_3S = 0; // desabilita contador de 3s
 bb6:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <enable_3S+0x1>
 bba:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <enable_3S>
	COUNT_3S = 0;  // zera contador
 bbe:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <COUNT_3S+0x1>
 bc2:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <COUNT_3S>
	
	if(!flag)
 bc6:	21 11       	cpse	r18, r1
 bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <press_confirm+0x44>
	{
		return 0;
 bca:	80 e0       	ldi	r24, 0x00	; 0
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	08 95       	ret
	}
	else
	{
		return 1;
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 bd4:	08 95       	ret

00000bd6 <press_cancel>:

int press_cancel()
{
	char flag = 0;
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
 bd6:	87 e0       	ldi	r24, 0x07	; 7
 bd8:	88 b9       	out	0x08, r24	; 8
	enable_4S = 1; // habilita contador de 4s
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <enable_4S+0x1>
 be2:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <enable_4S>
	}
}

int press_cancel()
{
	char flag = 0;
 be6:	20 e0       	ldi	r18, 0x00	; 0
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
	enable_4S = 1; // habilita contador de 4s
	
	while(((PIND & (1 << 4)) == 0) && !flag) // verifica se '*' esta pressionado ou se ja contou 4 seg
 be8:	07 c0       	rjmp	.+14     	; 0xbf8 <press_cancel+0x22>
	{
		if(COUNT_4S == 4) // verifica se o contador chegou em 4
 bea:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <COUNT_4S>
 bee:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <COUNT_4S+0x1>
 bf2:	04 97       	sbiw	r24, 0x04	; 4
 bf4:	09 f4       	brne	.+2      	; 0xbf8 <press_cancel+0x22>
		flag = 1;
 bf6:	21 e0       	ldi	r18, 0x01	; 1
	char flag = 0;
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
	enable_4S = 1; // habilita contador de 4s
	
	while(((PIND & (1 << 4)) == 0) && !flag) // verifica se '*' esta pressionado ou se ja contou 4 seg
 bf8:	4c 99       	sbic	0x09, 4	; 9
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <press_cancel+0x2a>
 bfc:	22 23       	and	r18, r18
 bfe:	a9 f3       	breq	.-22     	; 0xbea <press_cancel+0x14>
	{
		if(COUNT_4S == 4) // verifica se o contador chegou em 4
		flag = 1;
	}
	
	enable_4S = 0; // desabilita contador de 4s
 c00:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <enable_4S+0x1>
 c04:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <enable_4S>
	COUNT_4S = 0;  // zera contador
 c08:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <COUNT_4S+0x1>
 c0c:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <COUNT_4S>
	
	if(!flag)
 c10:	21 11       	cpse	r18, r1
 c12:	03 c0       	rjmp	.+6      	; 0xc1a <press_cancel+0x44>
	{
		return 0;
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	08 95       	ret
	}
	else
	{
		return 1;
 c1a:	81 e0       	ldi	r24, 0x01	; 1
 c1c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 c1e:	08 95       	ret

00000c20 <delay_3s>:
void delay_3s() // USAR O CONTADOR DE 1 SEG
{
	// T_Timer = 1/16MHz = 62.5ns
	// Prescalar: 1024 -> T_Timer = 62.5ns * 1024 = 64us
	// N_contagens = 3s/64us = 46875
	TCCR1B = 0x5; //Prescaler 1024
 c20:	85 e0       	ldi	r24, 0x05	; 5
 c22:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TCNT1 = 18661; // 65536 - 46875 = 18661
 c26:	85 ee       	ldi	r24, 0xE5	; 229
 c28:	98 e4       	ldi	r25, 0x48	; 72
 c2a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 c2e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while ((TIFR1 & (1 << 0)) == 0); //aguarda flag
 c32:	b0 9b       	sbis	0x16, 0	; 22
 c34:	fe cf       	rjmp	.-4      	; 0xc32 <delay_3s+0x12>
	TIFR1 = (1 << 0); //limpa flag
 c36:	81 e0       	ldi	r24, 0x01	; 1
 c38:	86 bb       	out	0x16, r24	; 22
 c3a:	08 95       	ret

00000c3c <delay_debouncing>:
void delay_debouncing()
{
	// T_Timer = 1/16MHz = 62.5ns
	// Prescaler: 256-> 16MHz/256 = 62500Hz / T_Timer = 1/62500 = 16us
	//num_contagens = (1E-3)/16E-6 = 62
	TCCR0B = 0x04; // Configura preescaler de 256
 c3c:	84 e0       	ldi	r24, 0x04	; 4
 c3e:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 194; //256 - 62 = 194
 c40:	82 ec       	ldi	r24, 0xC2	; 194
 c42:	86 bd       	out	0x26, r24	; 38
	
	while ((TIFR0 & (1 << 0)) == 0); //aguarda flag
 c44:	a8 9b       	sbis	0x15, 0	; 21
 c46:	fe cf       	rjmp	.-4      	; 0xc44 <delay_debouncing+0x8>
	TIFR0 |= (1 << 0); //limpa flag
 c48:	85 b3       	in	r24, 0x15	; 21
 c4a:	81 60       	ori	r24, 0x01	; 1
 c4c:	85 bb       	out	0x15, r24	; 21
 c4e:	08 95       	ret

00000c50 <delay_lcd>:
}

void delay_lcd()
{
	TCCR0B = 0x02;				//prescaler de 8, T_timer = 8*T_CPU = 0,5us
 c50:	82 e0       	ldi	r24, 0x02	; 2
 c52:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 176;				//(40us/0,5us) = 80 contagens -> 256-80 = 176
 c54:	80 eb       	ldi	r24, 0xB0	; 176
 c56:	86 bd       	out	0x26, r24	; 38
	while(!(TIFR0 & (1<<0)));	//aguarda estouro
 c58:	a8 9b       	sbis	0x15, 0	; 21
 c5a:	fe cf       	rjmp	.-4      	; 0xc58 <delay_lcd+0x8>
	TIFR0 = (1<<0);				//limpa flag de estouro
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	85 bb       	out	0x15, r24	; 21
 c60:	08 95       	ret

00000c62 <delay_clear>:
}

void delay_clear()
{
	TCCR0B = 0x04;				//prescaler de 256, T_timer = 256*T_CPU = 16us
 c62:	84 e0       	ldi	r24, 0x04	; 4
 c64:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 153;				//(1640us/16us) = 103 contagens -> 256-103 = 153
 c66:	89 e9       	ldi	r24, 0x99	; 153
 c68:	86 bd       	out	0x26, r24	; 38
	while(!(TIFR0 & (1<<0)));	//aguarda estouro
 c6a:	a8 9b       	sbis	0x15, 0	; 21
 c6c:	fe cf       	rjmp	.-4      	; 0xc6a <delay_clear+0x8>
	TIFR0 = (1<<0);				//limpa flag de estouro
 c6e:	81 e0       	ldi	r24, 0x01	; 1
 c70:	85 bb       	out	0x15, r24	; 21
 c72:	08 95       	ret

00000c74 <__vector_13>:
}

ISR(TIMER1_OVF_vect)
{
 c74:	1f 92       	push	r1
 c76:	0f 92       	push	r0
 c78:	0f b6       	in	r0, 0x3f	; 63
 c7a:	0f 92       	push	r0
 c7c:	11 24       	eor	r1, r1
 c7e:	2f 93       	push	r18
 c80:	3f 93       	push	r19
 c82:	4f 93       	push	r20
 c84:	5f 93       	push	r21
 c86:	6f 93       	push	r22
 c88:	7f 93       	push	r23
 c8a:	8f 93       	push	r24
 c8c:	9f 93       	push	r25
 c8e:	af 93       	push	r26
 c90:	bf 93       	push	r27
 c92:	ef 93       	push	r30
 c94:	ff 93       	push	r31
	TCNT1 = 0x0BDC;	//contagem de 1seg, para prescaler de 256 => 1min do sistema
 c96:	8c ed       	ldi	r24, 0xDC	; 220
 c98:	9b e0       	ldi	r25, 0x0B	; 11
 c9a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 c9e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 = (1 << 0);   // Limpa flag de overflow
 ca2:	81 e0       	ldi	r24, 0x01	; 1
 ca4:	86 bb       	out	0x16, r24	; 22
	
	update_clock();
 ca6:	0e 94 ae 00 	call	0x15c	; 0x15c <update_clock>
	
	//display_time();
	
	if(enable_3S) //se o contador de 3s estiver habilitado incrementa
 caa:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <enable_3S>
 cae:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <enable_3S+0x1>
 cb2:	89 2b       	or	r24, r25
 cb4:	49 f0       	breq	.+18     	; 0xcc8 <__vector_13+0x54>
	{
		COUNT_3S++;
 cb6:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <COUNT_3S>
 cba:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <COUNT_3S+0x1>
 cbe:	01 96       	adiw	r24, 0x01	; 1
 cc0:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <COUNT_3S+0x1>
 cc4:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <COUNT_3S>
	}
	if(enable_4S) //se o contador de 4s estiver habilitado incrementa
 cc8:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <enable_4S>
 ccc:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <enable_4S+0x1>
 cd0:	89 2b       	or	r24, r25
 cd2:	49 f0       	breq	.+18     	; 0xce6 <__vector_13+0x72>
	{
		COUNT_4S++;
 cd4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <COUNT_4S>
 cd8:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <COUNT_4S+0x1>
 cdc:	01 96       	adiw	r24, 0x01	; 1
 cde:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <COUNT_4S+0x1>
 ce2:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <COUNT_4S>
	}
 ce6:	ff 91       	pop	r31
 ce8:	ef 91       	pop	r30
 cea:	bf 91       	pop	r27
 cec:	af 91       	pop	r26
 cee:	9f 91       	pop	r25
 cf0:	8f 91       	pop	r24
 cf2:	7f 91       	pop	r23
 cf4:	6f 91       	pop	r22
 cf6:	5f 91       	pop	r21
 cf8:	4f 91       	pop	r20
 cfa:	3f 91       	pop	r19
 cfc:	2f 91       	pop	r18
 cfe:	0f 90       	pop	r0
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	0f 90       	pop	r0
 d04:	1f 90       	pop	r1
 d06:	18 95       	reti

00000d08 <__subsf3>:
 d08:	50 58       	subi	r21, 0x80	; 128

00000d0a <__addsf3>:
 d0a:	bb 27       	eor	r27, r27
 d0c:	aa 27       	eor	r26, r26
 d0e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__addsf3x>
 d12:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__fp_round>
 d16:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_pscA>
 d1a:	38 f0       	brcs	.+14     	; 0xd2a <__addsf3+0x20>
 d1c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_pscB>
 d20:	20 f0       	brcs	.+8      	; 0xd2a <__addsf3+0x20>
 d22:	39 f4       	brne	.+14     	; 0xd32 <__addsf3+0x28>
 d24:	9f 3f       	cpi	r25, 0xFF	; 255
 d26:	19 f4       	brne	.+6      	; 0xd2e <__addsf3+0x24>
 d28:	26 f4       	brtc	.+8      	; 0xd32 <__addsf3+0x28>
 d2a:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_nan>
 d2e:	0e f4       	brtc	.+2      	; 0xd32 <__addsf3+0x28>
 d30:	e0 95       	com	r30
 d32:	e7 fb       	bst	r30, 7
 d34:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__fp_inf>

00000d38 <__addsf3x>:
 d38:	e9 2f       	mov	r30, r25
 d3a:	0e 94 56 07 	call	0xeac	; 0xeac <__fp_split3>
 d3e:	58 f3       	brcs	.-42     	; 0xd16 <__addsf3+0xc>
 d40:	ba 17       	cp	r27, r26
 d42:	62 07       	cpc	r22, r18
 d44:	73 07       	cpc	r23, r19
 d46:	84 07       	cpc	r24, r20
 d48:	95 07       	cpc	r25, r21
 d4a:	20 f0       	brcs	.+8      	; 0xd54 <__addsf3x+0x1c>
 d4c:	79 f4       	brne	.+30     	; 0xd6c <__addsf3x+0x34>
 d4e:	a6 f5       	brtc	.+104    	; 0xdb8 <__addsf3x+0x80>
 d50:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__fp_zero>
 d54:	0e f4       	brtc	.+2      	; 0xd58 <__addsf3x+0x20>
 d56:	e0 95       	com	r30
 d58:	0b 2e       	mov	r0, r27
 d5a:	ba 2f       	mov	r27, r26
 d5c:	a0 2d       	mov	r26, r0
 d5e:	0b 01       	movw	r0, r22
 d60:	b9 01       	movw	r22, r18
 d62:	90 01       	movw	r18, r0
 d64:	0c 01       	movw	r0, r24
 d66:	ca 01       	movw	r24, r20
 d68:	a0 01       	movw	r20, r0
 d6a:	11 24       	eor	r1, r1
 d6c:	ff 27       	eor	r31, r31
 d6e:	59 1b       	sub	r21, r25
 d70:	99 f0       	breq	.+38     	; 0xd98 <__addsf3x+0x60>
 d72:	59 3f       	cpi	r21, 0xF9	; 249
 d74:	50 f4       	brcc	.+20     	; 0xd8a <__addsf3x+0x52>
 d76:	50 3e       	cpi	r21, 0xE0	; 224
 d78:	68 f1       	brcs	.+90     	; 0xdd4 <__addsf3x+0x9c>
 d7a:	1a 16       	cp	r1, r26
 d7c:	f0 40       	sbci	r31, 0x00	; 0
 d7e:	a2 2f       	mov	r26, r18
 d80:	23 2f       	mov	r18, r19
 d82:	34 2f       	mov	r19, r20
 d84:	44 27       	eor	r20, r20
 d86:	58 5f       	subi	r21, 0xF8	; 248
 d88:	f3 cf       	rjmp	.-26     	; 0xd70 <__addsf3x+0x38>
 d8a:	46 95       	lsr	r20
 d8c:	37 95       	ror	r19
 d8e:	27 95       	ror	r18
 d90:	a7 95       	ror	r26
 d92:	f0 40       	sbci	r31, 0x00	; 0
 d94:	53 95       	inc	r21
 d96:	c9 f7       	brne	.-14     	; 0xd8a <__addsf3x+0x52>
 d98:	7e f4       	brtc	.+30     	; 0xdb8 <__addsf3x+0x80>
 d9a:	1f 16       	cp	r1, r31
 d9c:	ba 0b       	sbc	r27, r26
 d9e:	62 0b       	sbc	r22, r18
 da0:	73 0b       	sbc	r23, r19
 da2:	84 0b       	sbc	r24, r20
 da4:	ba f0       	brmi	.+46     	; 0xdd4 <__addsf3x+0x9c>
 da6:	91 50       	subi	r25, 0x01	; 1
 da8:	a1 f0       	breq	.+40     	; 0xdd2 <__addsf3x+0x9a>
 daa:	ff 0f       	add	r31, r31
 dac:	bb 1f       	adc	r27, r27
 dae:	66 1f       	adc	r22, r22
 db0:	77 1f       	adc	r23, r23
 db2:	88 1f       	adc	r24, r24
 db4:	c2 f7       	brpl	.-16     	; 0xda6 <__addsf3x+0x6e>
 db6:	0e c0       	rjmp	.+28     	; 0xdd4 <__addsf3x+0x9c>
 db8:	ba 0f       	add	r27, r26
 dba:	62 1f       	adc	r22, r18
 dbc:	73 1f       	adc	r23, r19
 dbe:	84 1f       	adc	r24, r20
 dc0:	48 f4       	brcc	.+18     	; 0xdd4 <__addsf3x+0x9c>
 dc2:	87 95       	ror	r24
 dc4:	77 95       	ror	r23
 dc6:	67 95       	ror	r22
 dc8:	b7 95       	ror	r27
 dca:	f7 95       	ror	r31
 dcc:	9e 3f       	cpi	r25, 0xFE	; 254
 dce:	08 f0       	brcs	.+2      	; 0xdd2 <__addsf3x+0x9a>
 dd0:	b0 cf       	rjmp	.-160    	; 0xd32 <__addsf3+0x28>
 dd2:	93 95       	inc	r25
 dd4:	88 0f       	add	r24, r24
 dd6:	08 f0       	brcs	.+2      	; 0xdda <__addsf3x+0xa2>
 dd8:	99 27       	eor	r25, r25
 dda:	ee 0f       	add	r30, r30
 ddc:	97 95       	ror	r25
 dde:	87 95       	ror	r24
 de0:	08 95       	ret

00000de2 <__floatunsisf>:
 de2:	e8 94       	clt
 de4:	09 c0       	rjmp	.+18     	; 0xdf8 <__floatsisf+0x12>

00000de6 <__floatsisf>:
 de6:	97 fb       	bst	r25, 7
 de8:	3e f4       	brtc	.+14     	; 0xdf8 <__floatsisf+0x12>
 dea:	90 95       	com	r25
 dec:	80 95       	com	r24
 dee:	70 95       	com	r23
 df0:	61 95       	neg	r22
 df2:	7f 4f       	sbci	r23, 0xFF	; 255
 df4:	8f 4f       	sbci	r24, 0xFF	; 255
 df6:	9f 4f       	sbci	r25, 0xFF	; 255
 df8:	99 23       	and	r25, r25
 dfa:	a9 f0       	breq	.+42     	; 0xe26 <__floatsisf+0x40>
 dfc:	f9 2f       	mov	r31, r25
 dfe:	96 e9       	ldi	r25, 0x96	; 150
 e00:	bb 27       	eor	r27, r27
 e02:	93 95       	inc	r25
 e04:	f6 95       	lsr	r31
 e06:	87 95       	ror	r24
 e08:	77 95       	ror	r23
 e0a:	67 95       	ror	r22
 e0c:	b7 95       	ror	r27
 e0e:	f1 11       	cpse	r31, r1
 e10:	f8 cf       	rjmp	.-16     	; 0xe02 <__floatsisf+0x1c>
 e12:	fa f4       	brpl	.+62     	; 0xe52 <__floatsisf+0x6c>
 e14:	bb 0f       	add	r27, r27
 e16:	11 f4       	brne	.+4      	; 0xe1c <__floatsisf+0x36>
 e18:	60 ff       	sbrs	r22, 0
 e1a:	1b c0       	rjmp	.+54     	; 0xe52 <__floatsisf+0x6c>
 e1c:	6f 5f       	subi	r22, 0xFF	; 255
 e1e:	7f 4f       	sbci	r23, 0xFF	; 255
 e20:	8f 4f       	sbci	r24, 0xFF	; 255
 e22:	9f 4f       	sbci	r25, 0xFF	; 255
 e24:	16 c0       	rjmp	.+44     	; 0xe52 <__floatsisf+0x6c>
 e26:	88 23       	and	r24, r24
 e28:	11 f0       	breq	.+4      	; 0xe2e <__floatsisf+0x48>
 e2a:	96 e9       	ldi	r25, 0x96	; 150
 e2c:	11 c0       	rjmp	.+34     	; 0xe50 <__floatsisf+0x6a>
 e2e:	77 23       	and	r23, r23
 e30:	21 f0       	breq	.+8      	; 0xe3a <__floatsisf+0x54>
 e32:	9e e8       	ldi	r25, 0x8E	; 142
 e34:	87 2f       	mov	r24, r23
 e36:	76 2f       	mov	r23, r22
 e38:	05 c0       	rjmp	.+10     	; 0xe44 <__floatsisf+0x5e>
 e3a:	66 23       	and	r22, r22
 e3c:	71 f0       	breq	.+28     	; 0xe5a <__floatsisf+0x74>
 e3e:	96 e8       	ldi	r25, 0x86	; 134
 e40:	86 2f       	mov	r24, r22
 e42:	70 e0       	ldi	r23, 0x00	; 0
 e44:	60 e0       	ldi	r22, 0x00	; 0
 e46:	2a f0       	brmi	.+10     	; 0xe52 <__floatsisf+0x6c>
 e48:	9a 95       	dec	r25
 e4a:	66 0f       	add	r22, r22
 e4c:	77 1f       	adc	r23, r23
 e4e:	88 1f       	adc	r24, r24
 e50:	da f7       	brpl	.-10     	; 0xe48 <__floatsisf+0x62>
 e52:	88 0f       	add	r24, r24
 e54:	96 95       	lsr	r25
 e56:	87 95       	ror	r24
 e58:	97 f9       	bld	r25, 7
 e5a:	08 95       	ret

00000e5c <__fp_inf>:
 e5c:	97 f9       	bld	r25, 7
 e5e:	9f 67       	ori	r25, 0x7F	; 127
 e60:	80 e8       	ldi	r24, 0x80	; 128
 e62:	70 e0       	ldi	r23, 0x00	; 0
 e64:	60 e0       	ldi	r22, 0x00	; 0
 e66:	08 95       	ret

00000e68 <__fp_nan>:
 e68:	9f ef       	ldi	r25, 0xFF	; 255
 e6a:	80 ec       	ldi	r24, 0xC0	; 192
 e6c:	08 95       	ret

00000e6e <__fp_pscA>:
 e6e:	00 24       	eor	r0, r0
 e70:	0a 94       	dec	r0
 e72:	16 16       	cp	r1, r22
 e74:	17 06       	cpc	r1, r23
 e76:	18 06       	cpc	r1, r24
 e78:	09 06       	cpc	r0, r25
 e7a:	08 95       	ret

00000e7c <__fp_pscB>:
 e7c:	00 24       	eor	r0, r0
 e7e:	0a 94       	dec	r0
 e80:	12 16       	cp	r1, r18
 e82:	13 06       	cpc	r1, r19
 e84:	14 06       	cpc	r1, r20
 e86:	05 06       	cpc	r0, r21
 e88:	08 95       	ret

00000e8a <__fp_round>:
 e8a:	09 2e       	mov	r0, r25
 e8c:	03 94       	inc	r0
 e8e:	00 0c       	add	r0, r0
 e90:	11 f4       	brne	.+4      	; 0xe96 <__fp_round+0xc>
 e92:	88 23       	and	r24, r24
 e94:	52 f0       	brmi	.+20     	; 0xeaa <__fp_round+0x20>
 e96:	bb 0f       	add	r27, r27
 e98:	40 f4       	brcc	.+16     	; 0xeaa <__fp_round+0x20>
 e9a:	bf 2b       	or	r27, r31
 e9c:	11 f4       	brne	.+4      	; 0xea2 <__fp_round+0x18>
 e9e:	60 ff       	sbrs	r22, 0
 ea0:	04 c0       	rjmp	.+8      	; 0xeaa <__fp_round+0x20>
 ea2:	6f 5f       	subi	r22, 0xFF	; 255
 ea4:	7f 4f       	sbci	r23, 0xFF	; 255
 ea6:	8f 4f       	sbci	r24, 0xFF	; 255
 ea8:	9f 4f       	sbci	r25, 0xFF	; 255
 eaa:	08 95       	ret

00000eac <__fp_split3>:
 eac:	57 fd       	sbrc	r21, 7
 eae:	90 58       	subi	r25, 0x80	; 128
 eb0:	44 0f       	add	r20, r20
 eb2:	55 1f       	adc	r21, r21
 eb4:	59 f0       	breq	.+22     	; 0xecc <__fp_splitA+0x10>
 eb6:	5f 3f       	cpi	r21, 0xFF	; 255
 eb8:	71 f0       	breq	.+28     	; 0xed6 <__fp_splitA+0x1a>
 eba:	47 95       	ror	r20

00000ebc <__fp_splitA>:
 ebc:	88 0f       	add	r24, r24
 ebe:	97 fb       	bst	r25, 7
 ec0:	99 1f       	adc	r25, r25
 ec2:	61 f0       	breq	.+24     	; 0xedc <__fp_splitA+0x20>
 ec4:	9f 3f       	cpi	r25, 0xFF	; 255
 ec6:	79 f0       	breq	.+30     	; 0xee6 <__fp_splitA+0x2a>
 ec8:	87 95       	ror	r24
 eca:	08 95       	ret
 ecc:	12 16       	cp	r1, r18
 ece:	13 06       	cpc	r1, r19
 ed0:	14 06       	cpc	r1, r20
 ed2:	55 1f       	adc	r21, r21
 ed4:	f2 cf       	rjmp	.-28     	; 0xeba <__fp_split3+0xe>
 ed6:	46 95       	lsr	r20
 ed8:	f1 df       	rcall	.-30     	; 0xebc <__fp_splitA>
 eda:	08 c0       	rjmp	.+16     	; 0xeec <__fp_splitA+0x30>
 edc:	16 16       	cp	r1, r22
 ede:	17 06       	cpc	r1, r23
 ee0:	18 06       	cpc	r1, r24
 ee2:	99 1f       	adc	r25, r25
 ee4:	f1 cf       	rjmp	.-30     	; 0xec8 <__fp_splitA+0xc>
 ee6:	86 95       	lsr	r24
 ee8:	71 05       	cpc	r23, r1
 eea:	61 05       	cpc	r22, r1
 eec:	08 94       	sec
 eee:	08 95       	ret

00000ef0 <__fp_zero>:
 ef0:	e8 94       	clt

00000ef2 <__fp_szero>:
 ef2:	bb 27       	eor	r27, r27
 ef4:	66 27       	eor	r22, r22
 ef6:	77 27       	eor	r23, r23
 ef8:	cb 01       	movw	r24, r22
 efa:	97 f9       	bld	r25, 7
 efc:	08 95       	ret

00000efe <__divmodhi4>:
 efe:	97 fb       	bst	r25, 7
 f00:	07 2e       	mov	r0, r23
 f02:	16 f4       	brtc	.+4      	; 0xf08 <__divmodhi4+0xa>
 f04:	00 94       	com	r0
 f06:	07 d0       	rcall	.+14     	; 0xf16 <__divmodhi4_neg1>
 f08:	77 fd       	sbrc	r23, 7
 f0a:	09 d0       	rcall	.+18     	; 0xf1e <__divmodhi4_neg2>
 f0c:	0e 94 99 07 	call	0xf32	; 0xf32 <__udivmodhi4>
 f10:	07 fc       	sbrc	r0, 7
 f12:	05 d0       	rcall	.+10     	; 0xf1e <__divmodhi4_neg2>
 f14:	3e f4       	brtc	.+14     	; 0xf24 <__divmodhi4_exit>

00000f16 <__divmodhi4_neg1>:
 f16:	90 95       	com	r25
 f18:	81 95       	neg	r24
 f1a:	9f 4f       	sbci	r25, 0xFF	; 255
 f1c:	08 95       	ret

00000f1e <__divmodhi4_neg2>:
 f1e:	70 95       	com	r23
 f20:	61 95       	neg	r22
 f22:	7f 4f       	sbci	r23, 0xFF	; 255

00000f24 <__divmodhi4_exit>:
 f24:	08 95       	ret

00000f26 <__tablejump2__>:
 f26:	ee 0f       	add	r30, r30
 f28:	ff 1f       	adc	r31, r31
 f2a:	05 90       	lpm	r0, Z+
 f2c:	f4 91       	lpm	r31, Z
 f2e:	e0 2d       	mov	r30, r0
 f30:	09 94       	ijmp

00000f32 <__udivmodhi4>:
 f32:	aa 1b       	sub	r26, r26
 f34:	bb 1b       	sub	r27, r27
 f36:	51 e1       	ldi	r21, 0x11	; 17
 f38:	07 c0       	rjmp	.+14     	; 0xf48 <__udivmodhi4_ep>

00000f3a <__udivmodhi4_loop>:
 f3a:	aa 1f       	adc	r26, r26
 f3c:	bb 1f       	adc	r27, r27
 f3e:	a6 17       	cp	r26, r22
 f40:	b7 07       	cpc	r27, r23
 f42:	10 f0       	brcs	.+4      	; 0xf48 <__udivmodhi4_ep>
 f44:	a6 1b       	sub	r26, r22
 f46:	b7 0b       	sbc	r27, r23

00000f48 <__udivmodhi4_ep>:
 f48:	88 1f       	adc	r24, r24
 f4a:	99 1f       	adc	r25, r25
 f4c:	5a 95       	dec	r21
 f4e:	a9 f7       	brne	.-22     	; 0xf3a <__udivmodhi4_loop>
 f50:	80 95       	com	r24
 f52:	90 95       	com	r25
 f54:	bc 01       	movw	r22, r24
 f56:	cd 01       	movw	r24, r26
 f58:	08 95       	ret

00000f5a <strcmp>:
 f5a:	fb 01       	movw	r30, r22
 f5c:	dc 01       	movw	r26, r24
 f5e:	8d 91       	ld	r24, X+
 f60:	01 90       	ld	r0, Z+
 f62:	80 19       	sub	r24, r0
 f64:	01 10       	cpse	r0, r1
 f66:	d9 f3       	breq	.-10     	; 0xf5e <strcmp+0x4>
 f68:	99 0b       	sbc	r25, r25
 f6a:	08 95       	ret

00000f6c <strcpy>:
 f6c:	fb 01       	movw	r30, r22
 f6e:	dc 01       	movw	r26, r24
 f70:	01 90       	ld	r0, Z+
 f72:	0d 92       	st	X+, r0
 f74:	00 20       	and	r0, r0
 f76:	e1 f7       	brne	.-8      	; 0xf70 <strcpy+0x4>
 f78:	08 95       	ret

00000f7a <_exit>:
 f7a:	f8 94       	cli

00000f7c <__stop_program>:
 f7c:	ff cf       	rjmp	.-2      	; 0xf7c <__stop_program>
