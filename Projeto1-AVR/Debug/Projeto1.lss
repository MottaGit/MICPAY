
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00000500  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008001a0  008001a0  00000634  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001366  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad9  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099c  00000000  00000000  00002623  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000545  00000000  00000000  00003765  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003caa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	a0 01       	movw	r20, r0
  6a:	b2 01       	movw	r22, r4
  6c:	b9 01       	movw	r22, r18
  6e:	c6 01       	movw	r24, r12
  70:	cd 01       	movw	r24, r26
  72:	d0 01       	movw	r26, r0
  74:	d7 01       	movw	r26, r14

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e0 e0       	ldi	r30, 0x00	; 0
  8a:	f5 e0       	ldi	r31, 0x05	; 5
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 3a       	cpi	r26, 0xA0	; 160
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 ea       	ldi	r26, 0xA0	; 160
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 3a       	cpi	r26, 0xAB	; 171
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  ac:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <PINS_init>:
	/*	definir pinos de entrada e saída das portas:
		0 -> pino de entrada do microcontrolador
		1 -> pino de saída do microcontrolador	*/
	
	//pinos para o LCD
	DDRB = 0xFF; // 1111 111
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	84 b9       	out	0x04, r24	; 4
	
	//pinos para o keyboard
	DDRC = 0x0F; //xx00 1111 -> PC0, PC1, PC2 e PC3 as input e PC4 e PC5 como output
  b8:	8f e0       	ldi	r24, 0x0F	; 15
  ba:	87 b9       	out	0x07, r24	; 7
	// PC4 -> Led fora do ar
	// PC5 -> Led pagamento pendente
	DDRD = 0x00; //x000 xxxx -> PD4, PD5 e PD6 as output
  bc:	1a b8       	out	0x0a, r1	; 10
  be:	08 95       	ret

000000c0 <VAR_init>:
}

// inicializa variáveis com informações dos operadores
void VAR_init()
{
  c0:	08 95       	ret

000000c2 <delay_debouncing>:
void delay_debouncing()
{
	// T_Timer = 1/16MHz = 62.5ns
	// Prescaler: 256-> 16MHz/256 = 62500Hz / T_Timer = 1/62500 = 16us
	//num_contagens = (1E-3)/16E-6 = 62
	TCCR0A = 0;    // Configura modo
  c2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x04; // Configura preescaler
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 194; //256 - 62 = 194
  c8:	82 ec       	ldi	r24, 0xC2	; 194
  ca:	86 bd       	out	0x26, r24	; 38
	
	while ((TIFR0 & (1 << 0)) == 0); //aguarda flag
  cc:	a8 9b       	sbis	0x15, 0	; 21
  ce:	fe cf       	rjmp	.-4      	; 0xcc <delay_debouncing+0xa>
	TIFR0 |= (1 << 0); //limpa flag
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	08 95       	ret

000000d8 <debouncing>:
	
	return key;
}

char debouncing(char TECLA)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	c8 2f       	mov	r28, r24
	unsigned char Key_last = 0, Count = 0, Key_now, BOUNCE = 7;
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	10 e0       	ldi	r17, 0x00	; 0
	
	while(Count < BOUNCE)
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <debouncing+0x20>
	{
		delay_debouncing(); 			//delay de 1ms
  e6:	0e 94 61 00 	call	0xc2	; 0xc2 <delay_debouncing>
		
		Key_now = TECLA;
		
		if (Key_now == Key_last)
  ea:	1c 13       	cpse	r17, r28
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <debouncing+0x1a>
		{
			Count++;
  ee:	df 5f       	subi	r29, 0xFF	; 255
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <debouncing+0x1e>
		}
		else
		{
			Count = 0;
			Key_last = Key_now;
  f2:	1c 2f       	mov	r17, r28
		{
			Count++;
		}
		else
		{
			Count = 0;
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	9c 2f       	mov	r25, r28

char debouncing(char TECLA)
{
	unsigned char Key_last = 0, Count = 0, Key_now, BOUNCE = 7;
	
	while(Count < BOUNCE)
  f8:	d7 30       	cpi	r29, 0x07	; 7
  fa:	a8 f3       	brcs	.-22     	; 0xe6 <debouncing+0xe>
			Count = 0;
			Key_last = Key_now;
		}
	}
	return Key_now;
}
  fc:	89 2f       	mov	r24, r25
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	08 95       	ret

00000106 <keyboard_input>:
 #include "header.h"

char keyboard_input()
{
 106:	bf 92       	push	r11
 108:	cf 92       	push	r12
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	2c 97       	sbiw	r28, 0x0c	; 12
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	int i, j, flag=0;
	char key;
	char keyboard[4][3] = {{'1','2','3'},
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	e0 e0       	ldi	r30, 0x00	; 0
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	de 01       	movw	r26, r28
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	01 90       	ld	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	8a 95       	dec	r24
 138:	e1 f7       	brne	.-8      	; 0x132 <keyboard_input+0x2c>
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
 13a:	80 e7       	ldi	r24, 0x70	; 112
 13c:	8b b9       	out	0x0b, r24	; 11
 #include "header.h"

char keyboard_input()
{
	int i, j, flag=0;
 13e:	c1 2c       	mov	r12, r1
 140:	d1 2c       	mov	r13, r1
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
 142:	42 c0       	rjmp	.+132    	; 0x1c8 <keyboard_input+0xc2>
	{
		for(i=0; i<4; i++)
		{
			PORTC = 0x0F; //set PC0, PC1, PC2, PC3 -> 0000 1111
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	88 b9       	out	0x08, r24	; 8
			
			PORTC &= ~(1 << i); //A cada iteração ele zera uma porta
 148:	28 b1       	in	r18, 0x08	; 8
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 2c       	mov	r0, r14
 150:	02 c0       	rjmp	.+4      	; 0x156 <keyboard_input+0x50>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <keyboard_input+0x4c>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	88 b9       	out	0x08, r24	; 8
			
			for(j=0; j<3; j++)
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	23 c0       	rjmp	.+70     	; 0x1ac <keyboard_input+0xa6>
			{
				if(!debouncing((PIND & (1 << (4+j) ) )))	//testa as colunas de PD4, PD5 e PD6
 166:	29 b1       	in	r18, 0x09	; 9
 168:	a8 01       	movw	r20, r16
 16a:	4c 5f       	subi	r20, 0xFC	; 252
 16c:	5f 4f       	sbci	r21, 0xFF	; 255
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <keyboard_input+0x72>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	4a 95       	dec	r20
 17a:	e2 f7       	brpl	.-8      	; 0x174 <keyboard_input+0x6e>
 17c:	82 23       	and	r24, r18
 17e:	0e 94 6c 00 	call	0xd8	; 0xd8 <debouncing>
 182:	81 11       	cpse	r24, r1
 184:	11 c0       	rjmp	.+34     	; 0x1a8 <keyboard_input+0xa2>
				{
					key = keyboard[i][j];
 186:	f7 01       	movw	r30, r14
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	ee 0d       	add	r30, r14
 18e:	ff 1d       	adc	r31, r15
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	8c 0f       	add	r24, r28
 196:	9d 1f       	adc	r25, r29
 198:	e8 0f       	add	r30, r24
 19a:	f9 1f       	adc	r31, r25
 19c:	e0 0f       	add	r30, r16
 19e:	f1 1f       	adc	r31, r17
 1a0:	b0 80       	ld	r11, Z
					flag = 1;
 1a2:	cc 24       	eor	r12, r12
 1a4:	c3 94       	inc	r12
 1a6:	d1 2c       	mov	r13, r1
		{
			PORTC = 0x0F; //set PC0, PC1, PC2, PC3 -> 0000 1111
			
			PORTC &= ~(1 << i); //A cada iteração ele zera uma porta
			
			for(j=0; j<3; j++)
 1a8:	0f 5f       	subi	r16, 0xFF	; 255
 1aa:	1f 4f       	sbci	r17, 0xFF	; 255
 1ac:	03 30       	cpi	r16, 0x03	; 3
 1ae:	11 05       	cpc	r17, r1
 1b0:	d4 f2       	brlt	.-76     	; 0x166 <keyboard_input+0x60>
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
	{
		for(i=0; i<4; i++)
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	e9 1a       	sub	r14, r25
 1b6:	f9 0a       	sbc	r15, r25
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <keyboard_input+0xb8>
 1ba:	e1 2c       	mov	r14, r1
 1bc:	f1 2c       	mov	r15, r1
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	e8 16       	cp	r14, r24
 1c2:	f1 04       	cpc	r15, r1
 1c4:	0c f4       	brge	.+2      	; 0x1c8 <keyboard_input+0xc2>
 1c6:	be cf       	rjmp	.-132    	; 0x144 <keyboard_input+0x3e>
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
 1c8:	c1 14       	cp	r12, r1
 1ca:	d1 04       	cpc	r13, r1
 1cc:	b1 f3       	breq	.-20     	; 0x1ba <keyboard_input+0xb4>
			}
		}
	}
	
	return key;
}
 1ce:	8b 2d       	mov	r24, r11
 1d0:	2c 96       	adiw	r28, 0x0c	; 12
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	08 95       	ret

000001f0 <delay_lcd>:
#define RS (PINB & (1 << PINB0))
#define E (PINB & (1 << PINB1))

void delay_lcd()
{	
	TCCR0B = 0x02;				//prescaler de 8, T_timer = 8*T_CPU = 0,5us
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 176;				//(40us/0,5us) = 80 contagens -> 256-80 = 176
 1f4:	80 eb       	ldi	r24, 0xB0	; 176
 1f6:	86 bd       	out	0x26, r24	; 38
	while(!(TIFR0 & (1<<0)));	//aguarda estouro
 1f8:	a8 9b       	sbis	0x15, 0	; 21
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <delay_lcd+0x8>
	TIFR0 = (1<<0);				//limpa flag de estouro
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	85 bb       	out	0x15, r24	; 21
 200:	08 95       	ret

00000202 <delay_clear>:
}

void delay_clear()
{	
	TCCR0B = 0x04;				//prescaler de 256, T_timer = 256*T_CPU = 16us
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 153;				//(1640us/16us) = 103 contagens -> 256-103 = 153
 206:	89 e9       	ldi	r24, 0x99	; 153
 208:	86 bd       	out	0x26, r24	; 38
	while(!(TIFR0 & (1<<0)));	//aguarda estouro
 20a:	a8 9b       	sbis	0x15, 0	; 21
 20c:	fe cf       	rjmp	.-4      	; 0x20a <delay_clear+0x8>
	TIFR0 = (1<<0);				//limpa flag de estouro
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret

00000214 <send_command>:
	send_command(0xC, 0); 	// display aceso sem cursor
}

// enviar comando para o display
void send_command(char c, char rs)
{
 214:	cf 93       	push	r28
 216:	c8 2f       	mov	r28, r24
	if(rs == 0)                // RS = 1, configura display; RS = 0, escreve no display
 218:	61 11       	cpse	r22, r1
 21a:	04 c0       	rjmp	.+8      	; 0x224 <send_command+0x10>
		PORTB &= ~(1 << 0);
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	85 b9       	out	0x05, r24	; 5
 222:	03 c0       	rjmp	.+6      	; 0x22a <send_command+0x16>
	else
		PORTB |= (1 << 0);
 224:	85 b1       	in	r24, 0x05	; 5
 226:	81 60       	ori	r24, 0x01	; 1
 228:	85 b9       	out	0x05, r24	; 5

	PORTB &= 0x0F;            // AND com 0000 1111 -> limpa os bits (P1_4 P1_5 P1_6 P1_7)
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	8f 70       	andi	r24, 0x0F	; 15
 22e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (c&0xF0);        // passa os 4 bits mais significativos de C para P1 -> cccc cccc & 1111 0000 = cccc 0000
 230:	85 b1       	in	r24, 0x05	; 5
 232:	9c 2f       	mov	r25, r28
 234:	90 7f       	andi	r25, 0xF0	; 240
 236:	89 2b       	or	r24, r25
 238:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1);
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 240:	85 b1       	in	r24, 0x05	; 5
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	85 b9       	out	0x05, r24	; 5

	delay_lcd(); // delay de 40us
 246:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <delay_lcd>

	c = c<<4;
	PORTB &= 0x0F;
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	8f 70       	andi	r24, 0x0F	; 15
 24e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (c&0xF0);
 250:	85 b1       	in	r24, 0x05	; 5
 252:	c2 95       	swap	r28
 254:	c0 7f       	andi	r28, 0xF0	; 240
 256:	c8 2b       	or	r28, r24
 258:	c5 b9       	out	0x05, r28	; 5
	PORTB |= (1 << 1);
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 260:	85 b1       	in	r24, 0x05	; 5
 262:	8d 7f       	andi	r24, 0xFD	; 253
 264:	85 b9       	out	0x05, r24	; 5

	delay_lcd();            // delay de 40us
 266:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <delay_lcd>
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <LCD_init>:
}

// inicializa o display LCD
void LCD_init()
{
	PORTB &= ~(1 << 0);
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	8e 7f       	andi	r24, 0xFE	; 254
 272:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0x0F;
 274:	85 b1       	in	r24, 0x05	; 5
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x20;
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	80 62       	ori	r24, 0x20	; 32
 27e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1);
 280:	85 b1       	in	r24, 0x05	; 5
 282:	82 60       	ori	r24, 0x02	; 2
 284:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
 286:	85 b1       	in	r24, 0x05	; 5
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	85 b9       	out	0x05, r24	; 5
	delay_lcd();
 28c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <delay_lcd>
	
	send_command(0x28, 0); 	// função de utilização
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	88 e2       	ldi	r24, 0x28	; 40
 294:	0e 94 0a 01 	call	0x214	; 0x214 <send_command>
	send_command(0x06, 0); 	// modo de operação: escreve deslocando o cursor para a direita
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	0e 94 0a 01 	call	0x214	; 0x214 <send_command>
	send_command(0xC, 0); 	// display aceso sem cursor
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	0e 94 0a 01 	call	0x214	; 0x214 <send_command>
 2a8:	08 95       	ret

000002aa <sendString>:

	delay_lcd();            // delay de 40us
}

void sendString(char* str)
{
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	8c 01       	movw	r16, r24
	unsigned char index = 0;
 2b2:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[index] != 0)
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <sendString+0x14>
	{
		send_command(str[index], 1);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	0e 94 0a 01 	call	0x214	; 0x214 <send_command>
		index++;
 2bc:	cf 5f       	subi	r28, 0xFF	; 255

void sendString(char* str)
{
	unsigned char index = 0;
	
	while(str[index] != 0)
 2be:	f8 01       	movw	r30, r16
 2c0:	ec 0f       	add	r30, r28
 2c2:	f1 1d       	adc	r31, r1
 2c4:	80 81       	ld	r24, Z
 2c6:	81 11       	cpse	r24, r1
 2c8:	f6 cf       	rjmp	.-20     	; 0x2b6 <sendString+0xc>
	{
		send_command(str[index], 1);
		index++;
	}
}
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <sendChar>:

void sendChar(char c)
{
	send_command(c, 1);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	0e 94 0a 01 	call	0x214	; 0x214 <send_command>
 2d8:	08 95       	ret

000002da <LCD_clear>:
}

// limpa o display e retorna o cursor para o início
void LCD_clear()
{
	send_command(0x01, 0);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 0a 01 	call	0x214	; 0x214 <send_command>
	delay_clear();
 2e2:	0e 94 01 01 	call	0x202	; 0x202 <delay_clear>
 2e6:	08 95       	ret

000002e8 <LCD_print2lines>:
{
	send_command(c, 1);
}

void LCD_print2lines(char *line1, char *line2)
{
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	8c 01       	movw	r16, r24
 2f2:	eb 01       	movw	r28, r22
	LCD_clear();
 2f4:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_clear>
	sendString(line1);
 2f8:	c8 01       	movw	r24, r16
 2fa:	0e 94 55 01 	call	0x2aa	; 0x2aa <sendString>
	send_command(0xC0,0);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	80 ec       	ldi	r24, 0xC0	; 192
 302:	0e 94 0a 01 	call	0x214	; 0x214 <send_command>
	sendString(line2);
 306:	ce 01       	movw	r24, r28
 308:	0e 94 55 01 	call	0x2aa	; 0x2aa <sendString>
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	08 95       	ret

00000316 <main>:
#include "header.h"

int main(void)
{
	PINS_init();
 316:	0e 94 5a 00 	call	0xb4	; 0xb4 <PINS_init>
	LCD_init();
 31a:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_init>
	VAR_init();
 31e:	0e 94 60 00 	call	0xc0	; 0xc0 <VAR_init>
	
	STATE=0;
 322:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <STATE+0x1>
 326:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <STATE>
	
	/* Replace with your application code */
    while (1) 
    {
        switch(STATE)
 32a:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <STATE>
 32e:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <STATE+0x1>
 332:	e7 30       	cpi	r30, 0x07	; 7
 334:	f1 05       	cpc	r31, r1
 336:	c8 f7       	brcc	.-14     	; 0x32a <main+0x14>
 338:	ec 5c       	subi	r30, 0xCC	; 204
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__tablejump2__>
        {
	        case 0: //espera a máquina ser ligada
				LCD_clear();
 340:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_clear>
				sendString("OFF");
 344:	8c e0       	ldi	r24, 0x0C	; 12
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 55 01 	call	0x2aa	; 0x2aa <sendString>
				if(keyboard_input() == '#')
 34c:	0e 94 83 00 	call	0x106	; 0x106 <keyboard_input>
 350:	83 32       	cpi	r24, 0x23	; 35
 352:	59 f7       	brne	.-42     	; 0x32a <main+0x14>
				{
					STATE = maquina_on_off(1);
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 de 01 	call	0x3bc	; 0x3bc <maquina_on_off>
 35a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <STATE+0x1>
 35e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <STATE>
 362:	e3 cf       	rjmp	.-58     	; 0x32a <main+0x14>
				}
			break;
			
	        case 1: //espera pela senha de usuário
				STATE = read_user_password();
 364:	0e 94 0d 02 	call	0x41a	; 0x41a <read_user_password>
 368:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <STATE+0x1>
 36c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <STATE>
	        break;
 370:	dc cf       	rjmp	.-72     	; 0x32a <main+0x14>
			
	        case 2: //tela para selecionar a função
				LCD_print2lines("1-A Vista 2-A","prazo 3-Estorno");
 372:	60 e1       	ldi	r22, 0x10	; 16
 374:	71 e0       	ldi	r23, 0x01	; 1
 376:	80 e2       	ldi	r24, 0x20	; 32
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_print2lines>
				STATE = select_mode();
 37e:	0e 94 42 02 	call	0x484	; 0x484 <select_mode>
 382:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <STATE+0x1>
 386:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <STATE>
	        break;
 38a:	cf cf       	rjmp	.-98     	; 0x32a <main+0x14>
			
	        case 3: //tela de admin
				LCD_print2lines("modo","admin");
 38c:	6e e2       	ldi	r22, 0x2E	; 46
 38e:	71 e0       	ldi	r23, 0x01	; 1
 390:	84 e3       	ldi	r24, 0x34	; 52
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_print2lines>
 398:	ff cf       	rjmp	.-2      	; 0x398 <main+0x82>
				while(1);
	        break;
			
	        case 4: //modo pagamento a vista
				read_price();
 39a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <read_price>
 39e:	ff cf       	rjmp	.-2      	; 0x39e <main+0x88>
				//LCD_print2lines("modo","pag a vista");
				while(1);
	        break;
			
	        case 5: //modo pagamento parcelado
				LCD_print2lines("modo","pag parcelado");
 3a0:	69 e3       	ldi	r22, 0x39	; 57
 3a2:	71 e0       	ldi	r23, 0x01	; 1
 3a4:	84 e3       	ldi	r24, 0x34	; 52
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_print2lines>
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <main+0x96>
				while(1);
	        break;
			
	        case 6: //modo estorno
				LCD_print2lines("modo","estorno");
 3ae:	67 e4       	ldi	r22, 0x47	; 71
 3b0:	71 e0       	ldi	r23, 0x01	; 1
 3b2:	84 e3       	ldi	r24, 0x34	; 52
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_print2lines>
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <main+0xa4>

000003bc <maquina_on_off>:
#include "header.h"

int maquina_on_off(char mode)
{
	if(mode == 0) //Para desligar a maquina
 3bc:	88 23       	and	r24, r24
 3be:	41 f0       	breq	.+16     	; 0x3d0 <maquina_on_off+0x14>
		//delay_4s();
		//press_cancel();
		
		return 0;
	}
	if(mode == 1) //Para ligar a maquina
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	49 f4       	brne	.+18     	; 0x3d6 <maquina_on_off+0x1a>
	{
		TIFR1 = (1 << 0);
 3c4:	86 bb       	out	0x16, r24	; 22
		delay_3s();
 3c6:	0e 94 5f 02 	call	0x4be	; 0x4be <delay_3s>
		//press_confirm();
		
		return 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	08 95       	ret
	if(mode == 0) //Para desligar a maquina
	{
		//delay_4s();
		//press_cancel();
		
		return 0;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	08 95       	ret
		delay_3s();
		//press_confirm();
		
		return 1;
	}
	return 0;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
}
 3da:	08 95       	ret

000003dc <read_4pass>:
	
	return 0;
}

void read_4pass()
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
	int i=0;
	char c;
	
	LCD_print2lines("Digite a senha","Senha:");
 3e0:	6f e4       	ldi	r22, 0x4F	; 79
 3e2:	71 e0       	ldi	r23, 0x01	; 1
 3e4:	86 e5       	ldi	r24, 0x56	; 86
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_print2lines>
	return 0;
}

void read_4pass()
{
	int i=0;
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	
	LCD_print2lines("Digite a senha","Senha:");
	while(i<4)
 3f0:	0e c0       	rjmp	.+28     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		c = keyboard_input();
 3f2:	0e 94 83 00 	call	0x106	; 0x106 <keyboard_input>
		if(c != '*' && c != '#')
 3f6:	8a 32       	cpi	r24, 0x2A	; 42
 3f8:	51 f0       	breq	.+20     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3fa:	83 32       	cpi	r24, 0x23	; 35
 3fc:	41 f0       	breq	.+16     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			USER_PASSWORD[i] = c;
 3fe:	fe 01       	movw	r30, r28
 400:	e0 56       	subi	r30, 0x60	; 96
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	80 83       	st	Z, r24
			sendChar('*');
 406:	8a e2       	ldi	r24, 0x2A	; 42
 408:	0e 94 69 01 	call	0x2d2	; 0x2d2 <sendChar>
			i++;
 40c:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	char c;
	
	LCD_print2lines("Digite a senha","Senha:");
	while(i<4)
 40e:	c4 30       	cpi	r28, 0x04	; 4
 410:	d1 05       	cpc	r29, r1
 412:	7c f3       	brlt	.-34     	; 0x3f2 <read_4pass+0x16>
			USER_PASSWORD[i] = c;
			sendChar('*');
			i++;
		}
	}
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <read_user_password>:
int read_user_password()
{
	int flag=0;
	char c;
	
	read_4pass();
 41a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <read_4pass>
	
	while(!flag)
 41e:	24 c0       	rjmp	.+72     	; 0x468 <read_user_password+0x4e>
	{
		c = keyboard_input();
		if(c == '#')
		{
			if(!strcmp(USER_PASSWORD,"1234") || !strcmp(USER_PASSWORD,"2345"))
 420:	65 e6       	ldi	r22, 0x65	; 101
 422:	71 e0       	ldi	r23, 0x01	; 1
 424:	80 ea       	ldi	r24, 0xA0	; 160
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 75 02 	call	0x4ea	; 0x4ea <strcmp>
 42c:	89 2b       	or	r24, r25
 42e:	09 f1       	breq	.+66     	; 0x472 <read_user_password+0x58>
 430:	6a e6       	ldi	r22, 0x6A	; 106
 432:	71 e0       	ldi	r23, 0x01	; 1
 434:	80 ea       	ldi	r24, 0xA0	; 160
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 75 02 	call	0x4ea	; 0x4ea <strcmp>
 43c:	89 2b       	or	r24, r25
 43e:	e1 f0       	breq	.+56     	; 0x478 <read_user_password+0x5e>
			{
				flag = 1;
				return 2;
			}
			else if(!strcmp(USER_PASSWORD,"0123"))
 440:	6f e6       	ldi	r22, 0x6F	; 111
 442:	71 e0       	ldi	r23, 0x01	; 1
 444:	80 ea       	ldi	r24, 0xA0	; 160
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 75 02 	call	0x4ea	; 0x4ea <strcmp>
 44c:	89 2b       	or	r24, r25
 44e:	b9 f0       	breq	.+46     	; 0x47e <read_user_password+0x64>
				return 3;
			}
			else
			//if(strcmp(USER_PASSWORD,"1234")!=0 && strcmp(USER_PASSWORD,"2345")!=0 && strcmp(USER_PASSWORD,"0123")!=0)
			{
				LCD_clear();
 450:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_clear>
				sendString("SENHA INVALIDA");
 454:	84 e7       	ldi	r24, 0x74	; 116
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 55 01 	call	0x2aa	; 0x2aa <sendString>
				TIFR1 = (1 << 0);
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	86 bb       	out	0x16, r24	; 22
				delay_3s();
 460:	0e 94 5f 02 	call	0x4be	; 0x4be <delay_3s>
				read_4pass();
 464:	0e 94 ee 01 	call	0x3dc	; 0x3dc <read_4pass>
	
	read_4pass();
	
	while(!flag)
	{
		c = keyboard_input();
 468:	0e 94 83 00 	call	0x106	; 0x106 <keyboard_input>
		if(c == '#')
 46c:	83 32       	cpi	r24, 0x23	; 35
 46e:	e1 f7       	brne	.-8      	; 0x468 <read_user_password+0x4e>
 470:	d7 cf       	rjmp	.-82     	; 0x420 <read_user_password+0x6>
		{
			if(!strcmp(USER_PASSWORD,"1234") || !strcmp(USER_PASSWORD,"2345"))
			{
				flag = 1;
				return 2;
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	08 95       	ret
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	08 95       	ret
			}
			else if(!strcmp(USER_PASSWORD,"0123"))
			{
				
				flag = 1;
				return 3;
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	
	return 0;
}
 482:	08 95       	ret

00000484 <select_mode>:
int select_mode()
{
	char c;
	int flag=0;
	
	while(!flag)
 484:	04 c0       	rjmp	.+8      	; 0x48e <select_mode+0xa>
		if(c == '1')
		{
			flag=1;
			return 4;
		}
		if(c == '2')
 486:	82 33       	cpi	r24, 0x32	; 50
 488:	49 f0       	breq	.+18     	; 0x49c <select_mode+0x18>
		{
			flag=1;
			return 5;
		}
		if(c == '3')
 48a:	83 33       	cpi	r24, 0x33	; 51
 48c:	51 f0       	breq	.+20     	; 0x4a2 <select_mode+0x1e>
	char c;
	int flag=0;
	
	while(!flag)
	{
		c = keyboard_input();
 48e:	0e 94 83 00 	call	0x106	; 0x106 <keyboard_input>
		if(c == '1')
 492:	81 33       	cpi	r24, 0x31	; 49
 494:	c1 f7       	brne	.-16     	; 0x486 <select_mode+0x2>
		{
			flag=1;
			return 4;
 496:	84 e0       	ldi	r24, 0x04	; 4
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	08 95       	ret
		}
		if(c == '2')
		{
			flag=1;
			return 5;
 49c:	85 e0       	ldi	r24, 0x05	; 5
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	08 95       	ret
		}
		if(c == '3')
		{
			flag=1;
			return 6;
 4a2:	86 e0       	ldi	r24, 0x06	; 6
 4a4:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 4a6:	08 95       	ret

000004a8 <read_price>:

void read_price()
{
	LCD_print2lines("Digite o valor","R$");
 4a8:	63 e8       	ldi	r22, 0x83	; 131
 4aa:	71 e0       	ldi	r23, 0x01	; 1
 4ac:	86 e8       	ldi	r24, 0x86	; 134
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_print2lines>
	sendString("R$ 000,00");
 4b4:	85 e9       	ldi	r24, 0x95	; 149
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 55 01 	call	0x2aa	; 0x2aa <sendString>
 4bc:	08 95       	ret

000004be <delay_3s>:
void delay_3s()
{
	// T_Timer = 1/16MHz = 62.5ns
	// Prescalar: 1024 -> T_Timer = 62.5ns * 1024 = 64us
	// N_contagens = 3s/64us = 46875
	TCCR1A = 0; //Modo normal
 4be:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x5; //Prescaler 1024
 4c2:	85 e0       	ldi	r24, 0x05	; 5
 4c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	TCNT1 = 18661; // 65536 - 46875 = 18661
 4c8:	85 ee       	ldi	r24, 0xE5	; 229
 4ca:	98 e4       	ldi	r25, 0x48	; 72
 4cc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4d0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while ((TIFR1 & (1 << 0)) == 0); //aguarda flag
 4d4:	b0 9b       	sbis	0x16, 0	; 22
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <delay_3s+0x16>
	TIFR1 = (1 << 0); //limpa flag
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	86 bb       	out	0x16, r24	; 22
 4dc:	08 95       	ret

000004de <__tablejump2__>:
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	05 90       	lpm	r0, Z+
 4e4:	f4 91       	lpm	r31, Z
 4e6:	e0 2d       	mov	r30, r0
 4e8:	09 94       	ijmp

000004ea <strcmp>:
 4ea:	fb 01       	movw	r30, r22
 4ec:	dc 01       	movw	r26, r24
 4ee:	8d 91       	ld	r24, X+
 4f0:	01 90       	ld	r0, Z+
 4f2:	80 19       	sub	r24, r0
 4f4:	01 10       	cpse	r0, r1
 4f6:	d9 f3       	breq	.-10     	; 0x4ee <strcmp+0x4>
 4f8:	99 0b       	sbc	r25, r25
 4fa:	08 95       	ret

000004fc <_exit>:
 4fc:	f8 94       	cli

000004fe <__stop_program>:
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <__stop_program>
