
Projeto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000037a  00800100  00001d1a  00001dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  0080047a  0080047a  00002128  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003466  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb2  00000000  00000000  000057fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001977  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000598  00000000  00000000  00008128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000795  00000000  00000000  000086c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001598  00000000  00000000  00008e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__vector_13>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_18>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	a5 02       	muls	r26, r21
      6a:	b7 02       	muls	r27, r23
      6c:	be 02       	muls	r27, r30
      6e:	cb 02       	muls	r28, r27
      70:	ce 02       	muls	r28, r30
      72:	d7 02       	muls	r29, r23
      74:	e0 02       	muls	r30, r16
      76:	e5 02       	muls	r30, r21
      78:	e8 02       	muls	r30, r24
      7a:	eb 02       	muls	r30, r27
      7c:	f0 02       	muls	r31, r16
      7e:	f5 02       	muls	r31, r21
      80:	f8 02       	muls	r31, r24
      82:	ff 02       	muls	r31, r31
      84:	06 03       	mulsu	r16, r22

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	14 e0       	ldi	r17, 0x04	; 4
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	ea e1       	ldi	r30, 0x1A	; 26
      9a:	fd e1       	ldi	r31, 0x1D	; 29
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	aa 37       	cpi	r26, 0x7A	; 122
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	24 e0       	ldi	r18, 0x04	; 4
      aa:	aa e7       	ldi	r26, 0x7A	; 122
      ac:	b4 e0       	ldi	r27, 0x04	; 4
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	a7 3d       	cpi	r26, 0xD7	; 215
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 8e 02 	call	0x51c	; 0x51c <main>
      bc:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <MICPAY_init>:

// inicializa os pinos usados no projeto
void MICPAY_init()
{
	/* configurações para modo de operação normal nos timers */
	TCCR0A = 0;
      c4:	14 bc       	out	0x24, r1	; 36
	TCCR1A = 0;
      c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR2A = 0;
      ca:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	
	// configurações iniciais para TIM1 para contagem de 1 seg = 1 min no sistema
	TCCR1B = 0x04;	// prescaler de 256 -> tempo de uma contagem é 0,0625us*256 = 16us
      ce:	84 e0       	ldi	r24, 0x04	; 4
      d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0x0BDC;	// 1s/16us = 62500 contagens -> 65536-62500 = 3036
      d4:	8c ed       	ldi	r24, 0xDC	; 220
      d6:	9b e0       	ldi	r25, 0x0B	; 11
      d8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
      dc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	// interrupções do timer
	sei();
      e0:	78 94       	sei
	TIMSK1 |= (1 << 0); // interrupção flag estouro tim1
      e2:	ef e6       	ldi	r30, 0x6F	; 111
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	80 83       	st	Z, r24
	
	
	/*	pinos como entrada e saída:
		0 -> pino de entrada do microcontrolador
		1 -> pino de saída do microcontrolador	*/
	DDRB = 0xFF; // 1111 111
      ec:	8f ef       	ldi	r24, 0xFF	; 255
      ee:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0F; //xx00 1111 -> PC0, PC1, PC2 e PC3 as input e PC4 (led fora do ar) e PC5 (pag pendente) como output
      f0:	8f e0       	ldi	r24, 0x0F	; 15
      f2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00; //x000 xxxx -> PD4, PD5 e PD6 as output
      f4:	1a b8       	out	0x0a, r1	; 10
      f6:	08 95       	ret

000000f8 <set_hour>:
}

void set_hour(int in_hour, int in_minute, int in_second)
{
	HOUR = in_hour;
      f8:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <HOUR+0x1>
      fc:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <HOUR>
	MINUTE = in_minute;
     100:	70 93 94 04 	sts	0x0494, r23	; 0x800494 <MINUTE+0x1>
     104:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <MINUTE>
	SECOND = in_second;
     108:	50 93 ae 04 	sts	0x04AE, r21	; 0x8004ae <SECOND+0x1>
     10c:	40 93 ad 04 	sts	0x04AD, r20	; 0x8004ad <SECOND>
     110:	08 95       	ret

00000112 <set_date>:
}

void set_date(int in_day, int in_month, int in_year)
{
	DAY = in_day;
     112:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <DAY+0x1>
     116:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <DAY>
	MONTH = in_month;
     11a:	70 93 84 04 	sts	0x0484, r23	; 0x800484 <MONTH+0x1>
     11e:	60 93 83 04 	sts	0x0483, r22	; 0x800483 <MONTH>
	YEAR = in_year;
     122:	50 93 b0 04 	sts	0x04B0, r21	; 0x8004b0 <YEAR+0x1>
     126:	40 93 af 04 	sts	0x04AF, r20	; 0x8004af <YEAR>
     12a:	08 95       	ret

0000012c <VAR_init>:

// inicializa variáveis do sistema
void VAR_init()
{
	// inicializa dados dos operadores
	operador1.saldo = 0;
     12c:	ef e9       	ldi	r30, 0x9F	; 159
     12e:	f4 e0       	ldi	r31, 0x04	; 4
     130:	10 82       	st	Z, r1
     132:	11 82       	std	Z+1, r1	; 0x01
     134:	12 82       	std	Z+2, r1	; 0x02
     136:	13 82       	std	Z+3, r1	; 0x03
	operador1.total_estornos=0;
     138:	15 82       	std	Z+5, r1	; 0x05
     13a:	14 82       	std	Z+4, r1	; 0x04
	operador1.enable = 1;
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	97 83       	std	Z+7, r25	; 0x07
     142:	86 83       	std	Z+6, r24	; 0x06
	
	operador2.saldo = 0;
     144:	e1 eb       	ldi	r30, 0xB1	; 177
     146:	f4 e0       	ldi	r31, 0x04	; 4
     148:	10 82       	st	Z, r1
     14a:	11 82       	std	Z+1, r1	; 0x01
     14c:	12 82       	std	Z+2, r1	; 0x02
     14e:	13 82       	std	Z+3, r1	; 0x03
	operador2.total_estornos=0;
     150:	15 82       	std	Z+5, r1	; 0x05
     152:	14 82       	std	Z+4, r1	; 0x04
	operador2.enable = 1;
     154:	97 83       	std	Z+7, r25	; 0x07
     156:	86 83       	std	Z+6, r24	; 0x06
	
	// inicializa os dados de data e hora
	set_hour(8, 30, 0); // inicializa o sistema as 8h30
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	6e e1       	ldi	r22, 0x1E	; 30
     15e:	70 e0       	ldi	r23, 0x00	; 0
     160:	88 e0       	ldi	r24, 0x08	; 8
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 7c 00 	call	0xf8	; 0xf8 <set_hour>
	set_date(4, 3, 2022); // inicializa no dia 4 de março de 2022
     168:	46 ee       	ldi	r20, 0xE6	; 230
     16a:	57 e0       	ldi	r21, 0x07	; 7
     16c:	63 e0       	ldi	r22, 0x03	; 3
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 89 00 	call	0x112	; 0x112 <set_date>
	enable_GC = 0;
     178:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <enable_GC+0x1>
     17c:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <enable_GC>
	COUNT = 0;
     180:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <COUNT+0x1>
     184:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <COUNT>
     188:	08 95       	ret

0000018a <update_clock>:
}

void update_clock()
{
	SECOND++;
     18a:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <SECOND>
     18e:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <SECOND+0x1>
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <SECOND+0x1>
     198:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <SECOND>
	if (SECOND > 59)
     19c:	cc 97       	sbiw	r24, 0x3c	; 60
     19e:	6c f0       	brlt	.+26     	; 0x1ba <update_clock+0x30>
	{
		SECOND = 0;
     1a0:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <SECOND+0x1>
     1a4:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <SECOND>
		MINUTE++;
     1a8:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <MINUTE>
     1ac:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <MINUTE+0x1>
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <MINUTE+0x1>
     1b6:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <MINUTE>
	}
	if (MINUTE > 59)
     1ba:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <MINUTE>
     1be:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <MINUTE+0x1>
     1c2:	cc 97       	sbiw	r24, 0x3c	; 60
     1c4:	6c f0       	brlt	.+26     	; 0x1e0 <update_clock+0x56>
	{
		MINUTE = 0;
     1c6:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <MINUTE+0x1>
     1ca:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <MINUTE>
		HOUR++;
     1ce:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <HOUR>
     1d2:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <HOUR+0x1>
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <HOUR+0x1>
     1dc:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <HOUR>
	}
	if (HOUR>23)
     1e0:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <HOUR>
     1e4:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <HOUR+0x1>
     1e8:	48 97       	sbiw	r24, 0x18	; 24
     1ea:	24 f0       	brlt	.+8      	; 0x1f4 <update_clock+0x6a>
	{
		HOUR = 0;
     1ec:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <HOUR+0x1>
     1f0:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <HOUR>
     1f4:	08 95       	ret

000001f6 <display_time>:
	}
}

void display_time()
{
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
	LCD_clear();
     200:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
	char h_d, h_u, m_d, m_u, s_d, s_u;
	h_d = ((HOUR/10)%10) + '0';
     204:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <HOUR>
     208:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <HOUR+0x1>
     20c:	2a e0       	ldi	r18, 0x0A	; 10
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	b9 01       	movw	r22, r18
     212:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
     216:	e8 2f       	mov	r30, r24
     218:	cb 01       	movw	r24, r22
     21a:	b9 01       	movw	r22, r18
     21c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
     220:	48 2f       	mov	r20, r24
	h_u = (HOUR%10) + '0';
     222:	0f 2e       	mov	r0, r31
     224:	f0 e3       	ldi	r31, 0x30	; 48
     226:	ff 2e       	mov	r15, r31
     228:	f0 2d       	mov	r31, r0
     22a:	fe 0e       	add	r15, r30
	
	m_d = ((MINUTE/10)%10) + '0';
     22c:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <MINUTE>
     230:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <MINUTE+0x1>
     234:	b9 01       	movw	r22, r18
     236:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
     23a:	18 2f       	mov	r17, r24
     23c:	cb 01       	movw	r24, r22
     23e:	b9 01       	movw	r22, r18
     240:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
     244:	00 e3       	ldi	r16, 0x30	; 48
     246:	08 0f       	add	r16, r24
	m_u = (MINUTE%10) + '0';
     248:	10 5d       	subi	r17, 0xD0	; 208
	
	s_d = ((SECOND/10)%10) + '0';
     24a:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <SECOND>
     24e:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <SECOND+0x1>
     252:	b9 01       	movw	r22, r18
     254:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
     258:	c8 2f       	mov	r28, r24
     25a:	cb 01       	movw	r24, r22
     25c:	b9 01       	movw	r22, r18
     25e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
     262:	d0 e3       	ldi	r29, 0x30	; 48
     264:	d8 0f       	add	r29, r24
	s_u = (SECOND%10) + '0';
     266:	c0 5d       	subi	r28, 0xD0	; 208
	
	sendChar(h_d);
     268:	80 e3       	ldi	r24, 0x30	; 48
     26a:	84 0f       	add	r24, r20
     26c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
	sendChar(h_u);
     270:	8f 2d       	mov	r24, r15
     272:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
	sendChar(':');
     276:	8a e3       	ldi	r24, 0x3A	; 58
     278:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
	sendChar(m_d);
     27c:	80 2f       	mov	r24, r16
     27e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
	sendChar(m_u);
     282:	81 2f       	mov	r24, r17
     284:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
	sendChar(':');
     288:	8a e3       	ldi	r24, 0x3A	; 58
     28a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
	sendChar(s_d);
     28e:	8d 2f       	mov	r24, r29
     290:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
	sendChar(s_u);
     294:	8c 2f       	mov	r24, r28
     296:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	08 95       	ret

000002a6 <global_counters>:

void global_counters()
{
	if(enable_GC) // se o contador global estiver habilitado incrementa
     2a6:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <enable_GC>
     2aa:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <enable_GC+0x1>
     2ae:	89 2b       	or	r24, r25
     2b0:	49 f0       	breq	.+18     	; 0x2c4 <global_counters+0x1e>
	{
		COUNT++;
     2b2:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <COUNT>
     2b6:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <COUNT+0x1>
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <COUNT+0x1>
     2c0:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <COUNT>
	}
	if(enable_40S) // se o contador de 40s estiver habilitado, incremena
     2c4:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <enable_40S>
     2c8:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <enable_40S+0x1>
     2cc:	89 2b       	or	r24, r25
     2ce:	49 f0       	breq	.+18     	; 0x2e2 <global_counters+0x3c>
	{
		COUNT_40S++;
     2d0:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <COUNT_40S>
     2d4:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <COUNT_40S+0x1>
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <COUNT_40S+0x1>
     2de:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <COUNT_40S>
	}
	if(COUNT_40S == 40 || COUNT_40S == 80)
     2e2:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <COUNT_40S>
     2e6:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <COUNT_40S+0x1>
	{
		//manda comando serial novamentee
	}
	if(COUNT_40S == 120)
     2ea:	88 37       	cpi	r24, 0x78	; 120
     2ec:	91 05       	cpc	r25, r1
     2ee:	41 f4       	brne	.+16     	; 0x300 <global_counters+0x5a>
	{
		//led fora do ar ON
		COUNT_40S = 0;
     2f0:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <COUNT_40S+0x1>
     2f4:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <COUNT_40S>
		enable_40S = 0;
     2f8:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <enable_40S+0x1>
     2fc:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <enable_40S>
     300:	08 95       	ret

00000302 <debouncing>:
	
	return key;
}

char debouncing(char TECLA)
{
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	c8 2f       	mov	r28, r24
	unsigned char Key_last = 0, Count = 0, Key_now, BOUNCE = 7;
     30a:	d0 e0       	ldi	r29, 0x00	; 0
     30c:	10 e0       	ldi	r17, 0x00	; 0
	
	while(Count < BOUNCE)
     30e:	09 c0       	rjmp	.+18     	; 0x322 <debouncing+0x20>
	{
		delay_debouncing(); 			//delay de 1ms
     310:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <delay_debouncing>
		
		Key_now = TECLA;
		
		if (Key_now == Key_last)
     314:	1c 13       	cpse	r17, r28
     316:	02 c0       	rjmp	.+4      	; 0x31c <debouncing+0x1a>
		{
			Count++;
     318:	df 5f       	subi	r29, 0xFF	; 255
     31a:	02 c0       	rjmp	.+4      	; 0x320 <debouncing+0x1e>
		}
		else
		{
			Count = 0;
			Key_last = Key_now;
     31c:	1c 2f       	mov	r17, r28
		{
			Count++;
		}
		else
		{
			Count = 0;
     31e:	d0 e0       	ldi	r29, 0x00	; 0
     320:	9c 2f       	mov	r25, r28

char debouncing(char TECLA)
{
	unsigned char Key_last = 0, Count = 0, Key_now, BOUNCE = 7;
	
	while(Count < BOUNCE)
     322:	d7 30       	cpi	r29, 0x07	; 7
     324:	a8 f3       	brcs	.-22     	; 0x310 <debouncing+0xe>
			Count = 0;
			Key_last = Key_now;
		}
	}
	return Key_now;
}
     326:	89 2f       	mov	r24, r25
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	08 95       	ret

00000330 <keyboard_input>:
 #include "header.h"

char keyboard_input()
{
     330:	bf 92       	push	r11
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	2c 97       	sbiw	r28, 0x0c	; 12
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
	int i, j, flag=0;
	char key;
	char keyboard[4][3] = {{'1','2','3'},
     352:	8c e0       	ldi	r24, 0x0C	; 12
     354:	e0 e0       	ldi	r30, 0x00	; 0
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	de 01       	movw	r26, r28
     35a:	11 96       	adiw	r26, 0x01	; 1
     35c:	01 90       	ld	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	8a 95       	dec	r24
     362:	e1 f7       	brne	.-8      	; 0x35c <keyboard_input+0x2c>
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
     364:	80 e7       	ldi	r24, 0x70	; 112
     366:	8b b9       	out	0x0b, r24	; 11
 #include "header.h"

char keyboard_input()
{
	int i, j, flag=0;
     368:	c1 2c       	mov	r12, r1
     36a:	d1 2c       	mov	r13, r1
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
     36c:	42 c0       	rjmp	.+132    	; 0x3f2 <keyboard_input+0xc2>
	{
		for(i=0; i<4; i++)
		{
			PORTC = 0x0F; //set PC0, PC1, PC2, PC3 -> 0000 1111
     36e:	8f e0       	ldi	r24, 0x0F	; 15
     370:	88 b9       	out	0x08, r24	; 8
			
			PORTC &= ~(1 << i); //A cada iteração ele zera uma porta
     372:	28 b1       	in	r18, 0x08	; 8
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 2c       	mov	r0, r14
     37a:	02 c0       	rjmp	.+4      	; 0x380 <keyboard_input+0x50>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	0a 94       	dec	r0
     382:	e2 f7       	brpl	.-8      	; 0x37c <keyboard_input+0x4c>
     384:	80 95       	com	r24
     386:	82 23       	and	r24, r18
     388:	88 b9       	out	0x08, r24	; 8
			
			for(j=0; j<3; j++)
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	10 e0       	ldi	r17, 0x00	; 0
     38e:	23 c0       	rjmp	.+70     	; 0x3d6 <keyboard_input+0xa6>
			{
				if(!debouncing((PIND & (1 << (4+j) ) )))	//testa as colunas de PD4, PD5 e PD6
     390:	29 b1       	in	r18, 0x09	; 9
     392:	a8 01       	movw	r20, r16
     394:	4c 5f       	subi	r20, 0xFC	; 252
     396:	5f 4f       	sbci	r21, 0xFF	; 255
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <keyboard_input+0x72>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	4a 95       	dec	r20
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <keyboard_input+0x6e>
     3a6:	82 23       	and	r24, r18
     3a8:	0e 94 81 01 	call	0x302	; 0x302 <debouncing>
     3ac:	81 11       	cpse	r24, r1
     3ae:	11 c0       	rjmp	.+34     	; 0x3d2 <keyboard_input+0xa2>
				{
					key = keyboard[i][j];
     3b0:	f7 01       	movw	r30, r14
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	ee 0d       	add	r30, r14
     3b8:	ff 1d       	adc	r31, r15
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	8c 0f       	add	r24, r28
     3c0:	9d 1f       	adc	r25, r29
     3c2:	e8 0f       	add	r30, r24
     3c4:	f9 1f       	adc	r31, r25
     3c6:	e0 0f       	add	r30, r16
     3c8:	f1 1f       	adc	r31, r17
     3ca:	b0 80       	ld	r11, Z
					flag = 1;
     3cc:	cc 24       	eor	r12, r12
     3ce:	c3 94       	inc	r12
     3d0:	d1 2c       	mov	r13, r1
		{
			PORTC = 0x0F; //set PC0, PC1, PC2, PC3 -> 0000 1111
			
			PORTC &= ~(1 << i); //A cada iteração ele zera uma porta
			
			for(j=0; j<3; j++)
     3d2:	0f 5f       	subi	r16, 0xFF	; 255
     3d4:	1f 4f       	sbci	r17, 0xFF	; 255
     3d6:	03 30       	cpi	r16, 0x03	; 3
     3d8:	11 05       	cpc	r17, r1
     3da:	d4 f2       	brlt	.-76     	; 0x390 <keyboard_input+0x60>
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
	{
		for(i=0; i<4; i++)
     3dc:	9f ef       	ldi	r25, 0xFF	; 255
     3de:	e9 1a       	sub	r14, r25
     3e0:	f9 0a       	sbc	r15, r25
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <keyboard_input+0xb8>
     3e4:	e1 2c       	mov	r14, r1
     3e6:	f1 2c       	mov	r15, r1
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	e8 16       	cp	r14, r24
     3ec:	f1 04       	cpc	r15, r1
     3ee:	0c f4       	brge	.+2      	; 0x3f2 <keyboard_input+0xc2>
     3f0:	be cf       	rjmp	.-132    	; 0x36e <keyboard_input+0x3e>
						   {'4','5','6'},
						   {'7','8','9'},
						   {'*','0','#'}};
	PORTD = 0x70;
				
	while(!flag)
     3f2:	c1 14       	cp	r12, r1
     3f4:	d1 04       	cpc	r13, r1
     3f6:	b1 f3       	breq	.-20     	; 0x3e4 <keyboard_input+0xb4>
			}
		}
	}
	
	return key;
}
     3f8:	8b 2d       	mov	r24, r11
     3fa:	2c 96       	adiw	r28, 0x0c	; 12
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	08 95       	ret

0000041a <send_command>:
	send_command(0xC, 0); 	// display aceso sem cursor
}

// enviar comando para o display
void send_command(char c, char rs)
{
     41a:	cf 93       	push	r28
     41c:	c8 2f       	mov	r28, r24
	if(rs == 0)                // RS = 1, configura display; RS = 0, escreve no display
     41e:	61 11       	cpse	r22, r1
     420:	04 c0       	rjmp	.+8      	; 0x42a <send_command+0x10>
		PORTB &= ~(1 << 0);
     422:	85 b1       	in	r24, 0x05	; 5
     424:	8e 7f       	andi	r24, 0xFE	; 254
     426:	85 b9       	out	0x05, r24	; 5
     428:	03 c0       	rjmp	.+6      	; 0x430 <send_command+0x16>
	else
		PORTB |= (1 << 0);
     42a:	85 b1       	in	r24, 0x05	; 5
     42c:	81 60       	ori	r24, 0x01	; 1
     42e:	85 b9       	out	0x05, r24	; 5

	PORTB &= 0x0F;            // AND com 0000 1111 -> limpa os bits (P1_4 P1_5 P1_6 P1_7)
     430:	85 b1       	in	r24, 0x05	; 5
     432:	8f 70       	andi	r24, 0x0F	; 15
     434:	85 b9       	out	0x05, r24	; 5
	PORTB |= (c&0xF0);        // passa os 4 bits mais significativos de C para P1 -> cccc cccc & 1111 0000 = cccc 0000
     436:	85 b1       	in	r24, 0x05	; 5
     438:	9c 2f       	mov	r25, r28
     43a:	90 7f       	andi	r25, 0xF0	; 240
     43c:	89 2b       	or	r24, r25
     43e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1);
     440:	85 b1       	in	r24, 0x05	; 5
     442:	82 60       	ori	r24, 0x02	; 2
     444:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
     446:	85 b1       	in	r24, 0x05	; 5
     448:	8d 7f       	andi	r24, 0xFD	; 253
     44a:	85 b9       	out	0x05, r24	; 5

	delay_lcd(); // delay de 40us
     44c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <delay_lcd>

	c = c<<4;
	PORTB &= 0x0F;
     450:	85 b1       	in	r24, 0x05	; 5
     452:	8f 70       	andi	r24, 0x0F	; 15
     454:	85 b9       	out	0x05, r24	; 5
	PORTB |= (c&0xF0);
     456:	85 b1       	in	r24, 0x05	; 5
     458:	c2 95       	swap	r28
     45a:	c0 7f       	andi	r28, 0xF0	; 240
     45c:	c8 2b       	or	r28, r24
     45e:	c5 b9       	out	0x05, r28	; 5
	PORTB |= (1 << 1);
     460:	85 b1       	in	r24, 0x05	; 5
     462:	82 60       	ori	r24, 0x02	; 2
     464:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
     466:	85 b1       	in	r24, 0x05	; 5
     468:	8d 7f       	andi	r24, 0xFD	; 253
     46a:	85 b9       	out	0x05, r24	; 5

	delay_lcd();            // delay de 40us
     46c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <delay_lcd>
}
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <LCD_init>:
#define E (PINB & (1 << PINB1))

// inicializa o display LCD
void LCD_init()
{
	PORTB &= ~(1 << 0);
     474:	85 b1       	in	r24, 0x05	; 5
     476:	8e 7f       	andi	r24, 0xFE	; 254
     478:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0x0F;
     47a:	85 b1       	in	r24, 0x05	; 5
     47c:	8f 70       	andi	r24, 0x0F	; 15
     47e:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x20;
     480:	85 b1       	in	r24, 0x05	; 5
     482:	80 62       	ori	r24, 0x20	; 32
     484:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 1);
     486:	85 b1       	in	r24, 0x05	; 5
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << 1);
     48c:	85 b1       	in	r24, 0x05	; 5
     48e:	8d 7f       	andi	r24, 0xFD	; 253
     490:	85 b9       	out	0x05, r24	; 5
	delay_lcd();
     492:	0e 94 67 0c 	call	0x18ce	; 0x18ce <delay_lcd>
	
	send_command(0x28, 0); 	// função de utilização
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	88 e2       	ldi	r24, 0x28	; 40
     49a:	0e 94 0d 02 	call	0x41a	; 0x41a <send_command>
	send_command(0x06, 0); 	// modo de operação: escreve deslocando o cursor para a direita
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	86 e0       	ldi	r24, 0x06	; 6
     4a2:	0e 94 0d 02 	call	0x41a	; 0x41a <send_command>
	send_command(0xC, 0); 	// display aceso sem cursor
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	0e 94 0d 02 	call	0x41a	; 0x41a <send_command>
     4ae:	08 95       	ret

000004b0 <sendString>:

	delay_lcd();            // delay de 40us
}

void sendString(char* str)
{
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	8c 01       	movw	r16, r24
	unsigned char index = 0;
     4b8:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[index] != 0)
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <sendString+0x14>
	{
		send_command(str[index], 1);
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	0e 94 0d 02 	call	0x41a	; 0x41a <send_command>
		index++;
     4c2:	cf 5f       	subi	r28, 0xFF	; 255

void sendString(char* str)
{
	unsigned char index = 0;
	
	while(str[index] != 0)
     4c4:	f8 01       	movw	r30, r16
     4c6:	ec 0f       	add	r30, r28
     4c8:	f1 1d       	adc	r31, r1
     4ca:	80 81       	ld	r24, Z
     4cc:	81 11       	cpse	r24, r1
     4ce:	f6 cf       	rjmp	.-20     	; 0x4bc <sendString+0xc>
	{
		send_command(str[index], 1);
		index++;
	}
}
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <sendChar>:

void sendChar(char c)
{
	send_command(c, 1);
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	0e 94 0d 02 	call	0x41a	; 0x41a <send_command>
     4de:	08 95       	ret

000004e0 <LCD_clear>:
}

// limpa o display e retorna o cursor para o início
void LCD_clear()
{
	send_command(0x01, 0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 0d 02 	call	0x41a	; 0x41a <send_command>
	delay_clear();
     4e8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <delay_clear>
     4ec:	08 95       	ret

000004ee <LCD_print2lines>:
{
	send_command(c, 1);
}

void LCD_print2lines(char *line1, char *line2)
{
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	8c 01       	movw	r16, r24
     4f8:	eb 01       	movw	r28, r22
	LCD_clear();
     4fa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
	sendString(line1);
     4fe:	c8 01       	movw	r24, r16
     500:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
	send_command(0xC0,0);
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	80 ec       	ldi	r24, 0xC0	; 192
     508:	0e 94 0d 02 	call	0x41a	; 0x41a <send_command>
	sendString(line2);
     50c:	ce 01       	movw	r24, r28
     50e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
}
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <main>:
#include "header.h"

int main(void)
{
	MICPAY_init();
     51c:	0e 94 62 00 	call	0xc4	; 0xc4 <MICPAY_init>
	LCD_init();
     520:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_init>
	VAR_init();
     524:	0e 94 96 00 	call	0x12c	; 0x12c <VAR_init>
	
	char c;
	STATE=12;
     528:	8c e0       	ldi	r24, 0x0C	; 12
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     530:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
	
	/* Replace with your application code */
    while (1) 
    {
        switch(STATE)
     534:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <STATE>
     538:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <STATE+0x1>
     53c:	ef 30       	cpi	r30, 0x0F	; 15
     53e:	f1 05       	cpc	r31, r1
     540:	c8 f7       	brcc	.-14     	; 0x534 <main+0x18>
     542:	ec 5c       	subi	r30, 0xCC	; 204
     544:	ff 4f       	sbci	r31, 0xFF	; 255
     546:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__tablejump2__>
        {
	        case 0: //espera a máquina ser ligada
				LCD_clear();
     54a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
				sendString("OFF");
     54e:	8c e0       	ldi	r24, 0x0C	; 12
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
				c = keyboard_input();
     556:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
				
				if(c == '#')
     55a:	83 32       	cpi	r24, 0x23	; 35
     55c:	59 f7       	brne	.-42     	; 0x534 <main+0x18>
				{
					STATE = maquina_on_off(1);
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 0d 03 	call	0x61a	; 0x61a <maquina_on_off>
     564:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     568:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
     56c:	e3 cf       	rjmp	.-58     	; 0x534 <main+0x18>
				}
			break;
			
	        case 1: //espera pela senha de usuário
				STATE = read_user_password();
     56e:	0e 94 8c 03 	call	0x718	; 0x718 <read_user_password>
     572:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     576:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
	        break;
     57a:	dc cf       	rjmp	.-72     	; 0x534 <main+0x18>
			
	        case 2: //tela para selecionar a função operador
				LCD_print2lines("1-A Vista 2-A","Prazo 3-Estorno");
     57c:	60 e1       	ldi	r22, 0x10	; 16
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	80 e2       	ldi	r24, 0x20	; 32
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
				STATE = select_mode();
     588:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <select_mode>
     58c:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     590:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
	        break;
     594:	cf cf       	rjmp	.-98     	; 0x534 <main+0x18>
			
	        case 3: //tela de admin
				read_mode_adm();
     596:	0e 94 30 07 	call	0xe60	; 0xe60 <read_mode_adm>
	        break;
     59a:	cc cf       	rjmp	.-104    	; 0x534 <main+0x18>
			
	        case 4: //modo pagamento a vista
				read_price();
     59c:	0e 94 47 04 	call	0x88e	; 0x88e <read_price>
				STATE = 10;
     5a0:	8a e0       	ldi	r24, 0x0A	; 10
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     5a8:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
	        break;
     5ac:	c3 cf       	rjmp	.-122    	; 0x534 <main+0x18>
			
	        case 5: //modo pagamento parcelado
				read_price();
     5ae:	0e 94 47 04 	call	0x88e	; 0x88e <read_price>
				STATE = 9;
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     5ba:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
	        break;
     5be:	ba cf       	rjmp	.-140    	; 0x534 <main+0x18>
			
	        case 6: //modo estorno
				read_price();
     5c0:	0e 94 47 04 	call	0x88e	; 0x88e <read_price>
				//entrada numero cartao
				insere_cartao();
     5c4:	0e 94 d6 05 	call	0xbac	; 0xbac <insere_cartao>
	        break;
     5c8:	b5 cf       	rjmp	.-150    	; 0x534 <main+0x18>
			
			case 7://Confirmacao Operador
				confirma_senha_op();
     5ca:	0e 94 24 06 	call	0xc48	; 0xc48 <confirma_senha_op>
			break;
     5ce:	b2 cf       	rjmp	.-156    	; 0x534 <main+0x18>
			
			case 8: //entrada senha cartao
				senha_cartao();
     5d0:	0e 94 a8 06 	call	0xd50	; 0xd50 <senha_cartao>
			break;
     5d4:	af cf       	rjmp	.-162    	; 0x534 <main+0x18>
			
			case 9: //numero de parcelas
				numero_parcelas();
     5d6:	0e 94 9a 05 	call	0xb34	; 0xb34 <numero_parcelas>
				//entrada numero cartao
				insere_cartao();
     5da:	0e 94 d6 05 	call	0xbac	; 0xbac <insere_cartao>
			break;
     5de:	aa cf       	rjmp	.-172    	; 0x534 <main+0x18>
			
			case 10: //débito ou credito
				debit_or_credit();
     5e0:	0e 94 5e 05 	call	0xabc	; 0xabc <debit_or_credit>
				//entrada numero cartao
				insere_cartao();
     5e4:	0e 94 d6 05 	call	0xbac	; 0xbac <insere_cartao>
			break;
     5e8:	a5 cf       	rjmp	.-182    	; 0x534 <main+0x18>
			
			case 11:
				en_dis_op();
     5ea:	0e 94 af 07 	call	0xf5e	; 0xf5e <en_dis_op>
			break;
     5ee:	a2 cf       	rjmp	.-188    	; 0x534 <main+0x18>
			
			case 12: //Alterar data e hora
				STATE = altera_hora();
     5f0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <altera_hora>
     5f4:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     5f8:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
			break;
     5fc:	9b cf       	rjmp	.-202    	; 0x534 <main+0x18>
			
			case 13: //Pendencias
				LCD_print2lines("estado","13");
     5fe:	6e e2       	ldi	r22, 0x2E	; 46
     600:	71 e0       	ldi	r23, 0x01	; 1
     602:	81 e3       	ldi	r24, 0x31	; 49
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     60a:	ff cf       	rjmp	.-2      	; 0x60a <main+0xee>
				while(1);
			break;
			
			case 14: //Limpa pendencias
				LCD_print2lines("estado","14");
     60c:	68 e3       	ldi	r22, 0x38	; 56
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	81 e3       	ldi	r24, 0x31	; 49
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     618:	ff cf       	rjmp	.-2      	; 0x618 <main+0xfc>

0000061a <maquina_on_off>:
	}
}


void relatorio_do_dia() 
{
     61a:	81 11       	cpse	r24, r1
     61c:	03 c0       	rjmp	.+6      	; 0x624 <maquina_on_off+0xa>
     61e:	0e 94 18 0c 	call	0x1830	; 0x1830 <press_cancel>
     622:	08 95       	ret
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	19 f4       	brne	.+6      	; 0x62e <maquina_on_off+0x14>
     628:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <press_confirm>
     62c:	08 95       	ret
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	08 95       	ret

00000634 <read_pass>:
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	8c 01       	movw	r16, r24
     640:	06 97       	sbiw	r24, 0x06	; 6
     642:	b9 f4       	brne	.+46     	; 0x672 <read_pass+0x3e>
     644:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <STATE>
     648:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <STATE+0x1>
     64c:	86 30       	cpi	r24, 0x06	; 6
     64e:	91 05       	cpc	r25, r1
     650:	29 f0       	breq	.+10     	; 0x65c <read_pass+0x28>
     652:	8a 30       	cpi	r24, 0x0A	; 10
     654:	91 05       	cpc	r25, r1
     656:	11 f0       	breq	.+4      	; 0x65c <read_pass+0x28>
     658:	09 97       	sbiw	r24, 0x09	; 9
     65a:	59 f4       	brne	.+22     	; 0x672 <read_pass+0x3e>
     65c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     660:	6b e3       	ldi	r22, 0x3B	; 59
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	84 e4       	ldi	r24, 0x44	; 68
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     66c:	e1 2c       	mov	r14, r1
     66e:	f1 2c       	mov	r15, r1
     670:	49 c0       	rjmp	.+146    	; 0x704 <read_pass+0xd0>
     672:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     676:	6e e4       	ldi	r22, 0x4E	; 78
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	86 e5       	ldi	r24, 0x56	; 86
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     682:	f4 cf       	rjmp	.-24     	; 0x66c <read_pass+0x38>
     684:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     688:	c8 2f       	mov	r28, r24
     68a:	8a 32       	cpi	r24, 0x2A	; 42
     68c:	d9 f1       	breq	.+118    	; 0x704 <read_pass+0xd0>
     68e:	83 32       	cpi	r24, 0x23	; 35
     690:	c9 f1       	breq	.+114    	; 0x704 <read_pass+0xd0>
     692:	04 30       	cpi	r16, 0x04	; 4
     694:	11 05       	cpc	r17, r1
     696:	51 f4       	brne	.+20     	; 0x6ac <read_pass+0x78>
     698:	f7 01       	movw	r30, r14
     69a:	e4 58       	subi	r30, 0x84	; 132
     69c:	fb 4f       	sbci	r31, 0xFB	; 251
     69e:	80 83       	st	Z, r24
     6a0:	8a e2       	ldi	r24, 0x2A	; 42
     6a2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	e8 1a       	sub	r14, r24
     6aa:	f8 0a       	sbc	r15, r24
     6ac:	06 30       	cpi	r16, 0x06	; 6
     6ae:	11 05       	cpc	r17, r1
     6b0:	b1 f4       	brne	.+44     	; 0x6de <read_pass+0xaa>
     6b2:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <STATE>
     6b6:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <STATE+0x1>
     6ba:	86 30       	cpi	r24, 0x06	; 6
     6bc:	91 05       	cpc	r25, r1
     6be:	29 f0       	breq	.+10     	; 0x6ca <read_pass+0x96>
     6c0:	8a 30       	cpi	r24, 0x0A	; 10
     6c2:	91 05       	cpc	r25, r1
     6c4:	11 f0       	breq	.+4      	; 0x6ca <read_pass+0x96>
     6c6:	09 97       	sbiw	r24, 0x09	; 9
     6c8:	51 f4       	brne	.+20     	; 0x6de <read_pass+0xaa>
     6ca:	f7 01       	movw	r30, r14
     6cc:	e9 55       	subi	r30, 0x59	; 89
     6ce:	fb 4f       	sbci	r31, 0xFB	; 251
     6d0:	c0 83       	st	Z, r28
     6d2:	8c 2f       	mov	r24, r28
     6d4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	e8 1a       	sub	r14, r24
     6dc:	f8 0a       	sbc	r15, r24
     6de:	06 30       	cpi	r16, 0x06	; 6
     6e0:	11 05       	cpc	r17, r1
     6e2:	81 f4       	brne	.+32     	; 0x704 <read_pass+0xd0>
     6e4:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <STATE>
     6e8:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <STATE+0x1>
     6ec:	08 97       	sbiw	r24, 0x08	; 8
     6ee:	51 f4       	brne	.+20     	; 0x704 <read_pass+0xd0>
     6f0:	f7 01       	movw	r30, r14
     6f2:	e7 56       	subi	r30, 0x67	; 103
     6f4:	fb 4f       	sbci	r31, 0xFB	; 251
     6f6:	c0 83       	st	Z, r28
     6f8:	8a e2       	ldi	r24, 0x2A	; 42
     6fa:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	e8 1a       	sub	r14, r24
     702:	f8 0a       	sbc	r15, r24
     704:	e0 16       	cp	r14, r16
     706:	f1 06       	cpc	r15, r17
     708:	0c f4       	brge	.+2      	; 0x70c <read_pass+0xd8>
     70a:	bc cf       	rjmp	.-136    	; 0x684 <read_pass+0x50>
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	08 95       	ret

00000718 <read_user_password>:
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 1a 03 	call	0x634	; 0x634 <read_pass>
     720:	5c c0       	rjmp	.+184    	; 0x7da <read_user_password+0xc2>
     722:	65 e6       	ldi	r22, 0x65	; 101
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	8c e7       	ldi	r24, 0x7C	; 124
     728:	94 e0       	ldi	r25, 0x04	; 4
     72a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     72e:	89 2b       	or	r24, r25
     730:	c1 f4       	brne	.+48     	; 0x762 <read_user_password+0x4a>
     732:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <operador1+0x6>
     736:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <operador1+0x7>
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	49 f4       	brne	.+18     	; 0x750 <read_user_password+0x38>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <OP+0x1>
     746:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <OP>
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	08 95       	ret
     750:	6a e6       	ldi	r22, 0x6A	; 106
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	87 e7       	ldi	r24, 0x77	; 119
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     75c:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     760:	3c c0       	rjmp	.+120    	; 0x7da <read_user_password+0xc2>
     762:	67 e8       	ldi	r22, 0x87	; 135
     764:	71 e0       	ldi	r23, 0x01	; 1
     766:	8c e7       	ldi	r24, 0x7C	; 124
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     76e:	89 2b       	or	r24, r25
     770:	c9 f4       	brne	.+50     	; 0x7a4 <read_user_password+0x8c>
     772:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <operador2+0x6>
     776:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <operador2+0x7>
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	91 05       	cpc	r25, r1
     77e:	91 f4       	brne	.+36     	; 0x7a4 <read_user_password+0x8c>
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	39 f4       	brne	.+14     	; 0x792 <read_user_password+0x7a>
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <OP+0x1>
     78c:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <OP>
     790:	08 95       	ret
     792:	6a e6       	ldi	r22, 0x6A	; 106
     794:	71 e0       	ldi	r23, 0x01	; 1
     796:	8c e8       	ldi	r24, 0x8C	; 140
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     79e:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     7a2:	1b c0       	rjmp	.+54     	; 0x7da <read_user_password+0xc2>
     7a4:	6c e9       	ldi	r22, 0x9C	; 156
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	8c e7       	ldi	r24, 0x7C	; 124
     7aa:	94 e0       	ldi	r25, 0x04	; 4
     7ac:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     7b0:	89 2b       	or	r24, r25
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_user_password+0xaa>
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <OP+0x1>
     7bc:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <OP>
     7c0:	08 95       	ret
     7c2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     7c6:	81 ea       	ldi	r24, 0xA1	; 161
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
     7ce:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 1a 03 	call	0x634	; 0x634 <read_pass>
     7da:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     7de:	83 32       	cpi	r24, 0x23	; 35
     7e0:	e1 f7       	brne	.-8      	; 0x7da <read_user_password+0xc2>
     7e2:	9f cf       	rjmp	.-194    	; 0x722 <read_user_password+0xa>

000007e4 <select_mode>:
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	e1 2c       	mov	r14, r1
     7f0:	f1 2c       	mov	r15, r1
     7f2:	00 e0       	ldi	r16, 0x00	; 0
     7f4:	10 e0       	ldi	r17, 0x00	; 0
     7f6:	40 c0       	rjmp	.+128    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     7f8:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     7fc:	c8 2f       	mov	r28, r24
     7fe:	8a 32       	cpi	r24, 0x2A	; 42
     800:	49 f4       	brne	.+18     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	0e 94 0d 03 	call	0x61a	; 0x61a <maquina_on_off>
     808:	89 2b       	or	r24, r25
     80a:	21 f0       	breq	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     80c:	e1 2c       	mov	r14, r1
     80e:	f1 2c       	mov	r15, r1
     810:	01 e0       	ldi	r16, 0x01	; 1
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	c1 33       	cpi	r28, 0x31	; 49
     816:	71 f4       	brne	.+28     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     818:	61 eb       	ldi	r22, 0xB1	; 177
     81a:	71 e0       	ldi	r23, 0x01	; 1
     81c:	89 eb       	ldi	r24, 0xB9	; 185
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     824:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     828:	68 94       	set
     82a:	ee 24       	eor	r14, r14
     82c:	e2 f8       	bld	r14, 2
     82e:	f1 2c       	mov	r15, r1
     830:	01 e0       	ldi	r16, 0x01	; 1
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	c2 33       	cpi	r28, 0x32	; 50
     836:	79 f4       	brne	.+30     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     838:	65 ec       	ldi	r22, 0xC5	; 197
     83a:	71 e0       	ldi	r23, 0x01	; 1
     83c:	89 eb       	ldi	r24, 0xB9	; 185
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     844:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     848:	0f 2e       	mov	r0, r31
     84a:	f5 e0       	ldi	r31, 0x05	; 5
     84c:	ef 2e       	mov	r14, r31
     84e:	f1 2c       	mov	r15, r1
     850:	f0 2d       	mov	r31, r0
     852:	01 e0       	ldi	r16, 0x01	; 1
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	c3 33       	cpi	r28, 0x33	; 51
     858:	79 f4       	brne	.+30     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     85a:	68 e1       	ldi	r22, 0x18	; 24
     85c:	71 e0       	ldi	r23, 0x01	; 1
     85e:	89 eb       	ldi	r24, 0xB9	; 185
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     866:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     86a:	01 e0       	ldi	r16, 0x01	; 1
     86c:	10 e0       	ldi	r17, 0x00	; 0
     86e:	0f 2e       	mov	r0, r31
     870:	f6 e0       	ldi	r31, 0x06	; 6
     872:	ef 2e       	mov	r14, r31
     874:	f1 2c       	mov	r15, r1
     876:	f0 2d       	mov	r31, r0
     878:	01 15       	cp	r16, r1
     87a:	11 05       	cpc	r17, r1
     87c:	09 f4       	brne	.+2      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     87e:	bc cf       	rjmp	.-136    	; 0x7f8 <select_mode+0x14>
     880:	c7 01       	movw	r24, r14
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret

0000088e <read_price>:
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	2c 97       	sbiw	r28, 0x0c	; 12
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	19 82       	std	Y+1, r1	; 0x01
     8a8:	1a 82       	std	Y+2, r1	; 0x02
     8aa:	1b 82       	std	Y+3, r1	; 0x03
     8ac:	1c 82       	std	Y+4, r1	; 0x04
     8ae:	fe 01       	movw	r30, r28
     8b0:	35 96       	adiw	r30, 0x05	; 5
     8b2:	88 e0       	ldi	r24, 0x08	; 8
     8b4:	df 01       	movw	r26, r30
     8b6:	1d 92       	st	X+, r1
     8b8:	8a 95       	dec	r24
     8ba:	e9 f7       	brne	.-6      	; 0x8b6 <read_price+0x28>
     8bc:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     8c0:	6d ec       	ldi	r22, 0xCD	; 205
     8c2:	71 e0       	ldi	r23, 0x01	; 1
     8c4:	8b ed       	ldi	r24, 0xDB	; 219
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     8cc:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     8d0:	89 83       	std	Y+1, r24	; 0x01
     8d2:	00 e0       	ldi	r16, 0x00	; 0
     8d4:	10 e0       	ldi	r17, 0x00	; 0
     8d6:	86 c0       	rjmp	.+268    	; 0x9e4 <__stack+0xe5>
     8d8:	83 32       	cpi	r24, 0x23	; 35
     8da:	09 f4       	brne	.+2      	; 0x8de <read_price+0x50>
     8dc:	83 c0       	rjmp	.+262    	; 0x9e4 <__stack+0xe5>
     8de:	01 30       	cpi	r16, 0x01	; 1
     8e0:	11 05       	cpc	r17, r1
     8e2:	21 f1       	breq	.+72     	; 0x92c <__stack+0x2d>
     8e4:	24 f4       	brge	.+8      	; 0x8ee <read_price+0x60>
     8e6:	01 15       	cp	r16, r1
     8e8:	11 05       	cpc	r17, r1
     8ea:	49 f0       	breq	.+18     	; 0x8fe <read_price+0x70>
     8ec:	7b c0       	rjmp	.+246    	; 0x9e4 <__stack+0xe5>
     8ee:	02 30       	cpi	r16, 0x02	; 2
     8f0:	11 05       	cpc	r17, r1
     8f2:	b1 f1       	breq	.+108    	; 0x960 <__stack+0x61>
     8f4:	03 30       	cpi	r16, 0x03	; 3
     8f6:	11 05       	cpc	r17, r1
     8f8:	09 f4       	brne	.+2      	; 0x8fc <read_price+0x6e>
     8fa:	52 c0       	rjmp	.+164    	; 0x9a0 <__stack+0xa1>
     8fc:	73 c0       	rjmp	.+230    	; 0x9e4 <__stack+0xe5>
     8fe:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     902:	6d ec       	ldi	r22, 0xCD	; 205
     904:	71 e0       	ldi	r23, 0x01	; 1
     906:	8b ed       	ldi	r24, 0xDB	; 219
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     914:	0f 5f       	subi	r16, 0xFF	; 255
     916:	1f 4f       	sbci	r17, 0xFF	; 255
     918:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     91c:	e1 e0       	ldi	r30, 0x01	; 1
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	ec 0f       	add	r30, r28
     922:	fd 1f       	adc	r31, r29
     924:	e0 0f       	add	r30, r16
     926:	f1 1f       	adc	r31, r17
     928:	80 83       	st	Z, r24
     92a:	5c c0       	rjmp	.+184    	; 0x9e4 <__stack+0xe5>
     92c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     930:	6a ee       	ldi	r22, 0xEA	; 234
     932:	71 e0       	ldi	r23, 0x01	; 1
     934:	8b ed       	ldi	r24, 0xDB	; 219
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     948:	0f 5f       	subi	r16, 0xFF	; 255
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     950:	e1 e0       	ldi	r30, 0x01	; 1
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	ec 0f       	add	r30, r28
     956:	fd 1f       	adc	r31, r29
     958:	e0 0f       	add	r30, r16
     95a:	f1 1f       	adc	r31, r17
     95c:	80 83       	st	Z, r24
     95e:	42 c0       	rjmp	.+132    	; 0x9e4 <__stack+0xe5>
     960:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     964:	67 ef       	ldi	r22, 0xF7	; 247
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	8b ed       	ldi	r24, 0xDB	; 219
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     976:	8c e2       	ldi	r24, 0x2C	; 44
     978:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     988:	0f 5f       	subi	r16, 0xFF	; 255
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
     98c:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     990:	e1 e0       	ldi	r30, 0x01	; 1
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	ec 0f       	add	r30, r28
     996:	fd 1f       	adc	r31, r29
     998:	e0 0f       	add	r30, r16
     99a:	f1 1f       	adc	r31, r17
     99c:	80 83       	st	Z, r24
     99e:	22 c0       	rjmp	.+68     	; 0x9e4 <__stack+0xe5>
     9a0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     9a4:	62 e0       	ldi	r22, 0x02	; 2
     9a6:	72 e0       	ldi	r23, 0x02	; 2
     9a8:	8b ed       	ldi	r24, 0xDB	; 219
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     9b6:	8a 81       	ldd	r24, Y+2	; 0x02
     9b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     9bc:	8c e2       	ldi	r24, 0x2C	; 44
     9be:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     9c8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ca:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
     9ce:	0f 5f       	subi	r16, 0xFF	; 255
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     9d6:	e1 e0       	ldi	r30, 0x01	; 1
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ec 0f       	add	r30, r28
     9dc:	fd 1f       	adc	r31, r29
     9de:	e0 0f       	add	r30, r16
     9e0:	f1 1f       	adc	r31, r17
     9e2:	80 83       	st	Z, r24
     9e4:	e1 e0       	ldi	r30, 0x01	; 1
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	ec 0f       	add	r30, r28
     9ea:	fd 1f       	adc	r31, r29
     9ec:	e0 0f       	add	r30, r16
     9ee:	f1 1f       	adc	r31, r17
     9f0:	80 81       	ld	r24, Z
     9f2:	83 32       	cpi	r24, 0x23	; 35
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <__stack+0xf9>
     9f6:	70 cf       	rjmp	.-288    	; 0x8d8 <read_price+0x4a>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	16 c0       	rjmp	.+44     	; 0xa2a <__stack+0x12b>
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	ec 0f       	add	r30, r28
     a04:	fd 1f       	adc	r31, r29
     a06:	e2 0f       	add	r30, r18
     a08:	f3 1f       	adc	r31, r19
     a0a:	80 81       	ld	r24, Z
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	c0 97       	sbiw	r24, 0x30	; 48
     a10:	f9 01       	movw	r30, r18
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	41 e0       	ldi	r20, 0x01	; 1
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	4c 0f       	add	r20, r28
     a1c:	5d 1f       	adc	r21, r29
     a1e:	e4 0f       	add	r30, r20
     a20:	f5 1f       	adc	r31, r21
     a22:	95 83       	std	Z+5, r25	; 0x05
     a24:	84 83       	std	Z+4, r24	; 0x04
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	24 30       	cpi	r18, 0x04	; 4
     a2c:	31 05       	cpc	r19, r1
     a2e:	3c f3       	brlt	.-50     	; 0x9fe <__stack+0xff>
     a30:	8d 85       	ldd	r24, Y+13	; 0x0d
     a32:	9e 85       	ldd	r25, Y+14	; 0x0e
     a34:	24 e6       	ldi	r18, 0x64	; 100
     a36:	28 9f       	mul	r18, r24
     a38:	b0 01       	movw	r22, r0
     a3a:	29 9f       	mul	r18, r25
     a3c:	70 0d       	add	r23, r0
     a3e:	11 24       	eor	r1, r1
     a40:	8b 85       	ldd	r24, Y+11	; 0x0b
     a42:	9c 85       	ldd	r25, Y+12	; 0x0c
     a44:	ac 01       	movw	r20, r24
     a46:	44 0f       	add	r20, r20
     a48:	55 1f       	adc	r21, r21
     a4a:	9c 01       	movw	r18, r24
     a4c:	22 0f       	add	r18, r18
     a4e:	33 1f       	adc	r19, r19
     a50:	22 0f       	add	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	22 0f       	add	r18, r18
     a56:	33 1f       	adc	r19, r19
     a58:	ca 01       	movw	r24, r20
     a5a:	82 0f       	add	r24, r18
     a5c:	93 1f       	adc	r25, r19
     a5e:	86 0f       	add	r24, r22
     a60:	97 1f       	adc	r25, r23
     a62:	29 85       	ldd	r18, Y+9	; 0x09
     a64:	3a 85       	ldd	r19, Y+10	; 0x0a
     a66:	28 0f       	add	r18, r24
     a68:	39 1f       	adc	r19, r25
     a6a:	8f 81       	ldd	r24, Y+7	; 0x07
     a6c:	98 85       	ldd	r25, Y+8	; 0x08
     a6e:	6a e0       	ldi	r22, 0x0A	; 10
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
     a76:	26 0f       	add	r18, r22
     a78:	37 1f       	adc	r19, r23
     a7a:	8d 81       	ldd	r24, Y+5	; 0x05
     a7c:	9e 81       	ldd	r25, Y+6	; 0x06
     a7e:	64 e6       	ldi	r22, 0x64	; 100
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
     a86:	62 0f       	add	r22, r18
     a88:	73 1f       	adc	r23, r19
     a8a:	07 2e       	mov	r0, r23
     a8c:	00 0c       	add	r0, r0
     a8e:	88 0b       	sbc	r24, r24
     a90:	99 0b       	sbc	r25, r25
     a92:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__floatsisf>
     a96:	60 93 8f 04 	sts	0x048F, r22	; 0x80048f <PAYMENT_VALUE>
     a9a:	70 93 90 04 	sts	0x0490, r23	; 0x800490 <PAYMENT_VALUE+0x1>
     a9e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <PAYMENT_VALUE+0x2>
     aa2:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <PAYMENT_VALUE+0x3>
     aa6:	2c 96       	adiw	r28, 0x0c	; 12
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <debit_or_credit>:
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     ac6:	6c e0       	ldi	r22, 0x0C	; 12
     ac8:	72 e0       	ldi	r23, 0x02	; 2
     aca:	88 e1       	ldi	r24, 0x18	; 24
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     ad2:	00 e0       	ldi	r16, 0x00	; 0
     ad4:	10 e0       	ldi	r17, 0x00	; 0
     ad6:	27 c0       	rjmp	.+78     	; 0xb26 <debit_or_credit+0x6a>
     ad8:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     adc:	c8 2f       	mov	r28, r24
     ade:	81 33       	cpi	r24, 0x31	; 49
     ae0:	81 f4       	brne	.+32     	; 0xb02 <debit_or_credit+0x46>
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <OP_PAGAMENTO+0x1>
     aea:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <OP_PAGAMENTO>
     aee:	6c e1       	ldi	r22, 0x1C	; 28
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	83 e2       	ldi	r24, 0x23	; 35
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     afa:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     afe:	01 e0       	ldi	r16, 0x01	; 1
     b00:	10 e0       	ldi	r17, 0x00	; 0
     b02:	c2 33       	cpi	r28, 0x32	; 50
     b04:	81 f4       	brne	.+32     	; 0xb26 <debit_or_credit+0x6a>
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <OP_PAGAMENTO+0x1>
     b0e:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <OP_PAGAMENTO>
     b12:	60 e1       	ldi	r22, 0x10	; 16
     b14:	72 e0       	ldi	r23, 0x02	; 2
     b16:	83 e2       	ldi	r24, 0x23	; 35
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     b1e:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     b22:	01 e0       	ldi	r16, 0x01	; 1
     b24:	10 e0       	ldi	r17, 0x00	; 0
     b26:	01 15       	cp	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	b1 f2       	breq	.-84     	; 0xad8 <debit_or_credit+0x1c>
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <numero_parcelas>:
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     b3e:	60 e3       	ldi	r22, 0x30	; 48
     b40:	72 e0       	ldi	r23, 0x02	; 2
     b42:	88 e3       	ldi	r24, 0x38	; 56
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     b4a:	00 e0       	ldi	r16, 0x00	; 0
     b4c:	10 e0       	ldi	r17, 0x00	; 0
     b4e:	27 c0       	rjmp	.+78     	; 0xb9e <numero_parcelas+0x6a>
     b50:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     b54:	c8 2f       	mov	r28, r24
     b56:	82 33       	cpi	r24, 0x32	; 50
     b58:	81 f4       	brne	.+32     	; 0xb7a <numero_parcelas+0x46>
     b5a:	61 e4       	ldi	r22, 0x41	; 65
     b5c:	72 e0       	ldi	r23, 0x02	; 2
     b5e:	83 e2       	ldi	r24, 0x23	; 35
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     b66:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <__data_end+0x1>
     b72:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <__data_end>
     b76:	01 e0       	ldi	r16, 0x01	; 1
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	c3 33       	cpi	r28, 0x33	; 51
     b7c:	81 f4       	brne	.+32     	; 0xb9e <numero_parcelas+0x6a>
     b7e:	69 e4       	ldi	r22, 0x49	; 73
     b80:	72 e0       	ldi	r23, 0x02	; 2
     b82:	83 e2       	ldi	r24, 0x23	; 35
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     b8a:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <__data_end+0x1>
     b96:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <__data_end>
     b9a:	01 e0       	ldi	r16, 0x01	; 1
     b9c:	10 e0       	ldi	r17, 0x00	; 0
     b9e:	01 15       	cp	r16, r1
     ba0:	11 05       	cpc	r17, r1
     ba2:	b1 f2       	breq	.-84     	; 0xb50 <numero_parcelas+0x1c>
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <insere_cartao>:
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	86 e0       	ldi	r24, 0x06	; 6
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 1a 03 	call	0x634	; 0x634 <read_pass>
     bb8:	c0 e0       	ldi	r28, 0x00	; 0
     bba:	d0 e0       	ldi	r29, 0x00	; 0
     bbc:	3f c0       	rjmp	.+126    	; 0xc3c <insere_cartao+0x90>
     bbe:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     bc2:	83 32       	cpi	r24, 0x23	; 35
     bc4:	d9 f5       	brne	.+118    	; 0xc3c <insere_cartao+0x90>
     bc6:	61 e5       	ldi	r22, 0x51	; 81
     bc8:	72 e0       	ldi	r23, 0x02	; 2
     bca:	87 ea       	ldi	r24, 0xA7	; 167
     bcc:	94 e0       	ldi	r25, 0x04	; 4
     bce:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     bd2:	89 2b       	or	r24, r25
     bd4:	41 f0       	breq	.+16     	; 0xbe6 <insere_cartao+0x3a>
     bd6:	68 e5       	ldi	r22, 0x58	; 88
     bd8:	72 e0       	ldi	r23, 0x02	; 2
     bda:	87 ea       	ldi	r24, 0xA7	; 167
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     be2:	89 2b       	or	r24, r25
     be4:	e1 f4       	brne	.+56     	; 0xc1e <insere_cartao+0x72>
     be6:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <STATE>
     bea:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <STATE+0x1>
     bee:	09 97       	sbiw	r24, 0x09	; 9
     bf0:	02 97       	sbiw	r24, 0x02	; 2
     bf2:	30 f4       	brcc	.+12     	; 0xc00 <insere_cartao+0x54>
     bf4:	88 e0       	ldi	r24, 0x08	; 8
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     bfc:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
     c00:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <STATE>
     c04:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <STATE+0x1>
     c08:	06 97       	sbiw	r24, 0x06	; 6
     c0a:	b1 f4       	brne	.+44     	; 0xc38 <insere_cartao+0x8c>
     c0c:	87 e0       	ldi	r24, 0x07	; 7
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     c14:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
     c18:	c1 e0       	ldi	r28, 0x01	; 1
     c1a:	d0 e0       	ldi	r29, 0x00	; 0
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <insere_cartao+0x90>
     c1e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     c22:	8f e5       	ldi	r24, 0x5F	; 95
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
     c2a:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 1a 03 	call	0x634	; 0x634 <read_pass>
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <insere_cartao+0x90>
     c38:	c1 e0       	ldi	r28, 0x01	; 1
     c3a:	d0 e0       	ldi	r29, 0x00	; 0
     c3c:	20 97       	sbiw	r28, 0x00	; 0
     c3e:	09 f4       	brne	.+2      	; 0xc42 <insere_cartao+0x96>
     c40:	be cf       	rjmp	.-132    	; 0xbbe <insere_cartao+0x12>
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <confirma_senha_op>:
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     c54:	6f e6       	ldi	r22, 0x6F	; 111
     c56:	72 e0       	ldi	r23, 0x02	; 2
     c58:	8a e7       	ldi	r24, 0x7A	; 122
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     c60:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 1a 03 	call	0x634	; 0x634 <read_pass>
     c6c:	c0 e0       	ldi	r28, 0x00	; 0
     c6e:	d0 e0       	ldi	r29, 0x00	; 0
     c70:	59 c0       	rjmp	.+178    	; 0xd24 <confirma_senha_op+0xdc>
     c72:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     c76:	83 32       	cpi	r24, 0x23	; 35
     c78:	09 f0       	breq	.+2      	; 0xc7c <confirma_senha_op+0x34>
     c7a:	54 c0       	rjmp	.+168    	; 0xd24 <confirma_senha_op+0xdc>
     c7c:	00 91 8b 04 	lds	r16, 0x048B	; 0x80048b <OP>
     c80:	10 91 8c 04 	lds	r17, 0x048C	; 0x80048c <OP+0x1>
     c84:	01 30       	cpi	r16, 0x01	; 1
     c86:	11 05       	cpc	r17, r1
     c88:	f9 f4       	brne	.+62     	; 0xcc8 <confirma_senha_op+0x80>
     c8a:	65 e6       	ldi	r22, 0x65	; 101
     c8c:	71 e0       	ldi	r23, 0x01	; 1
     c8e:	8c e7       	ldi	r24, 0x7C	; 124
     c90:	94 e0       	ldi	r25, 0x04	; 4
     c92:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     c96:	89 2b       	or	r24, r25
     c98:	b9 f4       	brne	.+46     	; 0xcc8 <confirma_senha_op+0x80>
     c9a:	cf e9       	ldi	r28, 0x9F	; 159
     c9c:	d4 e0       	ldi	r29, 0x04	; 4
     c9e:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <PAYMENT_VALUE>
     ca2:	30 91 90 04 	lds	r19, 0x0490	; 0x800490 <PAYMENT_VALUE+0x1>
     ca6:	40 91 91 04 	lds	r20, 0x0491	; 0x800491 <PAYMENT_VALUE+0x2>
     caa:	50 91 92 04 	lds	r21, 0x0492	; 0x800492 <PAYMENT_VALUE+0x3>
     cae:	68 81       	ld	r22, Y
     cb0:	79 81       	ldd	r23, Y+1	; 0x01
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	0e 94 af 0c 	call	0x195e	; 0x195e <__subsf3>
     cba:	68 83       	st	Y, r22
     cbc:	79 83       	std	Y+1, r23	; 0x01
     cbe:	8a 83       	std	Y+2, r24	; 0x02
     cc0:	9b 83       	std	Y+3, r25	; 0x03
     cc2:	c1 e0       	ldi	r28, 0x01	; 1
     cc4:	d0 e0       	ldi	r29, 0x00	; 0
     cc6:	2e c0       	rjmp	.+92     	; 0xd24 <confirma_senha_op+0xdc>
     cc8:	02 30       	cpi	r16, 0x02	; 2
     cca:	11 05       	cpc	r17, r1
     ccc:	f9 f4       	brne	.+62     	; 0xd0c <confirma_senha_op+0xc4>
     cce:	67 e8       	ldi	r22, 0x87	; 135
     cd0:	71 e0       	ldi	r23, 0x01	; 1
     cd2:	8c e7       	ldi	r24, 0x7C	; 124
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     cda:	89 2b       	or	r24, r25
     cdc:	b9 f4       	brne	.+46     	; 0xd0c <confirma_senha_op+0xc4>
     cde:	c1 eb       	ldi	r28, 0xB1	; 177
     ce0:	d4 e0       	ldi	r29, 0x04	; 4
     ce2:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <PAYMENT_VALUE>
     ce6:	30 91 90 04 	lds	r19, 0x0490	; 0x800490 <PAYMENT_VALUE+0x1>
     cea:	40 91 91 04 	lds	r20, 0x0491	; 0x800491 <PAYMENT_VALUE+0x2>
     cee:	50 91 92 04 	lds	r21, 0x0492	; 0x800492 <PAYMENT_VALUE+0x3>
     cf2:	68 81       	ld	r22, Y
     cf4:	79 81       	ldd	r23, Y+1	; 0x01
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	0e 94 af 0c 	call	0x195e	; 0x195e <__subsf3>
     cfe:	68 83       	st	Y, r22
     d00:	79 83       	std	Y+1, r23	; 0x01
     d02:	8a 83       	std	Y+2, r24	; 0x02
     d04:	9b 83       	std	Y+3, r25	; 0x03
     d06:	c1 e0       	ldi	r28, 0x01	; 1
     d08:	d0 e0       	ldi	r29, 0x00	; 0
     d0a:	0c c0       	rjmp	.+24     	; 0xd24 <confirma_senha_op+0xdc>
     d0c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     d10:	8d e8       	ldi	r24, 0x8D	; 141
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
     d18:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     d1c:	84 e0       	ldi	r24, 0x04	; 4
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 1a 03 	call	0x634	; 0x634 <read_pass>
     d24:	20 97       	sbiw	r28, 0x00	; 0
     d26:	09 f4       	brne	.+2      	; 0xd2a <confirma_senha_op+0xe2>
     d28:	a4 cf       	rjmp	.-184    	; 0xc72 <confirma_senha_op+0x2a>
     d2a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     d2e:	6c e9       	ldi	r22, 0x9C	; 156
     d30:	72 e0       	ldi	r23, 0x02	; 2
     d32:	89 ea       	ldi	r24, 0xA9	; 169
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     d3a:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     d3e:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <STATE+0x1>
     d42:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <STATE>
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <senha_cartao>:
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	86 e0       	ldi	r24, 0x06	; 6
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 1a 03 	call	0x634	; 0x634 <read_pass>
     d5c:	c0 e0       	ldi	r28, 0x00	; 0
     d5e:	d0 e0       	ldi	r29, 0x00	; 0
     d60:	36 c0       	rjmp	.+108    	; 0xdce <senha_cartao+0x7e>
     d62:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     d66:	83 32       	cpi	r24, 0x23	; 35
     d68:	91 f5       	brne	.+100    	; 0xdce <senha_cartao+0x7e>
     d6a:	61 e5       	ldi	r22, 0x51	; 81
     d6c:	72 e0       	ldi	r23, 0x02	; 2
     d6e:	89 e9       	ldi	r24, 0x99	; 153
     d70:	94 e0       	ldi	r25, 0x04	; 4
     d72:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     d76:	89 2b       	or	r24, r25
     d78:	41 f4       	brne	.+16     	; 0xd8a <senha_cartao+0x3a>
     d7a:	61 e5       	ldi	r22, 0x51	; 81
     d7c:	72 e0       	ldi	r23, 0x02	; 2
     d7e:	87 ea       	ldi	r24, 0xA7	; 167
     d80:	94 e0       	ldi	r25, 0x04	; 4
     d82:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     d86:	89 2b       	or	r24, r25
     d88:	e9 f0       	breq	.+58     	; 0xdc4 <senha_cartao+0x74>
     d8a:	68 e5       	ldi	r22, 0x58	; 88
     d8c:	72 e0       	ldi	r23, 0x02	; 2
     d8e:	89 e9       	ldi	r24, 0x99	; 153
     d90:	94 e0       	ldi	r25, 0x04	; 4
     d92:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     d96:	89 2b       	or	r24, r25
     d98:	41 f4       	brne	.+16     	; 0xdaa <senha_cartao+0x5a>
     d9a:	68 e5       	ldi	r22, 0x58	; 88
     d9c:	72 e0       	ldi	r23, 0x02	; 2
     d9e:	87 ea       	ldi	r24, 0xA7	; 167
     da0:	94 e0       	ldi	r25, 0x04	; 4
     da2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     da6:	89 2b       	or	r24, r25
     da8:	81 f0       	breq	.+32     	; 0xdca <senha_cartao+0x7a>
     daa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     dae:	8d e8       	ldi	r24, 0x8D	; 141
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
     db6:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     dba:	86 e0       	ldi	r24, 0x06	; 6
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 1a 03 	call	0x634	; 0x634 <read_pass>
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <senha_cartao+0x7e>
     dc4:	c1 e0       	ldi	r28, 0x01	; 1
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <senha_cartao+0x7e>
     dca:	c1 e0       	ldi	r28, 0x01	; 1
     dcc:	d0 e0       	ldi	r29, 0x00	; 0
     dce:	20 97       	sbiw	r28, 0x00	; 0
     dd0:	41 f2       	breq	.-112    	; 0xd62 <senha_cartao+0x12>
     dd2:	65 e6       	ldi	r22, 0x65	; 101
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	8c e7       	ldi	r24, 0x7C	; 124
     dd8:	94 e0       	ldi	r25, 0x04	; 4
     dda:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     dde:	89 2b       	or	r24, r25
     de0:	a1 f4       	brne	.+40     	; 0xe0a <senha_cartao+0xba>
     de2:	cf e9       	ldi	r28, 0x9F	; 159
     de4:	d4 e0       	ldi	r29, 0x04	; 4
     de6:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <PAYMENT_VALUE>
     dea:	30 91 90 04 	lds	r19, 0x0490	; 0x800490 <PAYMENT_VALUE+0x1>
     dee:	40 91 91 04 	lds	r20, 0x0491	; 0x800491 <PAYMENT_VALUE+0x2>
     df2:	50 91 92 04 	lds	r21, 0x0492	; 0x800492 <PAYMENT_VALUE+0x3>
     df6:	68 81       	ld	r22, Y
     df8:	79 81       	ldd	r23, Y+1	; 0x01
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	9b 81       	ldd	r25, Y+3	; 0x03
     dfe:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__addsf3>
     e02:	68 83       	st	Y, r22
     e04:	79 83       	std	Y+1, r23	; 0x01
     e06:	8a 83       	std	Y+2, r24	; 0x02
     e08:	9b 83       	std	Y+3, r25	; 0x03
     e0a:	67 e8       	ldi	r22, 0x87	; 135
     e0c:	71 e0       	ldi	r23, 0x01	; 1
     e0e:	8c e7       	ldi	r24, 0x7C	; 124
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <strcmp>
     e16:	89 2b       	or	r24, r25
     e18:	a1 f4       	brne	.+40     	; 0xe42 <senha_cartao+0xf2>
     e1a:	c1 eb       	ldi	r28, 0xB1	; 177
     e1c:	d4 e0       	ldi	r29, 0x04	; 4
     e1e:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <PAYMENT_VALUE>
     e22:	30 91 90 04 	lds	r19, 0x0490	; 0x800490 <PAYMENT_VALUE+0x1>
     e26:	40 91 91 04 	lds	r20, 0x0491	; 0x800491 <PAYMENT_VALUE+0x2>
     e2a:	50 91 92 04 	lds	r21, 0x0492	; 0x800492 <PAYMENT_VALUE+0x3>
     e2e:	68 81       	ld	r22, Y
     e30:	79 81       	ldd	r23, Y+1	; 0x01
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	9b 81       	ldd	r25, Y+3	; 0x03
     e36:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__addsf3>
     e3a:	68 83       	st	Y, r22
     e3c:	79 83       	std	Y+1, r23	; 0x01
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	9b 83       	std	Y+3, r25	; 0x03
     e42:	6b eb       	ldi	r22, 0xBB	; 187
     e44:	72 e0       	ldi	r23, 0x02	; 2
     e46:	85 ec       	ldi	r24, 0xC5	; 197
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     e4e:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     e52:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <STATE+0x1>
     e56:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <STATE>
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <read_mode_adm>:
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     e6a:	6f ec       	ldi	r22, 0xCF	; 207
     e6c:	72 e0       	ldi	r23, 0x02	; 2
     e6e:	8f ed       	ldi	r24, 0xDF	; 223
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     e76:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     e7a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     e7e:	64 ee       	ldi	r22, 0xE4	; 228
     e80:	72 e0       	ldi	r23, 0x02	; 2
     e82:	84 ef       	ldi	r24, 0xF4	; 244
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     e8a:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     e8e:	00 e0       	ldi	r16, 0x00	; 0
     e90:	10 e0       	ldi	r17, 0x00	; 0
     e92:	5d c0       	rjmp	.+186    	; 0xf4e <read_mode_adm+0xee>
     e94:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     e98:	c8 2f       	mov	r28, r24
     e9a:	81 33       	cpi	r24, 0x31	; 49
     e9c:	81 f4       	brne	.+32     	; 0xebe <read_mode_adm+0x5e>
     e9e:	65 e0       	ldi	r22, 0x05	; 5
     ea0:	73 e0       	ldi	r23, 0x03	; 3
     ea2:	80 e1       	ldi	r24, 0x10	; 16
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     eaa:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     eae:	8b e0       	ldi	r24, 0x0B	; 11
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     eb6:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
     eba:	01 e0       	ldi	r16, 0x01	; 1
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	c2 33       	cpi	r28, 0x32	; 50
     ec0:	81 f4       	brne	.+32     	; 0xee2 <read_mode_adm+0x82>
     ec2:	60 e2       	ldi	r22, 0x20	; 32
     ec4:	73 e0       	ldi	r23, 0x03	; 3
     ec6:	83 e2       	ldi	r24, 0x23	; 35
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     ece:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     ed2:	8c e0       	ldi	r24, 0x0C	; 12
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     eda:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
     ede:	01 e0       	ldi	r16, 0x01	; 1
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	c3 33       	cpi	r28, 0x33	; 51
     ee4:	81 f4       	brne	.+32     	; 0xf06 <read_mode_adm+0xa6>
     ee6:	60 e3       	ldi	r22, 0x30	; 48
     ee8:	73 e0       	ldi	r23, 0x03	; 3
     eea:	83 e2       	ldi	r24, 0x23	; 35
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     ef2:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     ef6:	8d e0       	ldi	r24, 0x0D	; 13
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     efe:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
     f02:	01 e0       	ldi	r16, 0x01	; 1
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	c4 33       	cpi	r28, 0x34	; 52
     f08:	81 f4       	brne	.+32     	; 0xf2a <read_mode_adm+0xca>
     f0a:	6b e3       	ldi	r22, 0x3B	; 59
     f0c:	73 e0       	ldi	r23, 0x03	; 3
     f0e:	83 e2       	ldi	r24, 0x23	; 35
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     f16:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     f1a:	8e e0       	ldi	r24, 0x0E	; 14
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     f22:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
     f26:	01 e0       	ldi	r16, 0x01	; 1
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	c5 33       	cpi	r28, 0x35	; 53
     f2c:	81 f4       	brne	.+32     	; 0xf4e <read_mode_adm+0xee>
     f2e:	6a e4       	ldi	r22, 0x4A	; 74
     f30:	73 e0       	ldi	r23, 0x03	; 3
     f32:	83 e2       	ldi	r24, 0x23	; 35
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     f3a:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     f3e:	8f e0       	ldi	r24, 0x0F	; 15
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <STATE+0x1>
     f46:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <STATE>
     f4a:	01 e0       	ldi	r16, 0x01	; 1
     f4c:	10 e0       	ldi	r17, 0x00	; 0
     f4e:	01 15       	cp	r16, r1
     f50:	11 05       	cpc	r17, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <read_mode_adm+0xf6>
     f54:	9f cf       	rjmp	.-194    	; 0xe94 <read_mode_adm+0x34>
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret

00000f5e <en_dis_op>:
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     f6c:	65 e5       	ldi	r22, 0x55	; 85
     f6e:	73 e0       	ldi	r23, 0x03	; 3
     f70:	88 e6       	ldi	r24, 0x68	; 104
     f72:	93 e0       	ldi	r25, 0x03	; 3
     f74:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     f78:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     f7c:	e1 2c       	mov	r14, r1
     f7e:	f1 2c       	mov	r15, r1
     f80:	00 e0       	ldi	r16, 0x00	; 0
     f82:	10 e0       	ldi	r17, 0x00	; 0
     f84:	22 c0       	rjmp	.+68     	; 0xfca <en_dis_op+0x6c>
     f86:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     f8a:	c8 2f       	mov	r28, r24
     f8c:	81 33       	cpi	r24, 0x31	; 49
     f8e:	69 f4       	brne	.+26     	; 0xfaa <en_dis_op+0x4c>
     f90:	63 e7       	ldi	r22, 0x73	; 115
     f92:	73 e0       	ldi	r23, 0x03	; 3
     f94:	83 e2       	ldi	r24, 0x23	; 35
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     f9c:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     fa0:	ee 24       	eor	r14, r14
     fa2:	e3 94       	inc	r14
     fa4:	f1 2c       	mov	r15, r1
     fa6:	01 e0       	ldi	r16, 0x01	; 1
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	c2 33       	cpi	r28, 0x32	; 50
     fac:	71 f4       	brne	.+28     	; 0xfca <en_dis_op+0x6c>
     fae:	6e e7       	ldi	r22, 0x7E	; 126
     fb0:	73 e0       	ldi	r23, 0x03	; 3
     fb2:	83 e2       	ldi	r24, 0x23	; 35
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     fba:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     fbe:	01 e0       	ldi	r16, 0x01	; 1
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	68 94       	set
     fc4:	ee 24       	eor	r14, r14
     fc6:	e1 f8       	bld	r14, 1
     fc8:	f1 2c       	mov	r15, r1
     fca:	01 15       	cp	r16, r1
     fcc:	11 05       	cpc	r17, r1
     fce:	d9 f2       	breq	.-74     	; 0xf86 <en_dis_op+0x28>
     fd0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
     fd4:	69 e8       	ldi	r22, 0x89	; 137
     fd6:	73 e0       	ldi	r23, 0x03	; 3
     fd8:	89 e9       	ldi	r24, 0x99	; 153
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
     fe0:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
     fe4:	53 c0       	rjmp	.+166    	; 0x108c <en_dis_op+0x12e>
     fe6:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
     fea:	c8 2f       	mov	r28, r24
     fec:	81 33       	cpi	r24, 0x31	; 49
     fee:	41 f5       	brne	.+80     	; 0x1040 <en_dis_op+0xe2>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	e8 16       	cp	r14, r24
     ff4:	f1 04       	cpc	r15, r1
     ff6:	81 f4       	brne	.+32     	; 0x1018 <en_dis_op+0xba>
     ff8:	67 ea       	ldi	r22, 0xA7	; 167
     ffa:	73 e0       	ldi	r23, 0x03	; 3
     ffc:	83 e7       	ldi	r24, 0x73	; 115
     ffe:	93 e0       	ldi	r25, 0x03	; 3
    1000:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
    1004:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <operador1+0x7>
    1010:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <operador1+0x6>
    1014:	00 e0       	ldi	r16, 0x00	; 0
    1016:	10 e0       	ldi	r17, 0x00	; 0
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	e8 16       	cp	r14, r24
    101c:	f1 04       	cpc	r15, r1
    101e:	81 f4       	brne	.+32     	; 0x1040 <en_dis_op+0xe2>
    1020:	67 ea       	ldi	r22, 0xA7	; 167
    1022:	73 e0       	ldi	r23, 0x03	; 3
    1024:	8e e7       	ldi	r24, 0x7E	; 126
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
    102c:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <operador2+0x7>
    1038:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <operador2+0x6>
    103c:	00 e0       	ldi	r16, 0x00	; 0
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	c2 33       	cpi	r28, 0x32	; 50
    1042:	21 f5       	brne	.+72     	; 0x108c <en_dis_op+0x12e>
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	e8 16       	cp	r14, r24
    1048:	f1 04       	cpc	r15, r1
    104a:	71 f4       	brne	.+28     	; 0x1068 <en_dis_op+0x10a>
    104c:	62 eb       	ldi	r22, 0xB2	; 178
    104e:	73 e0       	ldi	r23, 0x03	; 3
    1050:	83 e7       	ldi	r24, 0x73	; 115
    1052:	93 e0       	ldi	r25, 0x03	; 3
    1054:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
    1058:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
    105c:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <operador1+0x7>
    1060:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <operador1+0x6>
    1064:	00 e0       	ldi	r16, 0x00	; 0
    1066:	10 e0       	ldi	r17, 0x00	; 0
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	e8 16       	cp	r14, r24
    106c:	f1 04       	cpc	r15, r1
    106e:	71 f4       	brne	.+28     	; 0x108c <en_dis_op+0x12e>
    1070:	62 eb       	ldi	r22, 0xB2	; 178
    1072:	73 e0       	ldi	r23, 0x03	; 3
    1074:	8e e7       	ldi	r24, 0x7E	; 126
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
    107c:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
    1080:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <operador2+0x7>
    1084:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <operador2+0x6>
    1088:	00 e0       	ldi	r16, 0x00	; 0
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	01 15       	cp	r16, r1
    108e:	11 05       	cpc	r17, r1
    1090:	09 f0       	breq	.+2      	; 0x1094 <en_dis_op+0x136>
    1092:	a9 cf       	rjmp	.-174    	; 0xfe6 <en_dis_op+0x88>
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	08 95       	ret

000010a0 <altera_hora>:
	
}

int altera_hora()
{
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <altera_hora+0x12>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <altera_hora+0x14>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <altera_hora+0x16>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
	int flag=0, state;
	char c, i=0, hora[6];
    10ba:	00 e0       	ldi	r16, 0x00	; 0
	
}

int altera_hora()
{
	int flag=0, state;
    10bc:	e1 2c       	mov	r14, r1
    10be:	f1 2c       	mov	r15, r1
	char c, i=0, hora[6];
	
	while(!flag)
    10c0:	a1 c0       	rjmp	.+322    	; 0x1204 <altera_hora+0x164>
	{
		if(i==0)
    10c2:	01 11       	cpse	r16, r1
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <altera_hora+0x3a>
		{
			LCD_clear();
    10c6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
			sendString("Digite a hora:");
    10ca:	86 e1       	ldi	r24, 0x16	; 22
    10cc:	94 e0       	ldi	r25, 0x04	; 4
    10ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
			send_command(0xC0,0);
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	80 ec       	ldi	r24, 0xC0	; 192
    10d6:	0e 94 0d 02 	call	0x41a	; 0x41a <send_command>
		}
		c = keyboard_input();
    10da:	0e 94 98 01 	call	0x330	; 0x330 <keyboard_input>
    10de:	18 2f       	mov	r17, r24
		if(c != '#' && c != '*' && i<6)
    10e0:	83 32       	cpi	r24, 0x23	; 35
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <altera_hora+0x46>
    10e4:	77 c0       	rjmp	.+238    	; 0x11d4 <altera_hora+0x134>
    10e6:	8a 32       	cpi	r24, 0x2A	; 42
    10e8:	09 f4       	brne	.+2      	; 0x10ec <altera_hora+0x4c>
    10ea:	74 c0       	rjmp	.+232    	; 0x11d4 <altera_hora+0x134>
    10ec:	06 30       	cpi	r16, 0x06	; 6
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <altera_hora+0x52>
    10f0:	71 c0       	rjmp	.+226    	; 0x11d4 <altera_hora+0x134>
		{
			hora[i] = c;
    10f2:	e1 e0       	ldi	r30, 0x01	; 1
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	ec 0f       	add	r30, r28
    10f8:	fd 1f       	adc	r31, r29
    10fa:	e0 0f       	add	r30, r16
    10fc:	f1 1d       	adc	r31, r1
    10fe:	80 83       	st	Z, r24
			sendChar(c);
    1100:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
			i++;
    1104:	0f 5f       	subi	r16, 0xFF	; 255
			if(i==2 || i==4)
    1106:	02 30       	cpi	r16, 0x02	; 2
    1108:	11 f0       	breq	.+4      	; 0x110e <altera_hora+0x6e>
    110a:	04 30       	cpi	r16, 0x04	; 4
    110c:	19 f4       	brne	.+6      	; 0x1114 <altera_hora+0x74>
				sendChar(':');
    110e:	8a e3       	ldi	r24, 0x3A	; 58
    1110:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
			
			if(i == 6)
    1114:	06 30       	cpi	r16, 0x06	; 6
    1116:	09 f0       	breq	.+2      	; 0x111a <altera_hora+0x7a>
    1118:	5d c0       	rjmp	.+186    	; 0x11d4 <altera_hora+0x134>
			{
				if(((hora[0]-'0')*10 + (hora[1]-'0'))>23 || ((hora[2]-'0')*10 + (hora[3]-'0'))>59 || ((hora[4]-'0')*10 + (hora[5]-'0'))>59)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	c0 97       	sbiw	r24, 0x30	; 48
    1120:	9c 01       	movw	r18, r24
    1122:	22 0f       	add	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	2a 81       	ldd	r18, Y+2	; 0x02
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	20 53       	subi	r18, 0x30	; 48
    113c:	31 09       	sbc	r19, r1
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	88 31       	cpi	r24, 0x18	; 24
    1144:	91 05       	cpc	r25, r1
    1146:	84 f5       	brge	.+96     	; 0x11a8 <altera_hora+0x108>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	20 53       	subi	r18, 0x30	; 48
    114e:	31 09       	sbc	r19, r1
    1150:	a9 01       	movw	r20, r18
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	22 0f       	add	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	22 0f       	add	r18, r18
    1160:	33 1f       	adc	r19, r19
    1162:	24 0f       	add	r18, r20
    1164:	35 1f       	adc	r19, r21
    1166:	4c 81       	ldd	r20, Y+4	; 0x04
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	40 53       	subi	r20, 0x30	; 48
    116c:	51 09       	sbc	r21, r1
    116e:	24 0f       	add	r18, r20
    1170:	35 1f       	adc	r19, r21
    1172:	2c 33       	cpi	r18, 0x3C	; 60
    1174:	31 05       	cpc	r19, r1
    1176:	c4 f4       	brge	.+48     	; 0x11a8 <altera_hora+0x108>
    1178:	4d 81       	ldd	r20, Y+5	; 0x05
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	40 53       	subi	r20, 0x30	; 48
    117e:	51 09       	sbc	r21, r1
    1180:	ba 01       	movw	r22, r20
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	44 0f       	add	r20, r20
    1188:	55 1f       	adc	r21, r21
    118a:	44 0f       	add	r20, r20
    118c:	55 1f       	adc	r21, r21
    118e:	44 0f       	add	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	46 0f       	add	r20, r22
    1194:	57 1f       	adc	r21, r23
    1196:	6e 81       	ldd	r22, Y+6	; 0x06
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	60 53       	subi	r22, 0x30	; 48
    119c:	71 09       	sbc	r23, r1
    119e:	46 0f       	add	r20, r22
    11a0:	57 1f       	adc	r21, r23
    11a2:	4c 33       	cpi	r20, 0x3C	; 60
    11a4:	51 05       	cpc	r21, r1
    11a6:	54 f0       	brlt	.+20     	; 0x11bc <altera_hora+0x11c>
				{
					i=0;
					LCD_print2lines("HORA","INVALIDA");
    11a8:	63 e9       	ldi	r22, 0x93	; 147
    11aa:	72 e0       	ldi	r23, 0x02	; 2
    11ac:	85 e2       	ldi	r24, 0x25	; 37
    11ae:	94 e0       	ldi	r25, 0x04	; 4
    11b0:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
					delay_3s();
    11b4:	0e 94 3d 0c 	call	0x187a	; 0x187a <delay_3s>
			
			if(i == 6)
			{
				if(((hora[0]-'0')*10 + (hora[1]-'0'))>23 || ((hora[2]-'0')*10 + (hora[3]-'0'))>59 || ((hora[4]-'0')*10 + (hora[5]-'0'))>59)
				{
					i=0;
    11b8:	00 e0       	ldi	r16, 0x00	; 0
					LCD_print2lines("HORA","INVALIDA");
					delay_3s();
    11ba:	0c c0       	rjmp	.+24     	; 0x11d4 <altera_hora+0x134>
				}
				else
				{
					HOUR = ((hora[0]-'0')*10 + (hora[1]-'0'));
    11bc:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <HOUR+0x1>
    11c0:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <HOUR>
					MINUTE = ((hora[2]-'0')*10 + (hora[3]-'0'));
    11c4:	30 93 94 04 	sts	0x0494, r19	; 0x800494 <MINUTE+0x1>
    11c8:	20 93 93 04 	sts	0x0493, r18	; 0x800493 <MINUTE>
					SECOND = ((hora[4]-'0')*10 + (hora[5]-'0'));
    11cc:	50 93 ae 04 	sts	0x04AE, r21	; 0x8004ae <SECOND+0x1>
    11d0:	40 93 ad 04 	sts	0x04AD, r20	; 0x8004ad <SECOND>
				}
			}
		}
		if(c == '#' && i==6)
    11d4:	13 32       	cpi	r17, 0x23	; 35
    11d6:	51 f4       	brne	.+20     	; 0x11ec <altera_hora+0x14c>
    11d8:	06 30       	cpi	r16, 0x06	; 6
    11da:	41 f4       	brne	.+16     	; 0x11ec <altera_hora+0x14c>
		{
			state = 13;
    11dc:	0f 2e       	mov	r0, r31
    11de:	fd e0       	ldi	r31, 0x0D	; 13
    11e0:	cf 2e       	mov	r12, r31
    11e2:	d1 2c       	mov	r13, r1
    11e4:	f0 2d       	mov	r31, r0
			flag = 1;
    11e6:	ee 24       	eor	r14, r14
    11e8:	e3 94       	inc	r14
    11ea:	f1 2c       	mov	r15, r1
		}
		if(c == '*')
    11ec:	1a 32       	cpi	r17, 0x2A	; 42
    11ee:	51 f4       	brne	.+20     	; 0x1204 <altera_hora+0x164>
		{
			if(maquina_on_off(0) == 1)
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0e 94 0d 03 	call	0x61a	; 0x61a <maquina_on_off>
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	29 f4       	brne	.+10     	; 0x1204 <altera_hora+0x164>
			{
				state = 0;
    11fa:	c1 2c       	mov	r12, r1
    11fc:	d1 2c       	mov	r13, r1
				flag = 1;
    11fe:	ee 24       	eor	r14, r14
    1200:	e3 94       	inc	r14
    1202:	f1 2c       	mov	r15, r1
int altera_hora()
{
	int flag=0, state;
	char c, i=0, hora[6];
	
	while(!flag)
    1204:	e1 14       	cp	r14, r1
    1206:	f1 04       	cpc	r15, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <altera_hora+0x16c>
    120a:	5b cf       	rjmp	.-330    	; 0x10c2 <altera_hora+0x22>
		}
	}
	
	
	return state;
    120c:	c6 01       	movw	r24, r12
    120e:	26 96       	adiw	r28, 0x06	; 6
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	08 95       	ret

0000122c <USART_Receive>:
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Set: 8data, 1stop bit
}

unsigned char USART_Receive()
{
	while ((UCSR0A & (1 << RXC0)) == 0);
    122c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1230:	88 23       	and	r24, r24
    1232:	e4 f7       	brge	.-8      	; 0x122c <USART_Receive>
	return UDR0;
    1234:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    1238:	08 95       	ret

0000123a <USART_Transmit_String>:

void USART_Transmit_String (int code)
{
    123a:	cf 92       	push	r12
    123c:	df 92       	push	r13
    123e:	ef 92       	push	r14
    1240:	ff 92       	push	r15
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	64 97       	sbiw	r28, 0x14	; 20
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
	int i, flag=0;
	char TX_MSG[20];
	
	switch(code)
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <USART_Transmit_String+0x28>
    1260:	76 c0       	rjmp	.+236    	; 0x134e <USART_Transmit_String+0x114>
    1262:	1c f4       	brge	.+6      	; 0x126a <USART_Transmit_String+0x30>
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	49 f0       	breq	.+18     	; 0x127a <USART_Transmit_String+0x40>
    1268:	41 c1       	rjmp	.+642    	; 0x14ec <USART_Transmit_String+0x2b2>
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <USART_Transmit_String+0x38>
    1270:	dd c0       	rjmp	.+442    	; 0x142c <USART_Transmit_String+0x1f2>
    1272:	04 97       	sbiw	r24, 0x04	; 4
    1274:	09 f4       	brne	.+2      	; 0x1278 <USART_Transmit_String+0x3e>
    1276:	3f c1       	rjmp	.+638    	; 0x14f6 <USART_Transmit_String+0x2bc>
    1278:	39 c1       	rjmp	.+626    	; 0x14ec <USART_Transmit_String+0x2b2>
	{
		case 1:			// PAGAMENTO A VISTA ------------------- USART_Transmit_String(1)
		TX_MSG[0] = 'V';
    127a:	86 e5       	ldi	r24, 0x56	; 86
    127c:	89 83       	std	Y+1, r24	; 0x01
		TX_MSG[1] = 'V';
    127e:	8a 83       	std	Y+2, r24	; 0x02
		
		for(i=0; i<6; i++)
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	19 c0       	rjmp	.+50     	; 0x12b8 <USART_Transmit_String+0x7e>
		{
			TX_MSG[2+i] = CARD_NUMBER[i] + '0';
    1286:	fc 01       	movw	r30, r24
    1288:	32 96       	adiw	r30, 0x02	; 2
    128a:	dc 01       	movw	r26, r24
    128c:	a9 55       	subi	r26, 0x59	; 89
    128e:	bb 4f       	sbci	r27, 0xFB	; 251
    1290:	2c 91       	ld	r18, X
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	4c 0f       	add	r20, r28
    1298:	5d 1f       	adc	r21, r29
    129a:	e4 0f       	add	r30, r20
    129c:	f5 1f       	adc	r31, r21
    129e:	20 5d       	subi	r18, 0xD0	; 208
    12a0:	20 83       	st	Z, r18
			TX_MSG[8+i] = CARD_PASSWORD[i] + '0';
    12a2:	fc 01       	movw	r30, r24
    12a4:	38 96       	adiw	r30, 0x08	; 8
    12a6:	dc 01       	movw	r26, r24
    12a8:	a7 56       	subi	r26, 0x67	; 103
    12aa:	bb 4f       	sbci	r27, 0xFB	; 251
    12ac:	2c 91       	ld	r18, X
    12ae:	e4 0f       	add	r30, r20
    12b0:	f5 1f       	adc	r31, r21
    12b2:	20 5d       	subi	r18, 0xD0	; 208
    12b4:	20 83       	st	Z, r18
	{
		case 1:			// PAGAMENTO A VISTA ------------------- USART_Transmit_String(1)
		TX_MSG[0] = 'V';
		TX_MSG[1] = 'V';
		
		for(i=0; i<6; i++)
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	86 30       	cpi	r24, 0x06	; 6
    12ba:	91 05       	cpc	r25, r1
    12bc:	24 f3       	brlt	.-56     	; 0x1286 <USART_Transmit_String+0x4c>
		{
			TX_MSG[2+i] = CARD_NUMBER[i] + '0';
			TX_MSG[8+i] = CARD_PASSWORD[i] + '0';
		}
		
		TX_MSG[14] = (((int)(PAYMENT_VALUE*100)/1000)%10) + '0';
    12be:	c0 90 8f 04 	lds	r12, 0x048F	; 0x80048f <PAYMENT_VALUE>
    12c2:	d0 90 90 04 	lds	r13, 0x0490	; 0x800490 <PAYMENT_VALUE+0x1>
    12c6:	e0 90 91 04 	lds	r14, 0x0491	; 0x800491 <PAYMENT_VALUE+0x2>
    12ca:	f0 90 92 04 	lds	r15, 0x0492	; 0x800492 <PAYMENT_VALUE+0x3>
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	48 ec       	ldi	r20, 0xC8	; 200
    12d4:	52 e4       	ldi	r21, 0x42	; 66
    12d6:	c7 01       	movw	r24, r14
    12d8:	b6 01       	movw	r22, r12
    12da:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__mulsf3>
    12de:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
    12e2:	9b 01       	movw	r18, r22
    12e4:	cb 01       	movw	r24, r22
    12e6:	68 ee       	ldi	r22, 0xE8	; 232
    12e8:	73 e0       	ldi	r23, 0x03	; 3
    12ea:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    12ee:	cb 01       	movw	r24, r22
    12f0:	0a e0       	ldi	r16, 0x0A	; 10
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	b8 01       	movw	r22, r16
    12f6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    12fa:	80 5d       	subi	r24, 0xD0	; 208
    12fc:	8f 87       	std	Y+15, r24	; 0x0f
		TX_MSG[15] = (((int)(PAYMENT_VALUE*100)/100)%10 + '0');
    12fe:	c9 01       	movw	r24, r18
    1300:	64 e6       	ldi	r22, 0x64	; 100
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1308:	cb 01       	movw	r24, r22
    130a:	b8 01       	movw	r22, r16
    130c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1310:	80 5d       	subi	r24, 0xD0	; 208
    1312:	88 8b       	std	Y+16, r24	; 0x10
		TX_MSG[16] = (((int)(PAYMENT_VALUE*100)/10)%10) + '0';
    1314:	c9 01       	movw	r24, r18
    1316:	b8 01       	movw	r22, r16
    1318:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    131c:	cb 01       	movw	r24, r22
    131e:	b8 01       	movw	r22, r16
    1320:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1324:	80 5d       	subi	r24, 0xD0	; 208
    1326:	89 8b       	std	Y+17, r24	; 0x11
		TX_MSG[17] = (((int)PAYMENT_VALUE*100)%10) + '0';
    1328:	c7 01       	movw	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
    1330:	24 e6       	ldi	r18, 0x64	; 100
    1332:	26 9f       	mul	r18, r22
    1334:	a0 01       	movw	r20, r0
    1336:	27 9f       	mul	r18, r23
    1338:	50 0d       	add	r21, r0
    133a:	11 24       	eor	r1, r1
    133c:	ca 01       	movw	r24, r20
    133e:	b8 01       	movw	r22, r16
    1340:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1344:	80 5d       	subi	r24, 0xD0	; 208
    1346:	8a 8b       	std	Y+18, r24	; 0x12
		
		TX_MSG[18] = '\r';
    1348:	8d e0       	ldi	r24, 0x0D	; 13
    134a:	8b 8b       	std	Y+19, r24	; 0x13
		
		break;
    134c:	cf c0       	rjmp	.+414    	; 0x14ec <USART_Transmit_String+0x2b2>
		
		case 2:			// PAGAMENTO PARCELADO ----------------- USART_Transmit_String(2)
		TX_MSG[0] = 'V';
    134e:	86 e5       	ldi	r24, 0x56	; 86
    1350:	89 83       	std	Y+1, r24	; 0x01
		TX_MSG[1] = 'P';
    1352:	80 e5       	ldi	r24, 0x50	; 80
    1354:	8a 83       	std	Y+2, r24	; 0x02
		
		for(i=0; i<6; i++)
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	19 c0       	rjmp	.+50     	; 0x138e <USART_Transmit_String+0x154>
		{
			TX_MSG[2+i] = CARD_NUMBER[i] + '0';
    135c:	fc 01       	movw	r30, r24
    135e:	32 96       	adiw	r30, 0x02	; 2
    1360:	dc 01       	movw	r26, r24
    1362:	a9 55       	subi	r26, 0x59	; 89
    1364:	bb 4f       	sbci	r27, 0xFB	; 251
    1366:	2c 91       	ld	r18, X
    1368:	41 e0       	ldi	r20, 0x01	; 1
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	4c 0f       	add	r20, r28
    136e:	5d 1f       	adc	r21, r29
    1370:	e4 0f       	add	r30, r20
    1372:	f5 1f       	adc	r31, r21
    1374:	20 5d       	subi	r18, 0xD0	; 208
    1376:	20 83       	st	Z, r18
			TX_MSG[8+i] = CARD_PASSWORD[i] + '0';
    1378:	fc 01       	movw	r30, r24
    137a:	38 96       	adiw	r30, 0x08	; 8
    137c:	dc 01       	movw	r26, r24
    137e:	a7 56       	subi	r26, 0x67	; 103
    1380:	bb 4f       	sbci	r27, 0xFB	; 251
    1382:	2c 91       	ld	r18, X
    1384:	e4 0f       	add	r30, r20
    1386:	f5 1f       	adc	r31, r21
    1388:	20 5d       	subi	r18, 0xD0	; 208
    138a:	20 83       	st	Z, r18
		
		case 2:			// PAGAMENTO PARCELADO ----------------- USART_Transmit_String(2)
		TX_MSG[0] = 'V';
		TX_MSG[1] = 'P';
		
		for(i=0; i<6; i++)
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	86 30       	cpi	r24, 0x06	; 6
    1390:	91 05       	cpc	r25, r1
    1392:	24 f3       	brlt	.-56     	; 0x135c <USART_Transmit_String+0x122>
		{
			TX_MSG[2+i] = CARD_NUMBER[i] + '0';
			TX_MSG[8+i] = CARD_PASSWORD[i] + '0';
		}
		
		TX_MSG[14] = NUM_PARCELAS + '0';
    1394:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <__data_end>
    1398:	80 5d       	subi	r24, 0xD0	; 208
    139a:	8f 87       	std	Y+15, r24	; 0x0f
		
		TX_MSG[15] = (((int)(PAYMENT_VALUE*100)/1000)%10) + '0';
    139c:	c0 90 8f 04 	lds	r12, 0x048F	; 0x80048f <PAYMENT_VALUE>
    13a0:	d0 90 90 04 	lds	r13, 0x0490	; 0x800490 <PAYMENT_VALUE+0x1>
    13a4:	e0 90 91 04 	lds	r14, 0x0491	; 0x800491 <PAYMENT_VALUE+0x2>
    13a8:	f0 90 92 04 	lds	r15, 0x0492	; 0x800492 <PAYMENT_VALUE+0x3>
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	48 ec       	ldi	r20, 0xC8	; 200
    13b2:	52 e4       	ldi	r21, 0x42	; 66
    13b4:	c7 01       	movw	r24, r14
    13b6:	b6 01       	movw	r22, r12
    13b8:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__mulsf3>
    13bc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
    13c0:	9b 01       	movw	r18, r22
    13c2:	cb 01       	movw	r24, r22
    13c4:	68 ee       	ldi	r22, 0xE8	; 232
    13c6:	73 e0       	ldi	r23, 0x03	; 3
    13c8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    13cc:	cb 01       	movw	r24, r22
    13ce:	0a e0       	ldi	r16, 0x0A	; 10
    13d0:	10 e0       	ldi	r17, 0x00	; 0
    13d2:	b8 01       	movw	r22, r16
    13d4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    13d8:	80 5d       	subi	r24, 0xD0	; 208
    13da:	88 8b       	std	Y+16, r24	; 0x10
		TX_MSG[16] = (((int)(PAYMENT_VALUE*100)/100)%10) + '0';
    13dc:	c9 01       	movw	r24, r18
    13de:	64 e6       	ldi	r22, 0x64	; 100
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    13e6:	cb 01       	movw	r24, r22
    13e8:	b8 01       	movw	r22, r16
    13ea:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    13ee:	80 5d       	subi	r24, 0xD0	; 208
    13f0:	89 8b       	std	Y+17, r24	; 0x11
		TX_MSG[17] = (((int)(PAYMENT_VALUE*100)/10)%10) + '0';
    13f2:	c9 01       	movw	r24, r18
    13f4:	b8 01       	movw	r22, r16
    13f6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    13fa:	cb 01       	movw	r24, r22
    13fc:	b8 01       	movw	r22, r16
    13fe:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1402:	80 5d       	subi	r24, 0xD0	; 208
    1404:	8a 8b       	std	Y+18, r24	; 0x12
		TX_MSG[18] = (((int)PAYMENT_VALUE*100)%10) + '0';
    1406:	c7 01       	movw	r24, r14
    1408:	b6 01       	movw	r22, r12
    140a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
    140e:	24 e6       	ldi	r18, 0x64	; 100
    1410:	26 9f       	mul	r18, r22
    1412:	a0 01       	movw	r20, r0
    1414:	27 9f       	mul	r18, r23
    1416:	50 0d       	add	r21, r0
    1418:	11 24       	eor	r1, r1
    141a:	ca 01       	movw	r24, r20
    141c:	b8 01       	movw	r22, r16
    141e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1422:	80 5d       	subi	r24, 0xD0	; 208
    1424:	8b 8b       	std	Y+19, r24	; 0x13
		
		TX_MSG[19] = '\r';
    1426:	8d e0       	ldi	r24, 0x0D	; 13
    1428:	8c 8b       	std	Y+20, r24	; 0x14
		
		break;
    142a:	60 c0       	rjmp	.+192    	; 0x14ec <USART_Transmit_String+0x2b2>
		
		case 3:			// ESTORNO ------------------------------- USART_Transmit_String(3)
		TX_MSG[0] = 'E';
    142c:	85 e4       	ldi	r24, 0x45	; 69
    142e:	89 83       	std	Y+1, r24	; 0x01
		TX_MSG[1] = 'V';
    1430:	86 e5       	ldi	r24, 0x56	; 86
    1432:	8a 83       	std	Y+2, r24	; 0x02
		
		for(i=0; i<6; i++)
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <USART_Transmit_String+0x21e>
		{
			TX_MSG[2+i] = CARD_NUMBER[i] + '0';
    143a:	fc 01       	movw	r30, r24
    143c:	32 96       	adiw	r30, 0x02	; 2
    143e:	dc 01       	movw	r26, r24
    1440:	a9 55       	subi	r26, 0x59	; 89
    1442:	bb 4f       	sbci	r27, 0xFB	; 251
    1444:	2c 91       	ld	r18, X
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	4c 0f       	add	r20, r28
    144c:	5d 1f       	adc	r21, r29
    144e:	e4 0f       	add	r30, r20
    1450:	f5 1f       	adc	r31, r21
    1452:	20 5d       	subi	r18, 0xD0	; 208
    1454:	20 83       	st	Z, r18
		
		case 3:			// ESTORNO ------------------------------- USART_Transmit_String(3)
		TX_MSG[0] = 'E';
		TX_MSG[1] = 'V';
		
		for(i=0; i<6; i++)
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	86 30       	cpi	r24, 0x06	; 6
    145a:	91 05       	cpc	r25, r1
    145c:	74 f3       	brlt	.-36     	; 0x143a <USART_Transmit_String+0x200>
		{
			TX_MSG[2+i] = CARD_NUMBER[i] + '0';
		}
		
		TX_MSG[8] = (((int)(PAYMENT_VALUE*100)/1000)%10) + '0';
    145e:	c0 90 8f 04 	lds	r12, 0x048F	; 0x80048f <PAYMENT_VALUE>
    1462:	d0 90 90 04 	lds	r13, 0x0490	; 0x800490 <PAYMENT_VALUE+0x1>
    1466:	e0 90 91 04 	lds	r14, 0x0491	; 0x800491 <PAYMENT_VALUE+0x2>
    146a:	f0 90 92 04 	lds	r15, 0x0492	; 0x800492 <PAYMENT_VALUE+0x3>
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	48 ec       	ldi	r20, 0xC8	; 200
    1474:	52 e4       	ldi	r21, 0x42	; 66
    1476:	c7 01       	movw	r24, r14
    1478:	b6 01       	movw	r22, r12
    147a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__mulsf3>
    147e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
    1482:	9b 01       	movw	r18, r22
    1484:	cb 01       	movw	r24, r22
    1486:	68 ee       	ldi	r22, 0xE8	; 232
    1488:	73 e0       	ldi	r23, 0x03	; 3
    148a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    148e:	cb 01       	movw	r24, r22
    1490:	0a e0       	ldi	r16, 0x0A	; 10
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	b8 01       	movw	r22, r16
    1496:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    149a:	80 5d       	subi	r24, 0xD0	; 208
    149c:	89 87       	std	Y+9, r24	; 0x09
		TX_MSG[9] = (((int)(PAYMENT_VALUE*100)/100)%10) + '0';
    149e:	c9 01       	movw	r24, r18
    14a0:	64 e6       	ldi	r22, 0x64	; 100
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    14a8:	cb 01       	movw	r24, r22
    14aa:	b8 01       	movw	r22, r16
    14ac:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    14b0:	80 5d       	subi	r24, 0xD0	; 208
    14b2:	8a 87       	std	Y+10, r24	; 0x0a
		TX_MSG[10] = (((int)(PAYMENT_VALUE*100)/10)%10) + '0';
    14b4:	c9 01       	movw	r24, r18
    14b6:	b8 01       	movw	r22, r16
    14b8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    14bc:	cb 01       	movw	r24, r22
    14be:	b8 01       	movw	r22, r16
    14c0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    14c4:	80 5d       	subi	r24, 0xD0	; 208
    14c6:	8b 87       	std	Y+11, r24	; 0x0b
		TX_MSG[11] = (((int)PAYMENT_VALUE*100)%10) + '0';
    14c8:	c7 01       	movw	r24, r14
    14ca:	b6 01       	movw	r22, r12
    14cc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
    14d0:	24 e6       	ldi	r18, 0x64	; 100
    14d2:	26 9f       	mul	r18, r22
    14d4:	a0 01       	movw	r20, r0
    14d6:	27 9f       	mul	r18, r23
    14d8:	50 0d       	add	r21, r0
    14da:	11 24       	eor	r1, r1
    14dc:	ca 01       	movw	r24, r20
    14de:	b8 01       	movw	r22, r16
    14e0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    14e4:	80 5d       	subi	r24, 0xD0	; 208
    14e6:	8c 87       	std	Y+12, r24	; 0x0c
		
		TX_MSG[12] = '\r';
    14e8:	8d e0       	ldi	r24, 0x0D	; 13
    14ea:	8d 87       	std	Y+13, r24	; 0x0d
	{
		while (!( UCSR0A & (1<<UDRE0)));
		UDR0 = TX_MSG[i];
		
		if(TX_MSG[i] == '\r')
		flag=1;
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	75 c0       	rjmp	.+234    	; 0x15e0 <USART_Transmit_String+0x3a6>
		TX_MSG[12] = '\r';
		
		break;
		
		case 4:			// VERIFICA PAG AGENDADO ----------------- USART_Transmit_String(4)
		TX_MSG[0] = 'A';
    14f6:	81 e4       	ldi	r24, 0x41	; 65
    14f8:	89 83       	std	Y+1, r24	; 0x01
		TX_MSG[1] = 'P';
    14fa:	80 e5       	ldi	r24, 0x50	; 80
    14fc:	8a 83       	std	Y+2, r24	; 0x02
		
		for(i=0; i<6; i++)
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <USART_Transmit_String+0x2e8>
		{
			TX_MSG[2+i] = CARD_NUMBER[i] + '0';
    1504:	fc 01       	movw	r30, r24
    1506:	32 96       	adiw	r30, 0x02	; 2
    1508:	dc 01       	movw	r26, r24
    150a:	a9 55       	subi	r26, 0x59	; 89
    150c:	bb 4f       	sbci	r27, 0xFB	; 251
    150e:	2c 91       	ld	r18, X
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	4c 0f       	add	r20, r28
    1516:	5d 1f       	adc	r21, r29
    1518:	e4 0f       	add	r30, r20
    151a:	f5 1f       	adc	r31, r21
    151c:	20 5d       	subi	r18, 0xD0	; 208
    151e:	20 83       	st	Z, r18
		
		case 4:			// VERIFICA PAG AGENDADO ----------------- USART_Transmit_String(4)
		TX_MSG[0] = 'A';
		TX_MSG[1] = 'P';
		
		for(i=0; i<6; i++)
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	86 30       	cpi	r24, 0x06	; 6
    1524:	91 05       	cpc	r25, r1
    1526:	74 f3       	brlt	.-36     	; 0x1504 <USART_Transmit_String+0x2ca>
		{
			TX_MSG[2+i] = CARD_NUMBER[i] + '0';
		}
		
		TX_MSG[8] = (((int)(PAYMENT_VALUE*100)/1000)%10) + '0';
    1528:	c0 90 8f 04 	lds	r12, 0x048F	; 0x80048f <PAYMENT_VALUE>
    152c:	d0 90 90 04 	lds	r13, 0x0490	; 0x800490 <PAYMENT_VALUE+0x1>
    1530:	e0 90 91 04 	lds	r14, 0x0491	; 0x800491 <PAYMENT_VALUE+0x2>
    1534:	f0 90 92 04 	lds	r15, 0x0492	; 0x800492 <PAYMENT_VALUE+0x3>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	48 ec       	ldi	r20, 0xC8	; 200
    153e:	52 e4       	ldi	r21, 0x42	; 66
    1540:	c7 01       	movw	r24, r14
    1542:	b6 01       	movw	r22, r12
    1544:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__mulsf3>
    1548:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
    154c:	9b 01       	movw	r18, r22
    154e:	cb 01       	movw	r24, r22
    1550:	68 ee       	ldi	r22, 0xE8	; 232
    1552:	73 e0       	ldi	r23, 0x03	; 3
    1554:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1558:	cb 01       	movw	r24, r22
    155a:	0a e0       	ldi	r16, 0x0A	; 10
    155c:	10 e0       	ldi	r17, 0x00	; 0
    155e:	b8 01       	movw	r22, r16
    1560:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1564:	80 5d       	subi	r24, 0xD0	; 208
    1566:	89 87       	std	Y+9, r24	; 0x09
		TX_MSG[9] = (((int)(PAYMENT_VALUE*100)/100)%10) + '0';
    1568:	c9 01       	movw	r24, r18
    156a:	64 e6       	ldi	r22, 0x64	; 100
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1572:	cb 01       	movw	r24, r22
    1574:	b8 01       	movw	r22, r16
    1576:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    157a:	80 5d       	subi	r24, 0xD0	; 208
    157c:	8a 87       	std	Y+10, r24	; 0x0a
		TX_MSG[10] = (((int)(PAYMENT_VALUE*100)/10)%10) + '0';
    157e:	c9 01       	movw	r24, r18
    1580:	b8 01       	movw	r22, r16
    1582:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    1586:	cb 01       	movw	r24, r22
    1588:	b8 01       	movw	r22, r16
    158a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    158e:	80 5d       	subi	r24, 0xD0	; 208
    1590:	8b 87       	std	Y+11, r24	; 0x0b
		TX_MSG[11] = (((int)PAYMENT_VALUE*100)%10) + '0';
    1592:	c7 01       	movw	r24, r14
    1594:	b6 01       	movw	r22, r12
    1596:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
    159a:	24 e6       	ldi	r18, 0x64	; 100
    159c:	26 9f       	mul	r18, r22
    159e:	a0 01       	movw	r20, r0
    15a0:	27 9f       	mul	r18, r23
    15a2:	50 0d       	add	r21, r0
    15a4:	11 24       	eor	r1, r1
    15a6:	ca 01       	movw	r24, r20
    15a8:	b8 01       	movw	r22, r16
    15aa:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__divmodhi4>
    15ae:	80 5d       	subi	r24, 0xD0	; 208
    15b0:	8c 87       	std	Y+12, r24	; 0x0c
		
		TX_MSG[12] = '\r';
    15b2:	8d e0       	ldi	r24, 0x0D	; 13
    15b4:	8d 87       	std	Y+13, r24	; 0x0d
		
		break;
    15b6:	9a cf       	rjmp	.-204    	; 0x14ec <USART_Transmit_String+0x2b2>
	}
	
	i=0;
	while(!flag)
	{
		while (!( UCSR0A & (1<<UDRE0)));
    15b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    15bc:	85 ff       	sbrs	r24, 5
    15be:	fc cf       	rjmp	.-8      	; 0x15b8 <USART_Transmit_String+0x37e>
		UDR0 = TX_MSG[i];
    15c0:	e1 e0       	ldi	r30, 0x01	; 1
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	ec 0f       	add	r30, r28
    15c6:	fd 1f       	adc	r31, r29
    15c8:	e2 0f       	add	r30, r18
    15ca:	f3 1f       	adc	r31, r19
    15cc:	80 81       	ld	r24, Z
    15ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
		if(TX_MSG[i] == '\r')
    15d2:	80 81       	ld	r24, Z
    15d4:	8d 30       	cpi	r24, 0x0D	; 13
    15d6:	11 f4       	brne	.+4      	; 0x15dc <USART_Transmit_String+0x3a2>
		flag=1;
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	50 e0       	ldi	r21, 0x00	; 0
		
		i++;
    15dc:	2f 5f       	subi	r18, 0xFF	; 255
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
		
	}
	
	i=0;
	while(!flag)
    15e0:	41 15       	cp	r20, r1
    15e2:	51 05       	cpc	r21, r1
    15e4:	49 f3       	breq	.-46     	; 0x15b8 <USART_Transmit_String+0x37e>
		
		i++;
		
		//delay??
	}
}
    15e6:	64 96       	adiw	r28, 0x14	; 20
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
    1602:	08 95       	ret

00001604 <USART_Receive_String>:

int USART_Receive_String()
{
	int flag_return, i; // flag do valor de retorno
	
	if(RX_MSG[0] == 'O' && RX_MSG[1] == 'K')	// OK = Pagamento efetivado
    1604:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <RX_MSG>
    1608:	8f 34       	cpi	r24, 0x4F	; 79
    160a:	81 f4       	brne	.+32     	; 0x162c <USART_Receive_String+0x28>
    160c:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <RX_MSG+0x1>
    1610:	8b 34       	cpi	r24, 0x4B	; 75
    1612:	61 f4       	brne	.+24     	; 0x162c <USART_Receive_String+0x28>
	{
		LCD_print2lines("PAGAMENTO","EFETIVADO");
    1614:	6a e2       	ldi	r22, 0x2A	; 42
    1616:	74 e0       	ldi	r23, 0x04	; 4
    1618:	84 e3       	ldi	r24, 0x34	; 52
    161a:	94 e0       	ldi	r25, 0x04	; 4
    161c:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
		LCD_clear();sendString(RX_MSG);
    1620:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
    1624:	88 ec       	ldi	r24, 0xC8	; 200
    1626:	94 e0       	ldi	r25, 0x04	; 4
    1628:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
		flag_return = 1;
	}
	if(RX_MSG[0] == 'C' && RX_MSG[1] == 'F')	// CF = Conta com falha (Inválida)
    162c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <RX_MSG>
    1630:	83 34       	cpi	r24, 0x43	; 67
    1632:	69 f4       	brne	.+26     	; 0x164e <USART_Receive_String+0x4a>
    1634:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <RX_MSG+0x1>
    1638:	86 34       	cpi	r24, 0x46	; 70
    163a:	61 f4       	brne	.+24     	; 0x1654 <USART_Receive_String+0x50>
	{
		LCD_print2lines("CONTA COM","FALHA");
    163c:	6e e3       	ldi	r22, 0x3E	; 62
    163e:	74 e0       	ldi	r23, 0x04	; 4
    1640:	84 e4       	ldi	r24, 0x44	; 68
    1642:	94 e0       	ldi	r25, 0x04	; 4
    1644:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
		flag_return = 2;
    1648:	42 e0       	ldi	r20, 0x02	; 2
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	05 c0       	rjmp	.+10     	; 0x1658 <USART_Receive_String+0x54>
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <USART_Receive_String+0x54>
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	50 e0       	ldi	r21, 0x00	; 0
	}
	if(RX_MSG[0] == 'S' && RX_MSG[1] == 'F')	// SF = Senha com falha (Inválida)
    1658:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <RX_MSG>
    165c:	83 35       	cpi	r24, 0x53	; 83
    165e:	61 f4       	brne	.+24     	; 0x1678 <USART_Receive_String+0x74>
    1660:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <RX_MSG+0x1>
    1664:	86 34       	cpi	r24, 0x46	; 70
    1666:	41 f4       	brne	.+16     	; 0x1678 <USART_Receive_String+0x74>
	{
		LCD_print2lines("SENHA","INVALIDA");
    1668:	63 e9       	ldi	r22, 0x93	; 147
    166a:	72 e0       	ldi	r23, 0x02	; 2
    166c:	8e e4       	ldi	r24, 0x4E	; 78
    166e:	94 e0       	ldi	r25, 0x04	; 4
    1670:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
		flag_return = 3;
    1674:	43 e0       	ldi	r20, 0x03	; 3
    1676:	50 e0       	ldi	r21, 0x00	; 0
	}
	if(RX_MSG[0] == 'S' && RX_MSG[1] == 'I')	// SI = Saldo Insuficiente
    1678:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <RX_MSG>
    167c:	83 35       	cpi	r24, 0x53	; 83
    167e:	61 f4       	brne	.+24     	; 0x1698 <USART_Receive_String+0x94>
    1680:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <RX_MSG+0x1>
    1684:	89 34       	cpi	r24, 0x49	; 73
    1686:	41 f4       	brne	.+16     	; 0x1698 <USART_Receive_String+0x94>
	{
		LCD_print2lines("SALDO","INSUFICIENTE");
    1688:	64 e5       	ldi	r22, 0x54	; 84
    168a:	74 e0       	ldi	r23, 0x04	; 4
    168c:	81 e6       	ldi	r24, 0x61	; 97
    168e:	94 e0       	ldi	r25, 0x04	; 4
    1690:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
		flag_return = 4;
    1694:	44 e0       	ldi	r20, 0x04	; 4
    1696:	50 e0       	ldi	r21, 0x00	; 0
	}
	if(RX_MSG[0] == 'P' && RX_MSG[1] == 'N')	// PN = Pagamento não localizado
    1698:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <RX_MSG>
    169c:	80 35       	cpi	r24, 0x50	; 80
    169e:	61 f4       	brne	.+24     	; 0x16b8 <USART_Receive_String+0xb4>
    16a0:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <RX_MSG+0x1>
    16a4:	8e 34       	cpi	r24, 0x4E	; 78
    16a6:	41 f4       	brne	.+16     	; 0x16b8 <USART_Receive_String+0xb4>
	{
		LCD_print2lines("PG NAO","LOCALIZADO");
    16a8:	67 e6       	ldi	r22, 0x67	; 103
    16aa:	74 e0       	ldi	r23, 0x04	; 4
    16ac:	82 e7       	ldi	r24, 0x72	; 114
    16ae:	94 e0       	ldi	r25, 0x04	; 4
    16b0:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_print2lines>
		flag_return = 5;
    16b4:	45 e0       	ldi	r20, 0x05	; 5
    16b6:	50 e0       	ldi	r21, 0x00	; 0
	}
	if(RX_MSG[0] == 'C' && RX_MSG[1] == 'M')	// CM = Envio de número do cartão magnético
    16b8:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <RX_MSG>
    16bc:	83 34       	cpi	r24, 0x43	; 67
    16be:	e9 f4       	brne	.+58     	; 0x16fa <USART_Receive_String+0xf6>
    16c0:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <RX_MSG+0x1>
    16c4:	8d 34       	cpi	r24, 0x4D	; 77
    16c6:	c9 f4       	brne	.+50     	; 0x16fa <USART_Receive_String+0xf6>
    16c8:	0b c0       	rjmp	.+22     	; 0x16e0 <USART_Receive_String+0xdc>
	{
		for(i=0; i<6; i++)
		{
			CARD_NUMBER[i] = RX_MSG[2+i] - '0';
    16ca:	fc 01       	movw	r30, r24
    16cc:	e6 53       	subi	r30, 0x36	; 54
    16ce:	fb 4f       	sbci	r31, 0xFB	; 251
    16d0:	20 81       	ld	r18, Z
    16d2:	fc 01       	movw	r30, r24
    16d4:	e9 55       	subi	r30, 0x59	; 89
    16d6:	fb 4f       	sbci	r31, 0xFB	; 251
    16d8:	20 53       	subi	r18, 0x30	; 48
    16da:	20 83       	st	Z, r18
		LCD_print2lines("PG NAO","LOCALIZADO");
		flag_return = 5;
	}
	if(RX_MSG[0] == 'C' && RX_MSG[1] == 'M')	// CM = Envio de número do cartão magnético
	{
		for(i=0; i<6; i++)
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <USART_Receive_String+0xe0>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	86 30       	cpi	r24, 0x06	; 6
    16e6:	91 05       	cpc	r25, r1
    16e8:	84 f3       	brlt	.-32     	; 0x16ca <USART_Receive_String+0xc6>
		{
			CARD_NUMBER[i] = RX_MSG[2+i] - '0';
		}
		
		LCD_clear();sendString(RX_MSG);
    16ea:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_clear>
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	94 e0       	ldi	r25, 0x04	; 4
    16f2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sendString>
		
		flag_return = 6;
    16f6:	46 e0       	ldi	r20, 0x06	; 6
    16f8:	50 e0       	ldi	r21, 0x00	; 0
	}
	if(RX_MSG[0] == 'C' && RX_MSG[1] == 'W')	// CW = Envio de número do cartão wireless
    16fa:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <RX_MSG>
    16fe:	83 34       	cpi	r24, 0x43	; 67
    1700:	f9 f4       	brne	.+62     	; 0x1740 <USART_Receive_String+0x13c>
    1702:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <RX_MSG+0x1>
    1706:	87 35       	cpi	r24, 0x57	; 87
    1708:	d9 f4       	brne	.+54     	; 0x1740 <USART_Receive_String+0x13c>
    170a:	15 c0       	rjmp	.+42     	; 0x1736 <USART_Receive_String+0x132>
	{
		for(i=0; i<6; i++)
		{
			CARD_NUMBER[i] = RX_MSG[2+i] - '0';
    170c:	f9 01       	movw	r30, r18
    170e:	e6 53       	subi	r30, 0x36	; 54
    1710:	fb 4f       	sbci	r31, 0xFB	; 251
    1712:	90 81       	ld	r25, Z
    1714:	f9 01       	movw	r30, r18
    1716:	e9 55       	subi	r30, 0x59	; 89
    1718:	fb 4f       	sbci	r31, 0xFB	; 251
    171a:	90 53       	subi	r25, 0x30	; 48
    171c:	90 83       	st	Z, r25
			CARD_PASSWORD[i] = RX_MSG[8+i] - '0';
    171e:	f9 01       	movw	r30, r18
    1720:	e0 53       	subi	r30, 0x30	; 48
    1722:	fb 4f       	sbci	r31, 0xFB	; 251
    1724:	90 81       	ld	r25, Z
    1726:	f9 01       	movw	r30, r18
    1728:	e7 56       	subi	r30, 0x67	; 103
    172a:	fb 4f       	sbci	r31, 0xFB	; 251
    172c:	90 53       	subi	r25, 0x30	; 48
    172e:	90 83       	st	Z, r25
		
		flag_return = 6;
	}
	if(RX_MSG[0] == 'C' && RX_MSG[1] == 'W')	// CW = Envio de número do cartão wireless
	{
		for(i=0; i<6; i++)
    1730:	2f 5f       	subi	r18, 0xFF	; 255
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	02 c0       	rjmp	.+4      	; 0x173a <USART_Receive_String+0x136>
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	26 30       	cpi	r18, 0x06	; 6
    173c:	31 05       	cpc	r19, r1
    173e:	34 f3       	brlt	.-52     	; 0x170c <USART_Receive_String+0x108>
			CARD_PASSWORD[i] = RX_MSG[8+i] - '0';
		}
	}
	
	return flag_return;
}
    1740:	ca 01       	movw	r24, r20
    1742:	08 95       	ret

00001744 <__vector_18>:

ISR(USART_RX_vect)
{
    1744:	1f 92       	push	r1
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	2f 93       	push	r18
    1754:	3f 93       	push	r19
    1756:	4f 93       	push	r20
    1758:	5f 93       	push	r21
    175a:	6f 93       	push	r22
    175c:	7f 93       	push	r23
    175e:	8f 93       	push	r24
    1760:	9f 93       	push	r25
    1762:	af 93       	push	r26
    1764:	bf 93       	push	r27
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	ef 93       	push	r30
    176c:	ff 93       	push	r31
	int i, flag=0;
    176e:	00 e0       	ldi	r16, 0x00	; 0
    1770:	10 e0       	ldi	r17, 0x00	; 0
	
	i=0;
    1772:	c0 e0       	ldi	r28, 0x00	; 0
    1774:	d0 e0       	ldi	r29, 0x00	; 0
	while(!flag)
    1776:	0c c0       	rjmp	.+24     	; 0x1790 <__vector_18+0x4c>
	{
		RX_Buffer[i] = USART_Receive();
    1778:	0e 94 16 09 	call	0x122c	; 0x122c <USART_Receive>
    177c:	fe 01       	movw	r30, r28
    177e:	e7 54       	subi	r30, 0x47	; 71
    1780:	fb 4f       	sbci	r31, 0xFB	; 251
    1782:	80 83       	st	Z, r24
		if(RX_Buffer[i] == '\r')
    1784:	8d 30       	cpi	r24, 0x0D	; 13
    1786:	11 f0       	breq	.+4      	; 0x178c <__vector_18+0x48>
			flag = 1;
		else
			i++;
    1788:	21 96       	adiw	r28, 0x01	; 1
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <__vector_18+0x4c>
	i=0;
	while(!flag)
	{
		RX_Buffer[i] = USART_Receive();
		if(RX_Buffer[i] == '\r')
			flag = 1;
    178c:	01 e0       	ldi	r16, 0x01	; 1
    178e:	10 e0       	ldi	r17, 0x00	; 0
ISR(USART_RX_vect)
{
	int i, flag=0;
	
	i=0;
	while(!flag)
    1790:	01 15       	cp	r16, r1
    1792:	11 05       	cpc	r17, r1
    1794:	89 f3       	breq	.-30     	; 0x1778 <__vector_18+0x34>
		if(RX_Buffer[i] == '\r')
			flag = 1;
		else
			i++;
	}
	strcpy(RX_MSG, RX_Buffer);
    1796:	69 eb       	ldi	r22, 0xB9	; 185
    1798:	74 e0       	ldi	r23, 0x04	; 4
    179a:	88 ec       	ldi	r24, 0xC8	; 200
    179c:	94 e0       	ldi	r25, 0x04	; 4
    179e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <strcpy>
	
	COUNT_40S = 0;
    17a2:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <COUNT_40S+0x1>
    17a6:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <COUNT_40S>
	
	USART_Receive_String();
    17aa:	0e 94 02 0b 	call	0x1604	; 0x1604 <USART_Receive_String>
	USART_Transmit_String(4);
    17ae:	84 e0       	ldi	r24, 0x04	; 4
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 1d 09 	call	0x123a	; 0x123a <USART_Transmit_String>
}
    17b6:	ff 91       	pop	r31
    17b8:	ef 91       	pop	r30
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	bf 91       	pop	r27
    17c0:	af 91       	pop	r26
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	7f 91       	pop	r23
    17c8:	6f 91       	pop	r22
    17ca:	5f 91       	pop	r21
    17cc:	4f 91       	pop	r20
    17ce:	3f 91       	pop	r19
    17d0:	2f 91       	pop	r18
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	0f 90       	pop	r0
    17dc:	1f 90       	pop	r1
    17de:	18 95       	reti

000017e0 <press_confirm>:

int press_confirm()
{
	int flag = 0;
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
    17e0:	87 e0       	ldi	r24, 0x07	; 7
    17e2:	88 b9       	out	0x08, r24	; 8
	enable_GC = 1; // habilita contador de 3s
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <enable_GC+0x1>
    17ec:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <enable_GC>
#include "header.h"

int press_confirm()
{
	int flag = 0;
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
	enable_GC = 1; // habilita contador de 3s
	
	while(((PIND & (1 << 6)) == 0) && !flag) // verifica se '#' esta pressionado ou se ja contou 3 seg
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <press_confirm+0x26>
	{
		if(COUNT == 2) // verifica se o contador chegou em 3
    17f6:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <COUNT>
    17fa:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <COUNT+0x1>
    17fe:	02 97       	sbiw	r24, 0x02	; 2
    1800:	11 f4       	brne	.+4      	; 0x1806 <press_confirm+0x26>
			flag = 1;
    1802:	21 e0       	ldi	r18, 0x01	; 1
    1804:	30 e0       	ldi	r19, 0x00	; 0
	int flag = 0;
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
	enable_GC = 1; // habilita contador de 3s
	
	while(((PIND & (1 << 6)) == 0) && !flag) // verifica se '#' esta pressionado ou se ja contou 3 seg
    1806:	4e 99       	sbic	0x09, 6	; 9
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <press_confirm+0x30>
    180a:	21 15       	cp	r18, r1
    180c:	31 05       	cpc	r19, r1
    180e:	99 f3       	breq	.-26     	; 0x17f6 <press_confirm+0x16>
	{
		if(COUNT == 2) // verifica se o contador chegou em 3
			flag = 1;
	}
	
	enable_GC = 0; // desabilita contador de 3s
    1810:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <enable_GC+0x1>
    1814:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <enable_GC>
	COUNT = 0;  // zera contador
    1818:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <COUNT+0x1>
    181c:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <COUNT>
	
	if(!flag)
    1820:	23 2b       	or	r18, r19
    1822:	19 f4       	brne	.+6      	; 0x182a <press_confirm+0x4a>
	{
		return 0;
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	08 95       	ret
	}
	else
	{
		return 1;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    182e:	08 95       	ret

00001830 <press_cancel>:

int press_cancel()
{
	char flag = 0;
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
    1830:	87 e0       	ldi	r24, 0x07	; 7
    1832:	88 b9       	out	0x08, r24	; 8
	enable_GC = 1; // habilita contador de 4s
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <enable_GC+0x1>
    183c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <enable_GC>
	}
}

int press_cancel()
{
	char flag = 0;
    1840:	20 e0       	ldi	r18, 0x00	; 0
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
	enable_GC = 1; // habilita contador de 4s
	
	while(((PIND & (1 << 4)) == 0) && !flag) // verifica se '*' esta pressionado ou se ja contou 4 seg
    1842:	07 c0       	rjmp	.+14     	; 0x1852 <press_cancel+0x22>
	{
		if(COUNT == 2) // verifica se o contador chegou em 4
    1844:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <COUNT>
    1848:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <COUNT+0x1>
    184c:	02 97       	sbiw	r24, 0x02	; 2
    184e:	09 f4       	brne	.+2      	; 0x1852 <press_cancel+0x22>
		flag = 1;
    1850:	21 e0       	ldi	r18, 0x01	; 1
	char flag = 0;
	
	PORTC = 0x07; //0000 0111 -> zera porta PC3
	enable_GC = 1; // habilita contador de 4s
	
	while(((PIND & (1 << 4)) == 0) && !flag) // verifica se '*' esta pressionado ou se ja contou 4 seg
    1852:	4c 99       	sbic	0x09, 4	; 9
    1854:	02 c0       	rjmp	.+4      	; 0x185a <press_cancel+0x2a>
    1856:	22 23       	and	r18, r18
    1858:	a9 f3       	breq	.-22     	; 0x1844 <press_cancel+0x14>
	{
		if(COUNT == 2) // verifica se o contador chegou em 4
		flag = 1;
	}
	
	enable_GC = 0; // desabilita contador de 4s
    185a:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <enable_GC+0x1>
    185e:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <enable_GC>
	COUNT = 0;  // zera contador
    1862:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <COUNT+0x1>
    1866:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <COUNT>
	
	if(!flag)
    186a:	21 11       	cpse	r18, r1
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <press_cancel+0x44>
	{
		return 0;
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	08 95       	ret
	}
	else
	{
		return 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    1878:	08 95       	ret

0000187a <delay_3s>:
// delay de avisos exibidos na tela.
void delay_3s() // USAR O CONTADOR DE 1 SEG
{
	int flag = 0;
	
	enable_GC = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <enable_GC+0x1>
    1882:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <enable_GC>
	sendChar(' ');
    1886:	80 e2       	ldi	r24, 0x20	; 32
    1888:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <sendChar>
}

// delay de avisos exibidos na tela.
void delay_3s() // USAR O CONTADOR DE 1 SEG
{
	int flag = 0;
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
	
	enable_GC = 1;
	sendChar(' ');
	while(!flag)
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <delay_3s+0x28>
	{
		if(COUNT == 3)
    1892:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <COUNT>
    1896:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <COUNT+0x1>
    189a:	03 97       	sbiw	r24, 0x03	; 3
    189c:	11 f4       	brne	.+4      	; 0x18a2 <delay_3s+0x28>
		{
			flag = 1;	
    189e:	21 e0       	ldi	r18, 0x01	; 1
    18a0:	30 e0       	ldi	r19, 0x00	; 0
{
	int flag = 0;
	
	enable_GC = 1;
	sendChar(' ');
	while(!flag)
    18a2:	21 15       	cp	r18, r1
    18a4:	31 05       	cpc	r19, r1
    18a6:	a9 f3       	breq	.-22     	; 0x1892 <delay_3s+0x18>
		if(COUNT == 3)
		{
			flag = 1;	
		}
	}
	enable_GC = 0;
    18a8:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <enable_GC+0x1>
    18ac:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <enable_GC>
	COUNT = 0;
    18b0:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <COUNT+0x1>
    18b4:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <COUNT>
    18b8:	08 95       	ret

000018ba <delay_debouncing>:
void delay_debouncing()
{
	// T_Timer = 1/16MHz = 62.5ns
	// Prescaler: 256-> 16MHz/256 = 62500Hz / T_Timer = 1/62500 = 16us
	//num_contagens = (1E-3)/16E-6 = 62
	TCCR0B = 0x04; // Configura preescaler de 256
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 194; //256 - 62 = 194
    18be:	82 ec       	ldi	r24, 0xC2	; 194
    18c0:	86 bd       	out	0x26, r24	; 38
	
	while ((TIFR0 & (1 << 0)) == 0); //aguarda flag
    18c2:	a8 9b       	sbis	0x15, 0	; 21
    18c4:	fe cf       	rjmp	.-4      	; 0x18c2 <delay_debouncing+0x8>
	TIFR0 |= (1 << 0); //limpa flag
    18c6:	85 b3       	in	r24, 0x15	; 21
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	85 bb       	out	0x15, r24	; 21
    18cc:	08 95       	ret

000018ce <delay_lcd>:
}

void delay_lcd()
{
	TCCR0B = 0x02;				//prescaler de 8, T_timer = 8*T_CPU = 0,5us
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 176;				//(40us/0,5us) = 80 contagens -> 256-80 = 176
    18d2:	80 eb       	ldi	r24, 0xB0	; 176
    18d4:	86 bd       	out	0x26, r24	; 38
	while(!(TIFR0 & (1<<0)));	//aguarda estouro
    18d6:	a8 9b       	sbis	0x15, 0	; 21
    18d8:	fe cf       	rjmp	.-4      	; 0x18d6 <delay_lcd+0x8>
	TIFR0 = (1<<0);				//limpa flag de estouro
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	85 bb       	out	0x15, r24	; 21
    18de:	08 95       	ret

000018e0 <delay_clear>:
}

void delay_clear()
{
	TCCR0B = 0x04;				//prescaler de 256, T_timer = 256*T_CPU = 16us
    18e0:	84 e0       	ldi	r24, 0x04	; 4
    18e2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 153;				//(1640us/16us) = 103 contagens -> 256-103 = 153
    18e4:	89 e9       	ldi	r24, 0x99	; 153
    18e6:	86 bd       	out	0x26, r24	; 38
	while(!(TIFR0 & (1<<0)));	//aguarda estouro
    18e8:	a8 9b       	sbis	0x15, 0	; 21
    18ea:	fe cf       	rjmp	.-4      	; 0x18e8 <delay_clear+0x8>
	TIFR0 = (1<<0);				//limpa flag de estouro
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	85 bb       	out	0x15, r24	; 21
    18f0:	08 95       	ret

000018f2 <__vector_13>:
}

ISR(TIMER1_OVF_vect)
{
    18f2:	1f 92       	push	r1
    18f4:	0f 92       	push	r0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	0f 92       	push	r0
    18fa:	11 24       	eor	r1, r1
    18fc:	2f 93       	push	r18
    18fe:	3f 93       	push	r19
    1900:	4f 93       	push	r20
    1902:	5f 93       	push	r21
    1904:	6f 93       	push	r22
    1906:	7f 93       	push	r23
    1908:	8f 93       	push	r24
    190a:	9f 93       	push	r25
    190c:	af 93       	push	r26
    190e:	bf 93       	push	r27
    1910:	ef 93       	push	r30
    1912:	ff 93       	push	r31
	TCNT1 = 0x0BDC;	//contagem de 1seg, para prescaler de 256 => 1min do sistema
    1914:	8c ed       	ldi	r24, 0xDC	; 220
    1916:	9b e0       	ldi	r25, 0x0B	; 11
    1918:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    191c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 = (1 << 0);   // Limpa flag de overflow
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	86 bb       	out	0x16, r24	; 22
	
	update_clock();
    1924:	0e 94 c5 00 	call	0x18a	; 0x18a <update_clock>
	
	if(STATE == 13)
    1928:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <STATE>
    192c:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <STATE+0x1>
    1930:	0d 97       	sbiw	r24, 0x0d	; 13
    1932:	11 f4       	brne	.+4      	; 0x1938 <__vector_13+0x46>
		display_time();
    1934:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <display_time>
	
	global_counters();
    1938:	0e 94 53 01 	call	0x2a6	; 0x2a6 <global_counters>
    193c:	ff 91       	pop	r31
    193e:	ef 91       	pop	r30
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f 90       	pop	r0
    195a:	1f 90       	pop	r1
    195c:	18 95       	reti

0000195e <__subsf3>:
    195e:	50 58       	subi	r21, 0x80	; 128

00001960 <__addsf3>:
    1960:	bb 27       	eor	r27, r27
    1962:	aa 27       	eor	r26, r26
    1964:	0e 94 c7 0c 	call	0x198e	; 0x198e <__addsf3x>
    1968:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__fp_round>
    196c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
    1970:	38 f0       	brcs	.+14     	; 0x1980 <__addsf3+0x20>
    1972:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
    1976:	20 f0       	brcs	.+8      	; 0x1980 <__addsf3+0x20>
    1978:	39 f4       	brne	.+14     	; 0x1988 <__addsf3+0x28>
    197a:	9f 3f       	cpi	r25, 0xFF	; 255
    197c:	19 f4       	brne	.+6      	; 0x1984 <__addsf3+0x24>
    197e:	26 f4       	brtc	.+8      	; 0x1988 <__addsf3+0x28>
    1980:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__fp_nan>
    1984:	0e f4       	brtc	.+2      	; 0x1988 <__addsf3+0x28>
    1986:	e0 95       	com	r30
    1988:	e7 fb       	bst	r30, 7
    198a:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__fp_inf>

0000198e <__addsf3x>:
    198e:	e9 2f       	mov	r30, r25
    1990:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__fp_split3>
    1994:	58 f3       	brcs	.-42     	; 0x196c <__addsf3+0xc>
    1996:	ba 17       	cp	r27, r26
    1998:	62 07       	cpc	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	95 07       	cpc	r25, r21
    19a0:	20 f0       	brcs	.+8      	; 0x19aa <__addsf3x+0x1c>
    19a2:	79 f4       	brne	.+30     	; 0x19c2 <__addsf3x+0x34>
    19a4:	a6 f5       	brtc	.+104    	; 0x1a0e <__addsf3x+0x80>
    19a6:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__fp_zero>
    19aa:	0e f4       	brtc	.+2      	; 0x19ae <__addsf3x+0x20>
    19ac:	e0 95       	com	r30
    19ae:	0b 2e       	mov	r0, r27
    19b0:	ba 2f       	mov	r27, r26
    19b2:	a0 2d       	mov	r26, r0
    19b4:	0b 01       	movw	r0, r22
    19b6:	b9 01       	movw	r22, r18
    19b8:	90 01       	movw	r18, r0
    19ba:	0c 01       	movw	r0, r24
    19bc:	ca 01       	movw	r24, r20
    19be:	a0 01       	movw	r20, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	ff 27       	eor	r31, r31
    19c4:	59 1b       	sub	r21, r25
    19c6:	99 f0       	breq	.+38     	; 0x19ee <__addsf3x+0x60>
    19c8:	59 3f       	cpi	r21, 0xF9	; 249
    19ca:	50 f4       	brcc	.+20     	; 0x19e0 <__addsf3x+0x52>
    19cc:	50 3e       	cpi	r21, 0xE0	; 224
    19ce:	68 f1       	brcs	.+90     	; 0x1a2a <__addsf3x+0x9c>
    19d0:	1a 16       	cp	r1, r26
    19d2:	f0 40       	sbci	r31, 0x00	; 0
    19d4:	a2 2f       	mov	r26, r18
    19d6:	23 2f       	mov	r18, r19
    19d8:	34 2f       	mov	r19, r20
    19da:	44 27       	eor	r20, r20
    19dc:	58 5f       	subi	r21, 0xF8	; 248
    19de:	f3 cf       	rjmp	.-26     	; 0x19c6 <__addsf3x+0x38>
    19e0:	46 95       	lsr	r20
    19e2:	37 95       	ror	r19
    19e4:	27 95       	ror	r18
    19e6:	a7 95       	ror	r26
    19e8:	f0 40       	sbci	r31, 0x00	; 0
    19ea:	53 95       	inc	r21
    19ec:	c9 f7       	brne	.-14     	; 0x19e0 <__addsf3x+0x52>
    19ee:	7e f4       	brtc	.+30     	; 0x1a0e <__addsf3x+0x80>
    19f0:	1f 16       	cp	r1, r31
    19f2:	ba 0b       	sbc	r27, r26
    19f4:	62 0b       	sbc	r22, r18
    19f6:	73 0b       	sbc	r23, r19
    19f8:	84 0b       	sbc	r24, r20
    19fa:	ba f0       	brmi	.+46     	; 0x1a2a <__addsf3x+0x9c>
    19fc:	91 50       	subi	r25, 0x01	; 1
    19fe:	a1 f0       	breq	.+40     	; 0x1a28 <__addsf3x+0x9a>
    1a00:	ff 0f       	add	r31, r31
    1a02:	bb 1f       	adc	r27, r27
    1a04:	66 1f       	adc	r22, r22
    1a06:	77 1f       	adc	r23, r23
    1a08:	88 1f       	adc	r24, r24
    1a0a:	c2 f7       	brpl	.-16     	; 0x19fc <__addsf3x+0x6e>
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <__addsf3x+0x9c>
    1a0e:	ba 0f       	add	r27, r26
    1a10:	62 1f       	adc	r22, r18
    1a12:	73 1f       	adc	r23, r19
    1a14:	84 1f       	adc	r24, r20
    1a16:	48 f4       	brcc	.+18     	; 0x1a2a <__addsf3x+0x9c>
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	b7 95       	ror	r27
    1a20:	f7 95       	ror	r31
    1a22:	9e 3f       	cpi	r25, 0xFE	; 254
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <__addsf3x+0x9a>
    1a26:	b0 cf       	rjmp	.-160    	; 0x1988 <__addsf3+0x28>
    1a28:	93 95       	inc	r25
    1a2a:	88 0f       	add	r24, r24
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <__addsf3x+0xa2>
    1a2e:	99 27       	eor	r25, r25
    1a30:	ee 0f       	add	r30, r30
    1a32:	97 95       	ror	r25
    1a34:	87 95       	ror	r24
    1a36:	08 95       	ret

00001a38 <__fixsfsi>:
    1a38:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__fixunssfsi>
    1a3c:	68 94       	set
    1a3e:	b1 11       	cpse	r27, r1
    1a40:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__fp_szero>
    1a44:	08 95       	ret

00001a46 <__fixunssfsi>:
    1a46:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__fp_splitA>
    1a4a:	88 f0       	brcs	.+34     	; 0x1a6e <__fixunssfsi+0x28>
    1a4c:	9f 57       	subi	r25, 0x7F	; 127
    1a4e:	98 f0       	brcs	.+38     	; 0x1a76 <__fixunssfsi+0x30>
    1a50:	b9 2f       	mov	r27, r25
    1a52:	99 27       	eor	r25, r25
    1a54:	b7 51       	subi	r27, 0x17	; 23
    1a56:	b0 f0       	brcs	.+44     	; 0x1a84 <__fixunssfsi+0x3e>
    1a58:	e1 f0       	breq	.+56     	; 0x1a92 <__fixunssfsi+0x4c>
    1a5a:	66 0f       	add	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	88 1f       	adc	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	1a f0       	brmi	.+6      	; 0x1a6a <__fixunssfsi+0x24>
    1a64:	ba 95       	dec	r27
    1a66:	c9 f7       	brne	.-14     	; 0x1a5a <__fixunssfsi+0x14>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <__fixunssfsi+0x4c>
    1a6a:	b1 30       	cpi	r27, 0x01	; 1
    1a6c:	91 f0       	breq	.+36     	; 0x1a92 <__fixunssfsi+0x4c>
    1a6e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__fp_zero>
    1a72:	b1 e0       	ldi	r27, 0x01	; 1
    1a74:	08 95       	ret
    1a76:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__fp_zero>
    1a7a:	67 2f       	mov	r22, r23
    1a7c:	78 2f       	mov	r23, r24
    1a7e:	88 27       	eor	r24, r24
    1a80:	b8 5f       	subi	r27, 0xF8	; 248
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <__fixunssfsi+0x4c>
    1a84:	b9 3f       	cpi	r27, 0xF9	; 249
    1a86:	cc f3       	brlt	.-14     	; 0x1a7a <__fixunssfsi+0x34>
    1a88:	86 95       	lsr	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b3 95       	inc	r27
    1a90:	d9 f7       	brne	.-10     	; 0x1a88 <__fixunssfsi+0x42>
    1a92:	3e f4       	brtc	.+14     	; 0x1aa2 <__fixunssfsi+0x5c>
    1a94:	90 95       	com	r25
    1a96:	80 95       	com	r24
    1a98:	70 95       	com	r23
    1a9a:	61 95       	neg	r22
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	08 95       	ret

00001aa4 <__floatunsisf>:
    1aa4:	e8 94       	clt
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <__floatsisf+0x12>

00001aa8 <__floatsisf>:
    1aa8:	97 fb       	bst	r25, 7
    1aaa:	3e f4       	brtc	.+14     	; 0x1aba <__floatsisf+0x12>
    1aac:	90 95       	com	r25
    1aae:	80 95       	com	r24
    1ab0:	70 95       	com	r23
    1ab2:	61 95       	neg	r22
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	99 23       	and	r25, r25
    1abc:	a9 f0       	breq	.+42     	; 0x1ae8 <__floatsisf+0x40>
    1abe:	f9 2f       	mov	r31, r25
    1ac0:	96 e9       	ldi	r25, 0x96	; 150
    1ac2:	bb 27       	eor	r27, r27
    1ac4:	93 95       	inc	r25
    1ac6:	f6 95       	lsr	r31
    1ac8:	87 95       	ror	r24
    1aca:	77 95       	ror	r23
    1acc:	67 95       	ror	r22
    1ace:	b7 95       	ror	r27
    1ad0:	f1 11       	cpse	r31, r1
    1ad2:	f8 cf       	rjmp	.-16     	; 0x1ac4 <__floatsisf+0x1c>
    1ad4:	fa f4       	brpl	.+62     	; 0x1b14 <__floatsisf+0x6c>
    1ad6:	bb 0f       	add	r27, r27
    1ad8:	11 f4       	brne	.+4      	; 0x1ade <__floatsisf+0x36>
    1ada:	60 ff       	sbrs	r22, 0
    1adc:	1b c0       	rjmp	.+54     	; 0x1b14 <__floatsisf+0x6c>
    1ade:	6f 5f       	subi	r22, 0xFF	; 255
    1ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	16 c0       	rjmp	.+44     	; 0x1b14 <__floatsisf+0x6c>
    1ae8:	88 23       	and	r24, r24
    1aea:	11 f0       	breq	.+4      	; 0x1af0 <__floatsisf+0x48>
    1aec:	96 e9       	ldi	r25, 0x96	; 150
    1aee:	11 c0       	rjmp	.+34     	; 0x1b12 <__floatsisf+0x6a>
    1af0:	77 23       	and	r23, r23
    1af2:	21 f0       	breq	.+8      	; 0x1afc <__floatsisf+0x54>
    1af4:	9e e8       	ldi	r25, 0x8E	; 142
    1af6:	87 2f       	mov	r24, r23
    1af8:	76 2f       	mov	r23, r22
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <__floatsisf+0x5e>
    1afc:	66 23       	and	r22, r22
    1afe:	71 f0       	breq	.+28     	; 0x1b1c <__floatsisf+0x74>
    1b00:	96 e8       	ldi	r25, 0x86	; 134
    1b02:	86 2f       	mov	r24, r22
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	2a f0       	brmi	.+10     	; 0x1b14 <__floatsisf+0x6c>
    1b0a:	9a 95       	dec	r25
    1b0c:	66 0f       	add	r22, r22
    1b0e:	77 1f       	adc	r23, r23
    1b10:	88 1f       	adc	r24, r24
    1b12:	da f7       	brpl	.-10     	; 0x1b0a <__floatsisf+0x62>
    1b14:	88 0f       	add	r24, r24
    1b16:	96 95       	lsr	r25
    1b18:	87 95       	ror	r24
    1b1a:	97 f9       	bld	r25, 7
    1b1c:	08 95       	ret

00001b1e <__fp_inf>:
    1b1e:	97 f9       	bld	r25, 7
    1b20:	9f 67       	ori	r25, 0x7F	; 127
    1b22:	80 e8       	ldi	r24, 0x80	; 128
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	08 95       	ret

00001b2a <__fp_nan>:
    1b2a:	9f ef       	ldi	r25, 0xFF	; 255
    1b2c:	80 ec       	ldi	r24, 0xC0	; 192
    1b2e:	08 95       	ret

00001b30 <__fp_pscA>:
    1b30:	00 24       	eor	r0, r0
    1b32:	0a 94       	dec	r0
    1b34:	16 16       	cp	r1, r22
    1b36:	17 06       	cpc	r1, r23
    1b38:	18 06       	cpc	r1, r24
    1b3a:	09 06       	cpc	r0, r25
    1b3c:	08 95       	ret

00001b3e <__fp_pscB>:
    1b3e:	00 24       	eor	r0, r0
    1b40:	0a 94       	dec	r0
    1b42:	12 16       	cp	r1, r18
    1b44:	13 06       	cpc	r1, r19
    1b46:	14 06       	cpc	r1, r20
    1b48:	05 06       	cpc	r0, r21
    1b4a:	08 95       	ret

00001b4c <__fp_round>:
    1b4c:	09 2e       	mov	r0, r25
    1b4e:	03 94       	inc	r0
    1b50:	00 0c       	add	r0, r0
    1b52:	11 f4       	brne	.+4      	; 0x1b58 <__fp_round+0xc>
    1b54:	88 23       	and	r24, r24
    1b56:	52 f0       	brmi	.+20     	; 0x1b6c <__fp_round+0x20>
    1b58:	bb 0f       	add	r27, r27
    1b5a:	40 f4       	brcc	.+16     	; 0x1b6c <__fp_round+0x20>
    1b5c:	bf 2b       	or	r27, r31
    1b5e:	11 f4       	brne	.+4      	; 0x1b64 <__fp_round+0x18>
    1b60:	60 ff       	sbrs	r22, 0
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <__fp_round+0x20>
    1b64:	6f 5f       	subi	r22, 0xFF	; 255
    1b66:	7f 4f       	sbci	r23, 0xFF	; 255
    1b68:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6c:	08 95       	ret

00001b6e <__fp_split3>:
    1b6e:	57 fd       	sbrc	r21, 7
    1b70:	90 58       	subi	r25, 0x80	; 128
    1b72:	44 0f       	add	r20, r20
    1b74:	55 1f       	adc	r21, r21
    1b76:	59 f0       	breq	.+22     	; 0x1b8e <__fp_splitA+0x10>
    1b78:	5f 3f       	cpi	r21, 0xFF	; 255
    1b7a:	71 f0       	breq	.+28     	; 0x1b98 <__fp_splitA+0x1a>
    1b7c:	47 95       	ror	r20

00001b7e <__fp_splitA>:
    1b7e:	88 0f       	add	r24, r24
    1b80:	97 fb       	bst	r25, 7
    1b82:	99 1f       	adc	r25, r25
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <__fp_splitA+0x20>
    1b86:	9f 3f       	cpi	r25, 0xFF	; 255
    1b88:	79 f0       	breq	.+30     	; 0x1ba8 <__fp_splitA+0x2a>
    1b8a:	87 95       	ror	r24
    1b8c:	08 95       	ret
    1b8e:	12 16       	cp	r1, r18
    1b90:	13 06       	cpc	r1, r19
    1b92:	14 06       	cpc	r1, r20
    1b94:	55 1f       	adc	r21, r21
    1b96:	f2 cf       	rjmp	.-28     	; 0x1b7c <__fp_split3+0xe>
    1b98:	46 95       	lsr	r20
    1b9a:	f1 df       	rcall	.-30     	; 0x1b7e <__fp_splitA>
    1b9c:	08 c0       	rjmp	.+16     	; 0x1bae <__fp_splitA+0x30>
    1b9e:	16 16       	cp	r1, r22
    1ba0:	17 06       	cpc	r1, r23
    1ba2:	18 06       	cpc	r1, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	f1 cf       	rjmp	.-30     	; 0x1b8a <__fp_splitA+0xc>
    1ba8:	86 95       	lsr	r24
    1baa:	71 05       	cpc	r23, r1
    1bac:	61 05       	cpc	r22, r1
    1bae:	08 94       	sec
    1bb0:	08 95       	ret

00001bb2 <__fp_zero>:
    1bb2:	e8 94       	clt

00001bb4 <__fp_szero>:
    1bb4:	bb 27       	eor	r27, r27
    1bb6:	66 27       	eor	r22, r22
    1bb8:	77 27       	eor	r23, r23
    1bba:	cb 01       	movw	r24, r22
    1bbc:	97 f9       	bld	r25, 7
    1bbe:	08 95       	ret

00001bc0 <__mulsf3>:
    1bc0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__mulsf3x>
    1bc4:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__fp_round>
    1bc8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
    1bcc:	38 f0       	brcs	.+14     	; 0x1bdc <__mulsf3+0x1c>
    1bce:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
    1bd2:	20 f0       	brcs	.+8      	; 0x1bdc <__mulsf3+0x1c>
    1bd4:	95 23       	and	r25, r21
    1bd6:	11 f0       	breq	.+4      	; 0x1bdc <__mulsf3+0x1c>
    1bd8:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__fp_inf>
    1bdc:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__fp_nan>
    1be0:	11 24       	eor	r1, r1
    1be2:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__fp_szero>

00001be6 <__mulsf3x>:
    1be6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__fp_split3>
    1bea:	70 f3       	brcs	.-36     	; 0x1bc8 <__mulsf3+0x8>

00001bec <__mulsf3_pse>:
    1bec:	95 9f       	mul	r25, r21
    1bee:	c1 f3       	breq	.-16     	; 0x1be0 <__mulsf3+0x20>
    1bf0:	95 0f       	add	r25, r21
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	55 1f       	adc	r21, r21
    1bf6:	62 9f       	mul	r22, r18
    1bf8:	f0 01       	movw	r30, r0
    1bfa:	72 9f       	mul	r23, r18
    1bfc:	bb 27       	eor	r27, r27
    1bfe:	f0 0d       	add	r31, r0
    1c00:	b1 1d       	adc	r27, r1
    1c02:	63 9f       	mul	r22, r19
    1c04:	aa 27       	eor	r26, r26
    1c06:	f0 0d       	add	r31, r0
    1c08:	b1 1d       	adc	r27, r1
    1c0a:	aa 1f       	adc	r26, r26
    1c0c:	64 9f       	mul	r22, r20
    1c0e:	66 27       	eor	r22, r22
    1c10:	b0 0d       	add	r27, r0
    1c12:	a1 1d       	adc	r26, r1
    1c14:	66 1f       	adc	r22, r22
    1c16:	82 9f       	mul	r24, r18
    1c18:	22 27       	eor	r18, r18
    1c1a:	b0 0d       	add	r27, r0
    1c1c:	a1 1d       	adc	r26, r1
    1c1e:	62 1f       	adc	r22, r18
    1c20:	73 9f       	mul	r23, r19
    1c22:	b0 0d       	add	r27, r0
    1c24:	a1 1d       	adc	r26, r1
    1c26:	62 1f       	adc	r22, r18
    1c28:	83 9f       	mul	r24, r19
    1c2a:	a0 0d       	add	r26, r0
    1c2c:	61 1d       	adc	r22, r1
    1c2e:	22 1f       	adc	r18, r18
    1c30:	74 9f       	mul	r23, r20
    1c32:	33 27       	eor	r19, r19
    1c34:	a0 0d       	add	r26, r0
    1c36:	61 1d       	adc	r22, r1
    1c38:	23 1f       	adc	r18, r19
    1c3a:	84 9f       	mul	r24, r20
    1c3c:	60 0d       	add	r22, r0
    1c3e:	21 1d       	adc	r18, r1
    1c40:	82 2f       	mov	r24, r18
    1c42:	76 2f       	mov	r23, r22
    1c44:	6a 2f       	mov	r22, r26
    1c46:	11 24       	eor	r1, r1
    1c48:	9f 57       	subi	r25, 0x7F	; 127
    1c4a:	50 40       	sbci	r21, 0x00	; 0
    1c4c:	9a f0       	brmi	.+38     	; 0x1c74 <__mulsf3_pse+0x88>
    1c4e:	f1 f0       	breq	.+60     	; 0x1c8c <__mulsf3_pse+0xa0>
    1c50:	88 23       	and	r24, r24
    1c52:	4a f0       	brmi	.+18     	; 0x1c66 <__mulsf3_pse+0x7a>
    1c54:	ee 0f       	add	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	bb 1f       	adc	r27, r27
    1c5a:	66 1f       	adc	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	88 1f       	adc	r24, r24
    1c60:	91 50       	subi	r25, 0x01	; 1
    1c62:	50 40       	sbci	r21, 0x00	; 0
    1c64:	a9 f7       	brne	.-22     	; 0x1c50 <__mulsf3_pse+0x64>
    1c66:	9e 3f       	cpi	r25, 0xFE	; 254
    1c68:	51 05       	cpc	r21, r1
    1c6a:	80 f0       	brcs	.+32     	; 0x1c8c <__mulsf3_pse+0xa0>
    1c6c:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__fp_inf>
    1c70:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__fp_szero>
    1c74:	5f 3f       	cpi	r21, 0xFF	; 255
    1c76:	e4 f3       	brlt	.-8      	; 0x1c70 <__mulsf3_pse+0x84>
    1c78:	98 3e       	cpi	r25, 0xE8	; 232
    1c7a:	d4 f3       	brlt	.-12     	; 0x1c70 <__mulsf3_pse+0x84>
    1c7c:	86 95       	lsr	r24
    1c7e:	77 95       	ror	r23
    1c80:	67 95       	ror	r22
    1c82:	b7 95       	ror	r27
    1c84:	f7 95       	ror	r31
    1c86:	e7 95       	ror	r30
    1c88:	9f 5f       	subi	r25, 0xFF	; 255
    1c8a:	c1 f7       	brne	.-16     	; 0x1c7c <__mulsf3_pse+0x90>
    1c8c:	fe 2b       	or	r31, r30
    1c8e:	88 0f       	add	r24, r24
    1c90:	91 1d       	adc	r25, r1
    1c92:	96 95       	lsr	r25
    1c94:	87 95       	ror	r24
    1c96:	97 f9       	bld	r25, 7
    1c98:	08 95       	ret

00001c9a <__divmodhi4>:
    1c9a:	97 fb       	bst	r25, 7
    1c9c:	07 2e       	mov	r0, r23
    1c9e:	16 f4       	brtc	.+4      	; 0x1ca4 <__divmodhi4+0xa>
    1ca0:	00 94       	com	r0
    1ca2:	07 d0       	rcall	.+14     	; 0x1cb2 <__divmodhi4_neg1>
    1ca4:	77 fd       	sbrc	r23, 7
    1ca6:	09 d0       	rcall	.+18     	; 0x1cba <__divmodhi4_neg2>
    1ca8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__udivmodhi4>
    1cac:	07 fc       	sbrc	r0, 7
    1cae:	05 d0       	rcall	.+10     	; 0x1cba <__divmodhi4_neg2>
    1cb0:	3e f4       	brtc	.+14     	; 0x1cc0 <__divmodhi4_exit>

00001cb2 <__divmodhi4_neg1>:
    1cb2:	90 95       	com	r25
    1cb4:	81 95       	neg	r24
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	08 95       	ret

00001cba <__divmodhi4_neg2>:
    1cba:	70 95       	com	r23
    1cbc:	61 95       	neg	r22
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255

00001cc0 <__divmodhi4_exit>:
    1cc0:	08 95       	ret

00001cc2 <__tablejump2__>:
    1cc2:	ee 0f       	add	r30, r30
    1cc4:	ff 1f       	adc	r31, r31
    1cc6:	05 90       	lpm	r0, Z+
    1cc8:	f4 91       	lpm	r31, Z
    1cca:	e0 2d       	mov	r30, r0
    1ccc:	09 94       	ijmp

00001cce <__udivmodhi4>:
    1cce:	aa 1b       	sub	r26, r26
    1cd0:	bb 1b       	sub	r27, r27
    1cd2:	51 e1       	ldi	r21, 0x11	; 17
    1cd4:	07 c0       	rjmp	.+14     	; 0x1ce4 <__udivmodhi4_ep>

00001cd6 <__udivmodhi4_loop>:
    1cd6:	aa 1f       	adc	r26, r26
    1cd8:	bb 1f       	adc	r27, r27
    1cda:	a6 17       	cp	r26, r22
    1cdc:	b7 07       	cpc	r27, r23
    1cde:	10 f0       	brcs	.+4      	; 0x1ce4 <__udivmodhi4_ep>
    1ce0:	a6 1b       	sub	r26, r22
    1ce2:	b7 0b       	sbc	r27, r23

00001ce4 <__udivmodhi4_ep>:
    1ce4:	88 1f       	adc	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	5a 95       	dec	r21
    1cea:	a9 f7       	brne	.-22     	; 0x1cd6 <__udivmodhi4_loop>
    1cec:	80 95       	com	r24
    1cee:	90 95       	com	r25
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	08 95       	ret

00001cf6 <strcmp>:
    1cf6:	fb 01       	movw	r30, r22
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	8d 91       	ld	r24, X+
    1cfc:	01 90       	ld	r0, Z+
    1cfe:	80 19       	sub	r24, r0
    1d00:	01 10       	cpse	r0, r1
    1d02:	d9 f3       	breq	.-10     	; 0x1cfa <strcmp+0x4>
    1d04:	99 0b       	sbc	r25, r25
    1d06:	08 95       	ret

00001d08 <strcpy>:
    1d08:	fb 01       	movw	r30, r22
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	01 90       	ld	r0, Z+
    1d0e:	0d 92       	st	X+, r0
    1d10:	00 20       	and	r0, r0
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <strcpy+0x4>
    1d14:	08 95       	ret

00001d16 <_exit>:
    1d16:	f8 94       	cli

00001d18 <__stop_program>:
    1d18:	ff cf       	rjmp	.-2      	; 0x1d18 <__stop_program>
